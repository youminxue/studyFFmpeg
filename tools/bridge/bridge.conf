worker_processes  2;
error_log         logs/error.log info;
# user root;

events {
  worker_connections  1024;
}

http {
  access_log  logs/access.log;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" $request_time '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  lua_package_path "$prefix/?.lua;$prefix/3rdparty/?.lua;;";

  # will store raw json, for lua_shared_dict can noly store primitive type
  lua_shared_dict shm_process_lock 100k;
  lua_shared_dict shm_daemon_process 1m; # used to store task info of each instance
  lua_shared_dict shm_ial_infos 50m; # used to store task info of each instance
  lua_shared_dict shm_dyn_trans_infos 100m; # used to store task info of each instance

  #init_by_lua_block {
  #  -- clean up daemon_worker field in case we are reloading (-s reload or HUP)
  #  local daemon_worker = ngx.shared.daemon_worker
  #  daemon_worker:set("daemon_worker_id", nil)
  #  ngx.log(ngx.INFO, "clear daemon_worker, value now: ", daemon_worker:get("daemon_worker_id"))
  #}

  init_worker_by_lua_block {
    local daemon = require "daemon"
    local daemon_task_infos = ngx.shared.shm_daemon_process
    -- only one worker acts as daemon
    if ngx.worker.id() == 0 then
        daemon.init()
        daemon.do_monitor() -- setup a timer to monitor all instance. TODO: also could do new instance spawn
    end
  }

  # the app reuests
  server {
    listen          8080;
    lua_code_cache  on;
    # external request for interactive live streaming and on demand parallel transcoding
    include bridge.d/interactive_live.conf;
    include bridge.d/dyn_transcode.conf;
    # internal task reports
    inlclude task.conf;
  }
}
