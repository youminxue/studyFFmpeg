location ~* ^/api1/ils/create_room {
  content_by_lua_block {
    local request_method = ngx.var.request_method
    if "POST" == request_method then
      ngx.req.read_body()
      local create_room_msgstr = ngx.req.get_body_data()
      local bridge = require "bridge"
      ngx.ctx.resp = bridge.create_room(create_room_msgstr)
    end

    if ngx.ctx.resp ~= nil then
      ngx.say(cjson.encode(ngx.ctx.resp))
    else
      ngx.status = 500
    end
  }

  # try logging in log phrase as much as possible
  log_by_lua_block {
    local bridge = require "bridge"
    bridge.log_update_resp(ngx.ctx.resp)
  }
}

location ~* ^/api1/ils/delete_room {
  content_by_lua_block {
    local request_method = ngx.var.request_method
    if "POST" == request_method then
      ngx.req.read_body()
      local create_room_msgstr = ngx.req.get_body_data()
      local bridge = require "bridge"
      ngx.ctx.resp = bridge.create_room(create_room_msgstr)
    end

    if ngx.ctx.resp ~= nil then
      ngx.say(cjson.encode(ngx.ctx.resp))
    else
      ngx.status = 500
    end
  }
}

location ~* ^/api1/ils/join_room {
  content_by_lua_block {
    local request_method = ngx.var.request_method
    if "POST" == request_method then
      ngx.req.read_body()
      local create_room_msgstr = ngx.req.get_body_data()
      local bridge = require "bridge"
      ngx.ctx.resp = bridge.join_room(create_room_msgstr)
    end

    if ngx.ctx.resp ~= nil then
      ngx.say(cjson.encode(ngx.ctx.resp))
    else
      ngx.status = 500
    end
  }
}

location ~* ^/api1/ils/left_room {
  content_by_lua_block {
    local request_method = ngx.var.request_method
    if "POST" == request_method then
      ngx.req.read_body()
      local create_room_msgstr = ngx.req.get_body_data()
      local bridge = require "bridge"
      ngx.ctx.resp = bridge.left_room(left_room_msgstr)
    end

    if ngx.ctx.resp ~= nil then
      ngx.say(cjson.encode(ngx.ctx.resp))
    else
      ngx.status = 500
    end
  }
}

location ~* ^/api1/ils/room_stream_info {
  content_by_lua_block {
    local request_method = ngx.var.request_method
    if "POST" == request_method then
      ngx.req.read_body()
      local query_room_stream_info_msgstr = ngx.req.get_body_data()
      local bridge = require "bridge"
      ngx.ctx.resp = bridge.get_room_stream_info(query_room_stream_info_msgstr)
    end

    if ngx.ctx.resp ~= nil then
      ngx.say(cjson.encode(ngx.ctx.resp))
    else
      ngx.status = 500
    end
  }
}

location ~* ^/api1/ils/change_room_layout {
  content_by_lua_block {
    local request_method = ngx.var.request_method
    if "POST" == request_method then
      ngx.req.read_body()
      local change_room_layout_msgstr = ngx.req.get_body_data()
      local bridge = require "bridge"
      ngx.ctx.resp = bridge.get_room_stream_info(change_room_layout_msgstr)
    end

    if ngx.ctx.resp ~= nil then
      ngx.say(cjson.encode(ngx.ctx.resp))
    else
      ngx.status = 500
    end
  }
}