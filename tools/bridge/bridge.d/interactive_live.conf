# shm_daemon_process status will be updated by create_room and task status report: use daemon_status_lock
location ~* ^/api1/ial/create_room/([0-9]+) {
  set $room_id $1
  set $target_instance '';
  access_by_lua_block {
    local config = require "config_bridge"
    local resty_lock = require "resty.lock"
    local lock, err = resty_lock:new("shm_process_lock")
    if not lock then
       ngx.log(ngx.ERR, "failed to create lock: ", err)
       return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end

    -- daemon_process status changing by task create/delete/update using 'daemon_status_lock'
    lock:lock("daemon_status_lock")
    -- check room_id existing
    local ial_info = ngx.shared.shm_ial_infos
    local val, _ = ial_info:get(ngx.var.room_id)
    if val ~= nil then
       ngx.log(ngx.ERR, "room already exist: ", ngx.var.room_id)
       lock:unlock()
       return ngx.exit(ngx.HTTP_BAD_REQUEST)
    end

    local daemon_info = ngx.shared.shm_daemon_process
    local daemon_ports = daemon_info:get_keys()
    for _, port_str in pairs(daemon_ports) do
      local pid, flags = daemon_info:get(port_str)
      if pid ~= nil and flags == config.AVAILABLE then
        ngx.var.target_instance = config.task_instance_dst .. ":" .. port_str
        daemon_info:set(port_str, pid, 0, config.INSTANCE_STARTING)
        ial_info:set(ngx.var.room_id, "{\"status\" : \"create\"}", config.task_report_interval + 1, tonumber(port_str))
        break
      end
    end
    lock:unlock()
  }

  proxy_pass http://$target_instance/create_room/$1;
}

location ~* ^/api1/ial/([-_a-zA-Z0-9]+)/([0-9]+) {
  set $room_id $2;
  set $target_instance '';

  access_by_lua_block {
    local ial_infos = ngx.shared.shm_ial_infos
    local val, port = ial_info:get(ngx.var.room_id)
    if val == nil then
       -- if task not report in required interval, 'room_id' will expire and therefore roomNotExit (refuse futher message)
       ngx.log(ngx.ERR, "room not exist: " .. ngx.var.room_id)
       return ngx.exit(ngx.HTTP_BAD_REQUEST)
    end
    ngx.var.target_instance = config.task_instance_dst .. ":" tostring(port)
  }
  proxy_pass http://$target_instance/$1;
}