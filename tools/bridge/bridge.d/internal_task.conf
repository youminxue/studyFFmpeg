# shm_daemon_process status will be updated by create_room and task status report: use daemon_status_lock
location ~* ^/api1/ial/exit/([0-9]+) {
  set $room_id $1
  content_by_lua_block {
    local resty_lock = require "resty.lock"
    local config = require "config_bridge"
    local lock, err = resty_lock:new("shm_process_lock")
    if not lock then
       ngx.log(ngx.ERR, "failed to create lock: ", err)
       return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end

    lock:lock("daemon_status_lock")
    local ial_info = ngx.shared.shm_ial_infos
    local val, port = ial_info:get(ngx.var.room_id)
    if val == nil then
       ngx.log(ngx.ERR, "room not exist: ", ngx.var.room_id)
       lock:unlock()
       return ngx.exit(ngx.HTTP_BAD_REQUEST)
    end
    ial_info:delete(ngx.var.room_id)
    -- will not explicitly set daemon pid to nil, this will make daemon re-spwan a new instance right away, and
    -- may cause port bind fail. here we just do nothing and let daemon timer do process exit check
    lock:unlock()
    return ngx.exit(200)
  }
}

# for simplicity, won't change daemon_instance's status right now
location ~* ^/api1/ial/status_report/([0-9]+) {
  set $room_id $1
  content_by_lua_block {
    local config = require "config_bridge"
    local ial_info = ngx.shared.shm_ial_infos
    local val, port = ial_info:get(ngx.var.room_id)
    if val == nil then
       ngx.log(ngx.ERR, "room not exist: ", ngx.var.room_id)
       return ngx.exit(ngx.HTTP_BAD_REQUEST)
    end
    local status_report = ngx.req.get_body_data()
    ial_info:set(ngx.var.room_id, status_report, config.task_report_interval + 1, port)
    return ngx.exit(200)
  }
}