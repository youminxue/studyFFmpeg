// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ialConfig.proto

#include "ialConfig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_appGlobalSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalSetting_appGlobalSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davStreamletSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_InputStreamletSetting_davStreamletSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davStreamletSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MixStreamletSetting_davStreamletSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davStreamletSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_OutputStreamletSetting_davStreamletSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ialConfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IalGlobalSetting_ialConfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ialConfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IalTaskConfig_OutputSettingsEntry_DoNotUse_ialConfig_2eproto;
namespace IalConfig {
class IalGlobalSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IalGlobalSetting> _instance;
} _IalGlobalSetting_default_instance_;
class IalTaskConfig_OutputSettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IalTaskConfig_OutputSettingsEntry_DoNotUse> _instance;
} _IalTaskConfig_OutputSettingsEntry_DoNotUse_default_instance_;
class IalTaskConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IalTaskConfig> _instance;
} _IalTaskConfig_default_instance_;
}  // namespace IalConfig
static void InitDefaultsscc_info_IalGlobalSetting_ialConfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IalConfig::_IalGlobalSetting_default_instance_;
    new (ptr) ::IalConfig::IalGlobalSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IalConfig::IalGlobalSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IalGlobalSetting_ialConfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IalGlobalSetting_ialConfig_2eproto}, {}};

static void InitDefaultsscc_info_IalTaskConfig_ialConfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IalConfig::_IalTaskConfig_default_instance_;
    new (ptr) ::IalConfig::IalTaskConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IalConfig::IalTaskConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_IalTaskConfig_ialConfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_IalTaskConfig_ialConfig_2eproto}, {
      &scc_info_GlobalSetting_appGlobalSetting_2eproto.base,
      &scc_info_IalGlobalSetting_ialConfig_2eproto.base,
      &scc_info_InputStreamletSetting_davStreamletSetting_2eproto.base,
      &scc_info_MixStreamletSetting_davStreamletSetting_2eproto.base,
      &scc_info_IalTaskConfig_OutputSettingsEntry_DoNotUse_ialConfig_2eproto.base,}};

static void InitDefaultsscc_info_IalTaskConfig_OutputSettingsEntry_DoNotUse_ialConfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IalConfig::_IalTaskConfig_OutputSettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse();
  }
  ::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IalTaskConfig_OutputSettingsEntry_DoNotUse_ialConfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IalTaskConfig_OutputSettingsEntry_DoNotUse_ialConfig_2eproto}, {
      &scc_info_OutputStreamletSetting_davStreamletSetting_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ialConfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ialConfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ialConfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ialConfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalGlobalSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalGlobalSetting, max_participants_),
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig, app_global_setting_),
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig, ial_global_setting_),
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig, input_setting_),
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig, mix_setting_),
  PROTOBUF_FIELD_OFFSET(::IalConfig::IalTaskConfig, output_settings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IalConfig::IalGlobalSetting)},
  { 6, 13, sizeof(::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse)},
  { 15, -1, sizeof(::IalConfig::IalTaskConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IalConfig::_IalGlobalSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IalConfig::_IalTaskConfig_OutputSettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IalConfig::_IalTaskConfig_default_instance_),
};

const char descriptor_table_protodef_ialConfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ialConfig.proto\022\tIalConfig\032\031davStreaml"
  "etSetting.proto\032\026appGlobalSetting.proto\""
  ",\n\020IalGlobalSetting\022\030\n\020max_participants\030"
  "\n \001(\005\"\262\003\n\rIalTaskConfig\022;\n\022app_global_se"
  "tting\030\001 \001(\0132\037.AppGlobalSetting.GlobalSet"
  "ting\0227\n\022ial_global_setting\030\002 \001(\0132\033.IalCo"
  "nfig.IalGlobalSetting\022A\n\rinput_setting\030\n"
  " \001(\0132*.DavStreamletSetting.InputStreamle"
  "tSetting\022=\n\013mix_setting\030\013 \001(\0132(.DavStrea"
  "mletSetting.MixStreamletSetting\022E\n\017outpu"
  "t_settings\030\014 \003(\0132,.IalConfig.IalTaskConf"
  "ig.OutputSettingsEntry\032b\n\023OutputSettings"
  "Entry\022\013\n\003key\030\001 \001(\t\022:\n\005value\030\002 \001(\0132+.DavS"
  "treamletSetting.OutputStreamletSetting:\002"
  "8\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ialConfig_2eproto_deps[2] = {
  &::descriptor_table_appGlobalSetting_2eproto,
  &::descriptor_table_davStreamletSetting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ialConfig_2eproto_sccs[3] = {
  &scc_info_IalGlobalSetting_ialConfig_2eproto.base,
  &scc_info_IalTaskConfig_ialConfig_2eproto.base,
  &scc_info_IalTaskConfig_OutputSettingsEntry_DoNotUse_ialConfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ialConfig_2eproto_once;
static bool descriptor_table_ialConfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ialConfig_2eproto = {
  &descriptor_table_ialConfig_2eproto_initialized, descriptor_table_protodef_ialConfig_2eproto, "ialConfig.proto", 570,
  &descriptor_table_ialConfig_2eproto_once, descriptor_table_ialConfig_2eproto_sccs, descriptor_table_ialConfig_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_ialConfig_2eproto::offsets,
  file_level_metadata_ialConfig_2eproto, 3, file_level_enum_descriptors_ialConfig_2eproto, file_level_service_descriptors_ialConfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ialConfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ialConfig_2eproto), true);
namespace IalConfig {

// ===================================================================

void IalGlobalSetting::InitAsDefaultInstance() {
}
class IalGlobalSetting::_Internal {
 public:
};

IalGlobalSetting::IalGlobalSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IalConfig.IalGlobalSetting)
}
IalGlobalSetting::IalGlobalSetting(const IalGlobalSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_participants_ = from.max_participants_;
  // @@protoc_insertion_point(copy_constructor:IalConfig.IalGlobalSetting)
}

void IalGlobalSetting::SharedCtor() {
  max_participants_ = 0;
}

IalGlobalSetting::~IalGlobalSetting() {
  // @@protoc_insertion_point(destructor:IalConfig.IalGlobalSetting)
  SharedDtor();
}

void IalGlobalSetting::SharedDtor() {
}

void IalGlobalSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IalGlobalSetting& IalGlobalSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IalGlobalSetting_ialConfig_2eproto.base);
  return *internal_default_instance();
}


void IalGlobalSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:IalConfig.IalGlobalSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_participants_ = 0;
  _internal_metadata_.Clear();
}

const char* IalGlobalSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_participants = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          max_participants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IalGlobalSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IalConfig.IalGlobalSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_participants = 10;
  if (this->max_participants() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_max_participants(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IalConfig.IalGlobalSetting)
  return target;
}

size_t IalGlobalSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IalConfig.IalGlobalSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_participants = 10;
  if (this->max_participants() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_participants());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IalGlobalSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IalConfig.IalGlobalSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const IalGlobalSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IalGlobalSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IalConfig.IalGlobalSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IalConfig.IalGlobalSetting)
    MergeFrom(*source);
  }
}

void IalGlobalSetting::MergeFrom(const IalGlobalSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IalConfig.IalGlobalSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_participants() != 0) {
    _internal_set_max_participants(from._internal_max_participants());
  }
}

void IalGlobalSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IalConfig.IalGlobalSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IalGlobalSetting::CopyFrom(const IalGlobalSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IalConfig.IalGlobalSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IalGlobalSetting::IsInitialized() const {
  return true;
}

void IalGlobalSetting::InternalSwap(IalGlobalSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_participants_, other->max_participants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IalGlobalSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

IalTaskConfig_OutputSettingsEntry_DoNotUse::IalTaskConfig_OutputSettingsEntry_DoNotUse() {}
IalTaskConfig_OutputSettingsEntry_DoNotUse::IalTaskConfig_OutputSettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IalTaskConfig_OutputSettingsEntry_DoNotUse::MergeFrom(const IalTaskConfig_OutputSettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IalTaskConfig_OutputSettingsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void IalTaskConfig_OutputSettingsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void IalTaskConfig::InitAsDefaultInstance() {
  ::IalConfig::_IalTaskConfig_default_instance_._instance.get_mutable()->app_global_setting_ = const_cast< ::AppGlobalSetting::GlobalSetting*>(
      ::AppGlobalSetting::GlobalSetting::internal_default_instance());
  ::IalConfig::_IalTaskConfig_default_instance_._instance.get_mutable()->ial_global_setting_ = const_cast< ::IalConfig::IalGlobalSetting*>(
      ::IalConfig::IalGlobalSetting::internal_default_instance());
  ::IalConfig::_IalTaskConfig_default_instance_._instance.get_mutable()->input_setting_ = const_cast< ::DavStreamletSetting::InputStreamletSetting*>(
      ::DavStreamletSetting::InputStreamletSetting::internal_default_instance());
  ::IalConfig::_IalTaskConfig_default_instance_._instance.get_mutable()->mix_setting_ = const_cast< ::DavStreamletSetting::MixStreamletSetting*>(
      ::DavStreamletSetting::MixStreamletSetting::internal_default_instance());
}
class IalTaskConfig::_Internal {
 public:
  static const ::AppGlobalSetting::GlobalSetting& app_global_setting(const IalTaskConfig* msg);
  static const ::IalConfig::IalGlobalSetting& ial_global_setting(const IalTaskConfig* msg);
  static const ::DavStreamletSetting::InputStreamletSetting& input_setting(const IalTaskConfig* msg);
  static const ::DavStreamletSetting::MixStreamletSetting& mix_setting(const IalTaskConfig* msg);
};

const ::AppGlobalSetting::GlobalSetting&
IalTaskConfig::_Internal::app_global_setting(const IalTaskConfig* msg) {
  return *msg->app_global_setting_;
}
const ::IalConfig::IalGlobalSetting&
IalTaskConfig::_Internal::ial_global_setting(const IalTaskConfig* msg) {
  return *msg->ial_global_setting_;
}
const ::DavStreamletSetting::InputStreamletSetting&
IalTaskConfig::_Internal::input_setting(const IalTaskConfig* msg) {
  return *msg->input_setting_;
}
const ::DavStreamletSetting::MixStreamletSetting&
IalTaskConfig::_Internal::mix_setting(const IalTaskConfig* msg) {
  return *msg->mix_setting_;
}
void IalTaskConfig::clear_app_global_setting() {
  if (GetArenaNoVirtual() == nullptr && app_global_setting_ != nullptr) {
    delete app_global_setting_;
  }
  app_global_setting_ = nullptr;
}
void IalTaskConfig::clear_input_setting() {
  if (GetArenaNoVirtual() == nullptr && input_setting_ != nullptr) {
    delete input_setting_;
  }
  input_setting_ = nullptr;
}
void IalTaskConfig::clear_mix_setting() {
  if (GetArenaNoVirtual() == nullptr && mix_setting_ != nullptr) {
    delete mix_setting_;
  }
  mix_setting_ = nullptr;
}
void IalTaskConfig::clear_output_settings() {
  output_settings_.Clear();
}
IalTaskConfig::IalTaskConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IalConfig.IalTaskConfig)
}
IalTaskConfig::IalTaskConfig(const IalTaskConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_settings_.MergeFrom(from.output_settings_);
  if (from._internal_has_app_global_setting()) {
    app_global_setting_ = new ::AppGlobalSetting::GlobalSetting(*from.app_global_setting_);
  } else {
    app_global_setting_ = nullptr;
  }
  if (from._internal_has_ial_global_setting()) {
    ial_global_setting_ = new ::IalConfig::IalGlobalSetting(*from.ial_global_setting_);
  } else {
    ial_global_setting_ = nullptr;
  }
  if (from._internal_has_input_setting()) {
    input_setting_ = new ::DavStreamletSetting::InputStreamletSetting(*from.input_setting_);
  } else {
    input_setting_ = nullptr;
  }
  if (from._internal_has_mix_setting()) {
    mix_setting_ = new ::DavStreamletSetting::MixStreamletSetting(*from.mix_setting_);
  } else {
    mix_setting_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IalConfig.IalTaskConfig)
}

void IalTaskConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IalTaskConfig_ialConfig_2eproto.base);
  ::memset(&app_global_setting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mix_setting_) -
      reinterpret_cast<char*>(&app_global_setting_)) + sizeof(mix_setting_));
}

IalTaskConfig::~IalTaskConfig() {
  // @@protoc_insertion_point(destructor:IalConfig.IalTaskConfig)
  SharedDtor();
}

void IalTaskConfig::SharedDtor() {
  if (this != internal_default_instance()) delete app_global_setting_;
  if (this != internal_default_instance()) delete ial_global_setting_;
  if (this != internal_default_instance()) delete input_setting_;
  if (this != internal_default_instance()) delete mix_setting_;
}

void IalTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IalTaskConfig& IalTaskConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IalTaskConfig_ialConfig_2eproto.base);
  return *internal_default_instance();
}


void IalTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:IalConfig.IalTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_settings_.Clear();
  if (GetArenaNoVirtual() == nullptr && app_global_setting_ != nullptr) {
    delete app_global_setting_;
  }
  app_global_setting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ial_global_setting_ != nullptr) {
    delete ial_global_setting_;
  }
  ial_global_setting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_setting_ != nullptr) {
    delete input_setting_;
  }
  input_setting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mix_setting_ != nullptr) {
    delete mix_setting_;
  }
  mix_setting_ = nullptr;
  _internal_metadata_.Clear();
}

const char* IalTaskConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AppGlobalSetting.GlobalSetting app_global_setting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_global_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IalConfig.IalGlobalSetting ial_global_setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ial_global_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavStreamletSetting.InputStreamletSetting input_setting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavStreamletSetting.MixStreamletSetting mix_setting = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mix_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .DavStreamletSetting.OutputStreamletSetting> output_settings = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&output_settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IalTaskConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IalConfig.IalTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AppGlobalSetting.GlobalSetting app_global_setting = 1;
  if (this->has_app_global_setting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::app_global_setting(this), target, stream);
  }

  // .IalConfig.IalGlobalSetting ial_global_setting = 2;
  if (this->has_ial_global_setting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::ial_global_setting(this), target, stream);
  }

  // .DavStreamletSetting.InputStreamletSetting input_setting = 10;
  if (this->has_input_setting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::input_setting(this), target, stream);
  }

  // .DavStreamletSetting.MixStreamletSetting mix_setting = 11;
  if (this->has_mix_setting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::mix_setting(this), target, stream);
  }

  // map<string, .DavStreamletSetting.OutputStreamletSetting> output_settings = 12;
  if (!this->_internal_output_settings().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DavStreamletSetting::OutputStreamletSetting >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "IalConfig.IalTaskConfig.OutputSettingsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_output_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_output_settings().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DavStreamletSetting::OutputStreamletSetting >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DavStreamletSetting::OutputStreamletSetting >::const_iterator
          it = this->_internal_output_settings().begin();
          it != this->_internal_output_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = IalTaskConfig_OutputSettingsEntry_DoNotUse::Funcs::InternalSerialize(12, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DavStreamletSetting::OutputStreamletSetting >::const_iterator
          it = this->_internal_output_settings().begin();
          it != this->_internal_output_settings().end(); ++it) {
        target = IalTaskConfig_OutputSettingsEntry_DoNotUse::Funcs::InternalSerialize(12, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IalConfig.IalTaskConfig)
  return target;
}

size_t IalTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IalConfig.IalTaskConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .DavStreamletSetting.OutputStreamletSetting> output_settings = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_output_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DavStreamletSetting::OutputStreamletSetting >::const_iterator
      it = this->_internal_output_settings().begin();
      it != this->_internal_output_settings().end(); ++it) {
    total_size += IalTaskConfig_OutputSettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .AppGlobalSetting.GlobalSetting app_global_setting = 1;
  if (this->has_app_global_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_global_setting_);
  }

  // .IalConfig.IalGlobalSetting ial_global_setting = 2;
  if (this->has_ial_global_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ial_global_setting_);
  }

  // .DavStreamletSetting.InputStreamletSetting input_setting = 10;
  if (this->has_input_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_setting_);
  }

  // .DavStreamletSetting.MixStreamletSetting mix_setting = 11;
  if (this->has_mix_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mix_setting_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IalTaskConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IalConfig.IalTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IalTaskConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IalTaskConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IalConfig.IalTaskConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IalConfig.IalTaskConfig)
    MergeFrom(*source);
  }
}

void IalTaskConfig::MergeFrom(const IalTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IalConfig.IalTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_settings_.MergeFrom(from.output_settings_);
  if (from.has_app_global_setting()) {
    _internal_mutable_app_global_setting()->::AppGlobalSetting::GlobalSetting::MergeFrom(from._internal_app_global_setting());
  }
  if (from.has_ial_global_setting()) {
    _internal_mutable_ial_global_setting()->::IalConfig::IalGlobalSetting::MergeFrom(from._internal_ial_global_setting());
  }
  if (from.has_input_setting()) {
    _internal_mutable_input_setting()->::DavStreamletSetting::InputStreamletSetting::MergeFrom(from._internal_input_setting());
  }
  if (from.has_mix_setting()) {
    _internal_mutable_mix_setting()->::DavStreamletSetting::MixStreamletSetting::MergeFrom(from._internal_mix_setting());
  }
}

void IalTaskConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IalConfig.IalTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IalTaskConfig::CopyFrom(const IalTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IalConfig.IalTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IalTaskConfig::IsInitialized() const {
  return true;
}

void IalTaskConfig::InternalSwap(IalTaskConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  output_settings_.Swap(&other->output_settings_);
  swap(app_global_setting_, other->app_global_setting_);
  swap(ial_global_setting_, other->ial_global_setting_);
  swap(input_setting_, other->input_setting_);
  swap(mix_setting_, other->mix_setting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IalTaskConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IalConfig
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IalConfig::IalGlobalSetting* Arena::CreateMaybeMessage< ::IalConfig::IalGlobalSetting >(Arena* arena) {
  return Arena::CreateInternal< ::IalConfig::IalGlobalSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::IalConfig::IalTaskConfig_OutputSettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::IalConfig::IalTaskConfig* Arena::CreateMaybeMessage< ::IalConfig::IalTaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::IalConfig::IalTaskConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
