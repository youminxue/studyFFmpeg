// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: davStreamletSetting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_davStreamletSetting_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_davStreamletSetting_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "davWaveSetting.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_davStreamletSetting_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_davStreamletSetting_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_davStreamletSetting_2eproto;
namespace DavStreamletSetting {
class InputStreamletSetting;
class InputStreamletSettingDefaultTypeInternal;
extern InputStreamletSettingDefaultTypeInternal _InputStreamletSetting_default_instance_;
class MixStreamletSetting;
class MixStreamletSettingDefaultTypeInternal;
extern MixStreamletSettingDefaultTypeInternal _MixStreamletSetting_default_instance_;
class OutputStreamletSetting;
class OutputStreamletSettingDefaultTypeInternal;
extern OutputStreamletSettingDefaultTypeInternal _OutputStreamletSetting_default_instance_;
}  // namespace DavStreamletSetting
PROTOBUF_NAMESPACE_OPEN
template<> ::DavStreamletSetting::InputStreamletSetting* Arena::CreateMaybeMessage<::DavStreamletSetting::InputStreamletSetting>(Arena*);
template<> ::DavStreamletSetting::MixStreamletSetting* Arena::CreateMaybeMessage<::DavStreamletSetting::MixStreamletSetting>(Arena*);
template<> ::DavStreamletSetting::OutputStreamletSetting* Arena::CreateMaybeMessage<::DavStreamletSetting::OutputStreamletSetting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DavStreamletSetting {

// ===================================================================

class InputStreamletSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavStreamletSetting.InputStreamletSetting) */ {
 public:
  InputStreamletSetting();
  virtual ~InputStreamletSetting();

  InputStreamletSetting(const InputStreamletSetting& from);
  InputStreamletSetting(InputStreamletSetting&& from) noexcept
    : InputStreamletSetting() {
    *this = ::std::move(from);
  }

  inline InputStreamletSetting& operator=(const InputStreamletSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputStreamletSetting& operator=(InputStreamletSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputStreamletSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputStreamletSetting* internal_default_instance() {
    return reinterpret_cast<const InputStreamletSetting*>(
               &_InputStreamletSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputStreamletSetting& a, InputStreamletSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(InputStreamletSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputStreamletSetting* New() const final {
    return CreateMaybeMessage<InputStreamletSetting>(nullptr);
  }

  InputStreamletSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputStreamletSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputStreamletSetting& from);
  void MergeFrom(const InputStreamletSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputStreamletSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavStreamletSetting.InputStreamletSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davStreamletSetting_2eproto);
    return ::descriptor_table_davStreamletSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDemuxFieldNumber = 1,
    kPostDecodeVideoFilterFieldNumber = 2,
    kPostDecodeAudioFilterFieldNumber = 3,
    kVideoDecodeFieldNumber = 4,
    kAudioDecodeFieldNumber = 5,
  };
  // .DavWaveSetting.DemuxSetting demux = 1;
  bool has_demux() const;
  private:
  bool _internal_has_demux() const;
  public:
  void clear_demux();
  const ::DavWaveSetting::DemuxSetting& demux() const;
  ::DavWaveSetting::DemuxSetting* release_demux();
  ::DavWaveSetting::DemuxSetting* mutable_demux();
  void set_allocated_demux(::DavWaveSetting::DemuxSetting* demux);
  private:
  const ::DavWaveSetting::DemuxSetting& _internal_demux() const;
  ::DavWaveSetting::DemuxSetting* _internal_mutable_demux();
  public:

  // .DavWaveSetting.VideoFilterSetting post_decode_video_filter = 2;
  bool has_post_decode_video_filter() const;
  private:
  bool _internal_has_post_decode_video_filter() const;
  public:
  void clear_post_decode_video_filter();
  const ::DavWaveSetting::VideoFilterSetting& post_decode_video_filter() const;
  ::DavWaveSetting::VideoFilterSetting* release_post_decode_video_filter();
  ::DavWaveSetting::VideoFilterSetting* mutable_post_decode_video_filter();
  void set_allocated_post_decode_video_filter(::DavWaveSetting::VideoFilterSetting* post_decode_video_filter);
  private:
  const ::DavWaveSetting::VideoFilterSetting& _internal_post_decode_video_filter() const;
  ::DavWaveSetting::VideoFilterSetting* _internal_mutable_post_decode_video_filter();
  public:

  // .DavWaveSetting.AudioFilterSetting post_decode_audio_filter = 3;
  bool has_post_decode_audio_filter() const;
  private:
  bool _internal_has_post_decode_audio_filter() const;
  public:
  void clear_post_decode_audio_filter();
  const ::DavWaveSetting::AudioFilterSetting& post_decode_audio_filter() const;
  ::DavWaveSetting::AudioFilterSetting* release_post_decode_audio_filter();
  ::DavWaveSetting::AudioFilterSetting* mutable_post_decode_audio_filter();
  void set_allocated_post_decode_audio_filter(::DavWaveSetting::AudioFilterSetting* post_decode_audio_filter);
  private:
  const ::DavWaveSetting::AudioFilterSetting& _internal_post_decode_audio_filter() const;
  ::DavWaveSetting::AudioFilterSetting* _internal_mutable_post_decode_audio_filter();
  public:

  // .DavWaveSetting.VideoDecodeSetting video_decode = 4;
  bool has_video_decode() const;
  private:
  bool _internal_has_video_decode() const;
  public:
  void clear_video_decode();
  const ::DavWaveSetting::VideoDecodeSetting& video_decode() const;
  ::DavWaveSetting::VideoDecodeSetting* release_video_decode();
  ::DavWaveSetting::VideoDecodeSetting* mutable_video_decode();
  void set_allocated_video_decode(::DavWaveSetting::VideoDecodeSetting* video_decode);
  private:
  const ::DavWaveSetting::VideoDecodeSetting& _internal_video_decode() const;
  ::DavWaveSetting::VideoDecodeSetting* _internal_mutable_video_decode();
  public:

  // .DavWaveSetting.AudioDecodeSetting audio_decode = 5;
  bool has_audio_decode() const;
  private:
  bool _internal_has_audio_decode() const;
  public:
  void clear_audio_decode();
  const ::DavWaveSetting::AudioDecodeSetting& audio_decode() const;
  ::DavWaveSetting::AudioDecodeSetting* release_audio_decode();
  ::DavWaveSetting::AudioDecodeSetting* mutable_audio_decode();
  void set_allocated_audio_decode(::DavWaveSetting::AudioDecodeSetting* audio_decode);
  private:
  const ::DavWaveSetting::AudioDecodeSetting& _internal_audio_decode() const;
  ::DavWaveSetting::AudioDecodeSetting* _internal_mutable_audio_decode();
  public:

  // @@protoc_insertion_point(class_scope:DavStreamletSetting.InputStreamletSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DavWaveSetting::DemuxSetting* demux_;
  ::DavWaveSetting::VideoFilterSetting* post_decode_video_filter_;
  ::DavWaveSetting::AudioFilterSetting* post_decode_audio_filter_;
  ::DavWaveSetting::VideoDecodeSetting* video_decode_;
  ::DavWaveSetting::AudioDecodeSetting* audio_decode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davStreamletSetting_2eproto;
};
// -------------------------------------------------------------------

class MixStreamletSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavStreamletSetting.MixStreamletSetting) */ {
 public:
  MixStreamletSetting();
  virtual ~MixStreamletSetting();

  MixStreamletSetting(const MixStreamletSetting& from);
  MixStreamletSetting(MixStreamletSetting&& from) noexcept
    : MixStreamletSetting() {
    *this = ::std::move(from);
  }

  inline MixStreamletSetting& operator=(const MixStreamletSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixStreamletSetting& operator=(MixStreamletSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MixStreamletSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MixStreamletSetting* internal_default_instance() {
    return reinterpret_cast<const MixStreamletSetting*>(
               &_MixStreamletSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MixStreamletSetting& a, MixStreamletSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(MixStreamletSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixStreamletSetting* New() const final {
    return CreateMaybeMessage<MixStreamletSetting>(nullptr);
  }

  MixStreamletSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixStreamletSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MixStreamletSetting& from);
  void MergeFrom(const MixStreamletSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixStreamletSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavStreamletSetting.MixStreamletSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davStreamletSetting_2eproto);
    return ::descriptor_table_davStreamletSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoMixFieldNumber = 1,
    kAudioMixFieldNumber = 2,
    kPostMixVideoFilterFieldNumber = 3,
    kPostMixAudioFilterFieldNumber = 4,
  };
  // .DavWaveSetting.VideoMixSetting video_mix = 1;
  bool has_video_mix() const;
  private:
  bool _internal_has_video_mix() const;
  public:
  void clear_video_mix();
  const ::DavWaveSetting::VideoMixSetting& video_mix() const;
  ::DavWaveSetting::VideoMixSetting* release_video_mix();
  ::DavWaveSetting::VideoMixSetting* mutable_video_mix();
  void set_allocated_video_mix(::DavWaveSetting::VideoMixSetting* video_mix);
  private:
  const ::DavWaveSetting::VideoMixSetting& _internal_video_mix() const;
  ::DavWaveSetting::VideoMixSetting* _internal_mutable_video_mix();
  public:

  // .DavWaveSetting.AudioMixSetting audio_mix = 2;
  bool has_audio_mix() const;
  private:
  bool _internal_has_audio_mix() const;
  public:
  void clear_audio_mix();
  const ::DavWaveSetting::AudioMixSetting& audio_mix() const;
  ::DavWaveSetting::AudioMixSetting* release_audio_mix();
  ::DavWaveSetting::AudioMixSetting* mutable_audio_mix();
  void set_allocated_audio_mix(::DavWaveSetting::AudioMixSetting* audio_mix);
  private:
  const ::DavWaveSetting::AudioMixSetting& _internal_audio_mix() const;
  ::DavWaveSetting::AudioMixSetting* _internal_mutable_audio_mix();
  public:

  // .DavWaveSetting.VideoFilterSetting post_mix_video_filter = 3;
  bool has_post_mix_video_filter() const;
  private:
  bool _internal_has_post_mix_video_filter() const;
  public:
  void clear_post_mix_video_filter();
  const ::DavWaveSetting::VideoFilterSetting& post_mix_video_filter() const;
  ::DavWaveSetting::VideoFilterSetting* release_post_mix_video_filter();
  ::DavWaveSetting::VideoFilterSetting* mutable_post_mix_video_filter();
  void set_allocated_post_mix_video_filter(::DavWaveSetting::VideoFilterSetting* post_mix_video_filter);
  private:
  const ::DavWaveSetting::VideoFilterSetting& _internal_post_mix_video_filter() const;
  ::DavWaveSetting::VideoFilterSetting* _internal_mutable_post_mix_video_filter();
  public:

  // .DavWaveSetting.AudioFilterSetting post_mix_audio_filter = 4;
  bool has_post_mix_audio_filter() const;
  private:
  bool _internal_has_post_mix_audio_filter() const;
  public:
  void clear_post_mix_audio_filter();
  const ::DavWaveSetting::AudioFilterSetting& post_mix_audio_filter() const;
  ::DavWaveSetting::AudioFilterSetting* release_post_mix_audio_filter();
  ::DavWaveSetting::AudioFilterSetting* mutable_post_mix_audio_filter();
  void set_allocated_post_mix_audio_filter(::DavWaveSetting::AudioFilterSetting* post_mix_audio_filter);
  private:
  const ::DavWaveSetting::AudioFilterSetting& _internal_post_mix_audio_filter() const;
  ::DavWaveSetting::AudioFilterSetting* _internal_mutable_post_mix_audio_filter();
  public:

  // @@protoc_insertion_point(class_scope:DavStreamletSetting.MixStreamletSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DavWaveSetting::VideoMixSetting* video_mix_;
  ::DavWaveSetting::AudioMixSetting* audio_mix_;
  ::DavWaveSetting::VideoFilterSetting* post_mix_video_filter_;
  ::DavWaveSetting::AudioFilterSetting* post_mix_audio_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davStreamletSetting_2eproto;
};
// -------------------------------------------------------------------

class OutputStreamletSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavStreamletSetting.OutputStreamletSetting) */ {
 public:
  OutputStreamletSetting();
  virtual ~OutputStreamletSetting();

  OutputStreamletSetting(const OutputStreamletSetting& from);
  OutputStreamletSetting(OutputStreamletSetting&& from) noexcept
    : OutputStreamletSetting() {
    *this = ::std::move(from);
  }

  inline OutputStreamletSetting& operator=(const OutputStreamletSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputStreamletSetting& operator=(OutputStreamletSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputStreamletSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputStreamletSetting* internal_default_instance() {
    return reinterpret_cast<const OutputStreamletSetting*>(
               &_OutputStreamletSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OutputStreamletSetting& a, OutputStreamletSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputStreamletSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputStreamletSetting* New() const final {
    return CreateMaybeMessage<OutputStreamletSetting>(nullptr);
  }

  OutputStreamletSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputStreamletSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputStreamletSetting& from);
  void MergeFrom(const OutputStreamletSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputStreamletSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavStreamletSetting.OutputStreamletSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davStreamletSetting_2eproto);
    return ::descriptor_table_davStreamletSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMuxOutputsFieldNumber = 5,
    kVideoEncodeFieldNumber = 1,
    kAudioEncodeFieldNumber = 2,
    kPreEncodeVideoFilterFieldNumber = 3,
    kPreEncodeAudioFilterFieldNumber = 4,
  };
  // repeated .DavWaveSetting.MuxSetting mux_outputs = 5;
  int mux_outputs_size() const;
  private:
  int _internal_mux_outputs_size() const;
  public:
  void clear_mux_outputs();
  ::DavWaveSetting::MuxSetting* mutable_mux_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::MuxSetting >*
      mutable_mux_outputs();
  private:
  const ::DavWaveSetting::MuxSetting& _internal_mux_outputs(int index) const;
  ::DavWaveSetting::MuxSetting* _internal_add_mux_outputs();
  public:
  const ::DavWaveSetting::MuxSetting& mux_outputs(int index) const;
  ::DavWaveSetting::MuxSetting* add_mux_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::MuxSetting >&
      mux_outputs() const;

  // .DavWaveSetting.VideoEncodeSetting video_encode = 1;
  bool has_video_encode() const;
  private:
  bool _internal_has_video_encode() const;
  public:
  void clear_video_encode();
  const ::DavWaveSetting::VideoEncodeSetting& video_encode() const;
  ::DavWaveSetting::VideoEncodeSetting* release_video_encode();
  ::DavWaveSetting::VideoEncodeSetting* mutable_video_encode();
  void set_allocated_video_encode(::DavWaveSetting::VideoEncodeSetting* video_encode);
  private:
  const ::DavWaveSetting::VideoEncodeSetting& _internal_video_encode() const;
  ::DavWaveSetting::VideoEncodeSetting* _internal_mutable_video_encode();
  public:

  // .DavWaveSetting.AudioEncodeSetting audio_encode = 2;
  bool has_audio_encode() const;
  private:
  bool _internal_has_audio_encode() const;
  public:
  void clear_audio_encode();
  const ::DavWaveSetting::AudioEncodeSetting& audio_encode() const;
  ::DavWaveSetting::AudioEncodeSetting* release_audio_encode();
  ::DavWaveSetting::AudioEncodeSetting* mutable_audio_encode();
  void set_allocated_audio_encode(::DavWaveSetting::AudioEncodeSetting* audio_encode);
  private:
  const ::DavWaveSetting::AudioEncodeSetting& _internal_audio_encode() const;
  ::DavWaveSetting::AudioEncodeSetting* _internal_mutable_audio_encode();
  public:

  // .DavWaveSetting.VideoFilterSetting pre_encode_video_filter = 3;
  bool has_pre_encode_video_filter() const;
  private:
  bool _internal_has_pre_encode_video_filter() const;
  public:
  void clear_pre_encode_video_filter();
  const ::DavWaveSetting::VideoFilterSetting& pre_encode_video_filter() const;
  ::DavWaveSetting::VideoFilterSetting* release_pre_encode_video_filter();
  ::DavWaveSetting::VideoFilterSetting* mutable_pre_encode_video_filter();
  void set_allocated_pre_encode_video_filter(::DavWaveSetting::VideoFilterSetting* pre_encode_video_filter);
  private:
  const ::DavWaveSetting::VideoFilterSetting& _internal_pre_encode_video_filter() const;
  ::DavWaveSetting::VideoFilterSetting* _internal_mutable_pre_encode_video_filter();
  public:

  // .DavWaveSetting.AudioFilterSetting pre_encode_audio_filter = 4;
  bool has_pre_encode_audio_filter() const;
  private:
  bool _internal_has_pre_encode_audio_filter() const;
  public:
  void clear_pre_encode_audio_filter();
  const ::DavWaveSetting::AudioFilterSetting& pre_encode_audio_filter() const;
  ::DavWaveSetting::AudioFilterSetting* release_pre_encode_audio_filter();
  ::DavWaveSetting::AudioFilterSetting* mutable_pre_encode_audio_filter();
  void set_allocated_pre_encode_audio_filter(::DavWaveSetting::AudioFilterSetting* pre_encode_audio_filter);
  private:
  const ::DavWaveSetting::AudioFilterSetting& _internal_pre_encode_audio_filter() const;
  ::DavWaveSetting::AudioFilterSetting* _internal_mutable_pre_encode_audio_filter();
  public:

  // @@protoc_insertion_point(class_scope:DavStreamletSetting.OutputStreamletSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::MuxSetting > mux_outputs_;
  ::DavWaveSetting::VideoEncodeSetting* video_encode_;
  ::DavWaveSetting::AudioEncodeSetting* audio_encode_;
  ::DavWaveSetting::VideoFilterSetting* pre_encode_video_filter_;
  ::DavWaveSetting::AudioFilterSetting* pre_encode_audio_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davStreamletSetting_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputStreamletSetting

// .DavWaveSetting.DemuxSetting demux = 1;
inline bool InputStreamletSetting::_internal_has_demux() const {
  return this != internal_default_instance() && demux_ != nullptr;
}
inline bool InputStreamletSetting::has_demux() const {
  return _internal_has_demux();
}
inline const ::DavWaveSetting::DemuxSetting& InputStreamletSetting::_internal_demux() const {
  const ::DavWaveSetting::DemuxSetting* p = demux_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::DemuxSetting*>(
      &::DavWaveSetting::_DemuxSetting_default_instance_);
}
inline const ::DavWaveSetting::DemuxSetting& InputStreamletSetting::demux() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.InputStreamletSetting.demux)
  return _internal_demux();
}
inline ::DavWaveSetting::DemuxSetting* InputStreamletSetting::release_demux() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.InputStreamletSetting.demux)
  
  ::DavWaveSetting::DemuxSetting* temp = demux_;
  demux_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::DemuxSetting* InputStreamletSetting::_internal_mutable_demux() {
  
  if (demux_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::DemuxSetting>(GetArenaNoVirtual());
    demux_ = p;
  }
  return demux_;
}
inline ::DavWaveSetting::DemuxSetting* InputStreamletSetting::mutable_demux() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.InputStreamletSetting.demux)
  return _internal_mutable_demux();
}
inline void InputStreamletSetting::set_allocated_demux(::DavWaveSetting::DemuxSetting* demux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(demux_);
  }
  if (demux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      demux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demux, submessage_arena);
    }
    
  } else {
    
  }
  demux_ = demux;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.InputStreamletSetting.demux)
}

// .DavWaveSetting.VideoFilterSetting post_decode_video_filter = 2;
inline bool InputStreamletSetting::_internal_has_post_decode_video_filter() const {
  return this != internal_default_instance() && post_decode_video_filter_ != nullptr;
}
inline bool InputStreamletSetting::has_post_decode_video_filter() const {
  return _internal_has_post_decode_video_filter();
}
inline const ::DavWaveSetting::VideoFilterSetting& InputStreamletSetting::_internal_post_decode_video_filter() const {
  const ::DavWaveSetting::VideoFilterSetting* p = post_decode_video_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::VideoFilterSetting*>(
      &::DavWaveSetting::_VideoFilterSetting_default_instance_);
}
inline const ::DavWaveSetting::VideoFilterSetting& InputStreamletSetting::post_decode_video_filter() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.InputStreamletSetting.post_decode_video_filter)
  return _internal_post_decode_video_filter();
}
inline ::DavWaveSetting::VideoFilterSetting* InputStreamletSetting::release_post_decode_video_filter() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.InputStreamletSetting.post_decode_video_filter)
  
  ::DavWaveSetting::VideoFilterSetting* temp = post_decode_video_filter_;
  post_decode_video_filter_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::VideoFilterSetting* InputStreamletSetting::_internal_mutable_post_decode_video_filter() {
  
  if (post_decode_video_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::VideoFilterSetting>(GetArenaNoVirtual());
    post_decode_video_filter_ = p;
  }
  return post_decode_video_filter_;
}
inline ::DavWaveSetting::VideoFilterSetting* InputStreamletSetting::mutable_post_decode_video_filter() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.InputStreamletSetting.post_decode_video_filter)
  return _internal_mutable_post_decode_video_filter();
}
inline void InputStreamletSetting::set_allocated_post_decode_video_filter(::DavWaveSetting::VideoFilterSetting* post_decode_video_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_decode_video_filter_);
  }
  if (post_decode_video_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_decode_video_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_decode_video_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_decode_video_filter_ = post_decode_video_filter;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.InputStreamletSetting.post_decode_video_filter)
}

// .DavWaveSetting.AudioFilterSetting post_decode_audio_filter = 3;
inline bool InputStreamletSetting::_internal_has_post_decode_audio_filter() const {
  return this != internal_default_instance() && post_decode_audio_filter_ != nullptr;
}
inline bool InputStreamletSetting::has_post_decode_audio_filter() const {
  return _internal_has_post_decode_audio_filter();
}
inline const ::DavWaveSetting::AudioFilterSetting& InputStreamletSetting::_internal_post_decode_audio_filter() const {
  const ::DavWaveSetting::AudioFilterSetting* p = post_decode_audio_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::AudioFilterSetting*>(
      &::DavWaveSetting::_AudioFilterSetting_default_instance_);
}
inline const ::DavWaveSetting::AudioFilterSetting& InputStreamletSetting::post_decode_audio_filter() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.InputStreamletSetting.post_decode_audio_filter)
  return _internal_post_decode_audio_filter();
}
inline ::DavWaveSetting::AudioFilterSetting* InputStreamletSetting::release_post_decode_audio_filter() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.InputStreamletSetting.post_decode_audio_filter)
  
  ::DavWaveSetting::AudioFilterSetting* temp = post_decode_audio_filter_;
  post_decode_audio_filter_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::AudioFilterSetting* InputStreamletSetting::_internal_mutable_post_decode_audio_filter() {
  
  if (post_decode_audio_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::AudioFilterSetting>(GetArenaNoVirtual());
    post_decode_audio_filter_ = p;
  }
  return post_decode_audio_filter_;
}
inline ::DavWaveSetting::AudioFilterSetting* InputStreamletSetting::mutable_post_decode_audio_filter() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.InputStreamletSetting.post_decode_audio_filter)
  return _internal_mutable_post_decode_audio_filter();
}
inline void InputStreamletSetting::set_allocated_post_decode_audio_filter(::DavWaveSetting::AudioFilterSetting* post_decode_audio_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_decode_audio_filter_);
  }
  if (post_decode_audio_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_decode_audio_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_decode_audio_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_decode_audio_filter_ = post_decode_audio_filter;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.InputStreamletSetting.post_decode_audio_filter)
}

// .DavWaveSetting.VideoDecodeSetting video_decode = 4;
inline bool InputStreamletSetting::_internal_has_video_decode() const {
  return this != internal_default_instance() && video_decode_ != nullptr;
}
inline bool InputStreamletSetting::has_video_decode() const {
  return _internal_has_video_decode();
}
inline const ::DavWaveSetting::VideoDecodeSetting& InputStreamletSetting::_internal_video_decode() const {
  const ::DavWaveSetting::VideoDecodeSetting* p = video_decode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::VideoDecodeSetting*>(
      &::DavWaveSetting::_VideoDecodeSetting_default_instance_);
}
inline const ::DavWaveSetting::VideoDecodeSetting& InputStreamletSetting::video_decode() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.InputStreamletSetting.video_decode)
  return _internal_video_decode();
}
inline ::DavWaveSetting::VideoDecodeSetting* InputStreamletSetting::release_video_decode() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.InputStreamletSetting.video_decode)
  
  ::DavWaveSetting::VideoDecodeSetting* temp = video_decode_;
  video_decode_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::VideoDecodeSetting* InputStreamletSetting::_internal_mutable_video_decode() {
  
  if (video_decode_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::VideoDecodeSetting>(GetArenaNoVirtual());
    video_decode_ = p;
  }
  return video_decode_;
}
inline ::DavWaveSetting::VideoDecodeSetting* InputStreamletSetting::mutable_video_decode() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.InputStreamletSetting.video_decode)
  return _internal_mutable_video_decode();
}
inline void InputStreamletSetting::set_allocated_video_decode(::DavWaveSetting::VideoDecodeSetting* video_decode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_decode_);
  }
  if (video_decode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video_decode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_decode, submessage_arena);
    }
    
  } else {
    
  }
  video_decode_ = video_decode;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.InputStreamletSetting.video_decode)
}

// .DavWaveSetting.AudioDecodeSetting audio_decode = 5;
inline bool InputStreamletSetting::_internal_has_audio_decode() const {
  return this != internal_default_instance() && audio_decode_ != nullptr;
}
inline bool InputStreamletSetting::has_audio_decode() const {
  return _internal_has_audio_decode();
}
inline const ::DavWaveSetting::AudioDecodeSetting& InputStreamletSetting::_internal_audio_decode() const {
  const ::DavWaveSetting::AudioDecodeSetting* p = audio_decode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::AudioDecodeSetting*>(
      &::DavWaveSetting::_AudioDecodeSetting_default_instance_);
}
inline const ::DavWaveSetting::AudioDecodeSetting& InputStreamletSetting::audio_decode() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.InputStreamletSetting.audio_decode)
  return _internal_audio_decode();
}
inline ::DavWaveSetting::AudioDecodeSetting* InputStreamletSetting::release_audio_decode() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.InputStreamletSetting.audio_decode)
  
  ::DavWaveSetting::AudioDecodeSetting* temp = audio_decode_;
  audio_decode_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::AudioDecodeSetting* InputStreamletSetting::_internal_mutable_audio_decode() {
  
  if (audio_decode_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::AudioDecodeSetting>(GetArenaNoVirtual());
    audio_decode_ = p;
  }
  return audio_decode_;
}
inline ::DavWaveSetting::AudioDecodeSetting* InputStreamletSetting::mutable_audio_decode() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.InputStreamletSetting.audio_decode)
  return _internal_mutable_audio_decode();
}
inline void InputStreamletSetting::set_allocated_audio_decode(::DavWaveSetting::AudioDecodeSetting* audio_decode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_decode_);
  }
  if (audio_decode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio_decode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_decode, submessage_arena);
    }
    
  } else {
    
  }
  audio_decode_ = audio_decode;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.InputStreamletSetting.audio_decode)
}

// -------------------------------------------------------------------

// MixStreamletSetting

// .DavWaveSetting.VideoMixSetting video_mix = 1;
inline bool MixStreamletSetting::_internal_has_video_mix() const {
  return this != internal_default_instance() && video_mix_ != nullptr;
}
inline bool MixStreamletSetting::has_video_mix() const {
  return _internal_has_video_mix();
}
inline const ::DavWaveSetting::VideoMixSetting& MixStreamletSetting::_internal_video_mix() const {
  const ::DavWaveSetting::VideoMixSetting* p = video_mix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::VideoMixSetting*>(
      &::DavWaveSetting::_VideoMixSetting_default_instance_);
}
inline const ::DavWaveSetting::VideoMixSetting& MixStreamletSetting::video_mix() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.MixStreamletSetting.video_mix)
  return _internal_video_mix();
}
inline ::DavWaveSetting::VideoMixSetting* MixStreamletSetting::release_video_mix() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.MixStreamletSetting.video_mix)
  
  ::DavWaveSetting::VideoMixSetting* temp = video_mix_;
  video_mix_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::VideoMixSetting* MixStreamletSetting::_internal_mutable_video_mix() {
  
  if (video_mix_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::VideoMixSetting>(GetArenaNoVirtual());
    video_mix_ = p;
  }
  return video_mix_;
}
inline ::DavWaveSetting::VideoMixSetting* MixStreamletSetting::mutable_video_mix() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.MixStreamletSetting.video_mix)
  return _internal_mutable_video_mix();
}
inline void MixStreamletSetting::set_allocated_video_mix(::DavWaveSetting::VideoMixSetting* video_mix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_mix_);
  }
  if (video_mix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video_mix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_mix, submessage_arena);
    }
    
  } else {
    
  }
  video_mix_ = video_mix;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.MixStreamletSetting.video_mix)
}

// .DavWaveSetting.AudioMixSetting audio_mix = 2;
inline bool MixStreamletSetting::_internal_has_audio_mix() const {
  return this != internal_default_instance() && audio_mix_ != nullptr;
}
inline bool MixStreamletSetting::has_audio_mix() const {
  return _internal_has_audio_mix();
}
inline const ::DavWaveSetting::AudioMixSetting& MixStreamletSetting::_internal_audio_mix() const {
  const ::DavWaveSetting::AudioMixSetting* p = audio_mix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::AudioMixSetting*>(
      &::DavWaveSetting::_AudioMixSetting_default_instance_);
}
inline const ::DavWaveSetting::AudioMixSetting& MixStreamletSetting::audio_mix() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.MixStreamletSetting.audio_mix)
  return _internal_audio_mix();
}
inline ::DavWaveSetting::AudioMixSetting* MixStreamletSetting::release_audio_mix() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.MixStreamletSetting.audio_mix)
  
  ::DavWaveSetting::AudioMixSetting* temp = audio_mix_;
  audio_mix_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::AudioMixSetting* MixStreamletSetting::_internal_mutable_audio_mix() {
  
  if (audio_mix_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::AudioMixSetting>(GetArenaNoVirtual());
    audio_mix_ = p;
  }
  return audio_mix_;
}
inline ::DavWaveSetting::AudioMixSetting* MixStreamletSetting::mutable_audio_mix() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.MixStreamletSetting.audio_mix)
  return _internal_mutable_audio_mix();
}
inline void MixStreamletSetting::set_allocated_audio_mix(::DavWaveSetting::AudioMixSetting* audio_mix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_mix_);
  }
  if (audio_mix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio_mix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_mix, submessage_arena);
    }
    
  } else {
    
  }
  audio_mix_ = audio_mix;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.MixStreamletSetting.audio_mix)
}

// .DavWaveSetting.VideoFilterSetting post_mix_video_filter = 3;
inline bool MixStreamletSetting::_internal_has_post_mix_video_filter() const {
  return this != internal_default_instance() && post_mix_video_filter_ != nullptr;
}
inline bool MixStreamletSetting::has_post_mix_video_filter() const {
  return _internal_has_post_mix_video_filter();
}
inline const ::DavWaveSetting::VideoFilterSetting& MixStreamletSetting::_internal_post_mix_video_filter() const {
  const ::DavWaveSetting::VideoFilterSetting* p = post_mix_video_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::VideoFilterSetting*>(
      &::DavWaveSetting::_VideoFilterSetting_default_instance_);
}
inline const ::DavWaveSetting::VideoFilterSetting& MixStreamletSetting::post_mix_video_filter() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.MixStreamletSetting.post_mix_video_filter)
  return _internal_post_mix_video_filter();
}
inline ::DavWaveSetting::VideoFilterSetting* MixStreamletSetting::release_post_mix_video_filter() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.MixStreamletSetting.post_mix_video_filter)
  
  ::DavWaveSetting::VideoFilterSetting* temp = post_mix_video_filter_;
  post_mix_video_filter_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::VideoFilterSetting* MixStreamletSetting::_internal_mutable_post_mix_video_filter() {
  
  if (post_mix_video_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::VideoFilterSetting>(GetArenaNoVirtual());
    post_mix_video_filter_ = p;
  }
  return post_mix_video_filter_;
}
inline ::DavWaveSetting::VideoFilterSetting* MixStreamletSetting::mutable_post_mix_video_filter() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.MixStreamletSetting.post_mix_video_filter)
  return _internal_mutable_post_mix_video_filter();
}
inline void MixStreamletSetting::set_allocated_post_mix_video_filter(::DavWaveSetting::VideoFilterSetting* post_mix_video_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_mix_video_filter_);
  }
  if (post_mix_video_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_mix_video_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_mix_video_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_mix_video_filter_ = post_mix_video_filter;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.MixStreamletSetting.post_mix_video_filter)
}

// .DavWaveSetting.AudioFilterSetting post_mix_audio_filter = 4;
inline bool MixStreamletSetting::_internal_has_post_mix_audio_filter() const {
  return this != internal_default_instance() && post_mix_audio_filter_ != nullptr;
}
inline bool MixStreamletSetting::has_post_mix_audio_filter() const {
  return _internal_has_post_mix_audio_filter();
}
inline const ::DavWaveSetting::AudioFilterSetting& MixStreamletSetting::_internal_post_mix_audio_filter() const {
  const ::DavWaveSetting::AudioFilterSetting* p = post_mix_audio_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::AudioFilterSetting*>(
      &::DavWaveSetting::_AudioFilterSetting_default_instance_);
}
inline const ::DavWaveSetting::AudioFilterSetting& MixStreamletSetting::post_mix_audio_filter() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.MixStreamletSetting.post_mix_audio_filter)
  return _internal_post_mix_audio_filter();
}
inline ::DavWaveSetting::AudioFilterSetting* MixStreamletSetting::release_post_mix_audio_filter() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.MixStreamletSetting.post_mix_audio_filter)
  
  ::DavWaveSetting::AudioFilterSetting* temp = post_mix_audio_filter_;
  post_mix_audio_filter_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::AudioFilterSetting* MixStreamletSetting::_internal_mutable_post_mix_audio_filter() {
  
  if (post_mix_audio_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::AudioFilterSetting>(GetArenaNoVirtual());
    post_mix_audio_filter_ = p;
  }
  return post_mix_audio_filter_;
}
inline ::DavWaveSetting::AudioFilterSetting* MixStreamletSetting::mutable_post_mix_audio_filter() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.MixStreamletSetting.post_mix_audio_filter)
  return _internal_mutable_post_mix_audio_filter();
}
inline void MixStreamletSetting::set_allocated_post_mix_audio_filter(::DavWaveSetting::AudioFilterSetting* post_mix_audio_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_mix_audio_filter_);
  }
  if (post_mix_audio_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_mix_audio_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_mix_audio_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_mix_audio_filter_ = post_mix_audio_filter;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.MixStreamletSetting.post_mix_audio_filter)
}

// -------------------------------------------------------------------

// OutputStreamletSetting

// .DavWaveSetting.VideoEncodeSetting video_encode = 1;
inline bool OutputStreamletSetting::_internal_has_video_encode() const {
  return this != internal_default_instance() && video_encode_ != nullptr;
}
inline bool OutputStreamletSetting::has_video_encode() const {
  return _internal_has_video_encode();
}
inline const ::DavWaveSetting::VideoEncodeSetting& OutputStreamletSetting::_internal_video_encode() const {
  const ::DavWaveSetting::VideoEncodeSetting* p = video_encode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::VideoEncodeSetting*>(
      &::DavWaveSetting::_VideoEncodeSetting_default_instance_);
}
inline const ::DavWaveSetting::VideoEncodeSetting& OutputStreamletSetting::video_encode() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.OutputStreamletSetting.video_encode)
  return _internal_video_encode();
}
inline ::DavWaveSetting::VideoEncodeSetting* OutputStreamletSetting::release_video_encode() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.OutputStreamletSetting.video_encode)
  
  ::DavWaveSetting::VideoEncodeSetting* temp = video_encode_;
  video_encode_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::VideoEncodeSetting* OutputStreamletSetting::_internal_mutable_video_encode() {
  
  if (video_encode_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::VideoEncodeSetting>(GetArenaNoVirtual());
    video_encode_ = p;
  }
  return video_encode_;
}
inline ::DavWaveSetting::VideoEncodeSetting* OutputStreamletSetting::mutable_video_encode() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.OutputStreamletSetting.video_encode)
  return _internal_mutable_video_encode();
}
inline void OutputStreamletSetting::set_allocated_video_encode(::DavWaveSetting::VideoEncodeSetting* video_encode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_encode_);
  }
  if (video_encode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video_encode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_encode, submessage_arena);
    }
    
  } else {
    
  }
  video_encode_ = video_encode;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.OutputStreamletSetting.video_encode)
}

// .DavWaveSetting.AudioEncodeSetting audio_encode = 2;
inline bool OutputStreamletSetting::_internal_has_audio_encode() const {
  return this != internal_default_instance() && audio_encode_ != nullptr;
}
inline bool OutputStreamletSetting::has_audio_encode() const {
  return _internal_has_audio_encode();
}
inline const ::DavWaveSetting::AudioEncodeSetting& OutputStreamletSetting::_internal_audio_encode() const {
  const ::DavWaveSetting::AudioEncodeSetting* p = audio_encode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::AudioEncodeSetting*>(
      &::DavWaveSetting::_AudioEncodeSetting_default_instance_);
}
inline const ::DavWaveSetting::AudioEncodeSetting& OutputStreamletSetting::audio_encode() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.OutputStreamletSetting.audio_encode)
  return _internal_audio_encode();
}
inline ::DavWaveSetting::AudioEncodeSetting* OutputStreamletSetting::release_audio_encode() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.OutputStreamletSetting.audio_encode)
  
  ::DavWaveSetting::AudioEncodeSetting* temp = audio_encode_;
  audio_encode_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::AudioEncodeSetting* OutputStreamletSetting::_internal_mutable_audio_encode() {
  
  if (audio_encode_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::AudioEncodeSetting>(GetArenaNoVirtual());
    audio_encode_ = p;
  }
  return audio_encode_;
}
inline ::DavWaveSetting::AudioEncodeSetting* OutputStreamletSetting::mutable_audio_encode() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.OutputStreamletSetting.audio_encode)
  return _internal_mutable_audio_encode();
}
inline void OutputStreamletSetting::set_allocated_audio_encode(::DavWaveSetting::AudioEncodeSetting* audio_encode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_encode_);
  }
  if (audio_encode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio_encode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_encode, submessage_arena);
    }
    
  } else {
    
  }
  audio_encode_ = audio_encode;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.OutputStreamletSetting.audio_encode)
}

// .DavWaveSetting.VideoFilterSetting pre_encode_video_filter = 3;
inline bool OutputStreamletSetting::_internal_has_pre_encode_video_filter() const {
  return this != internal_default_instance() && pre_encode_video_filter_ != nullptr;
}
inline bool OutputStreamletSetting::has_pre_encode_video_filter() const {
  return _internal_has_pre_encode_video_filter();
}
inline const ::DavWaveSetting::VideoFilterSetting& OutputStreamletSetting::_internal_pre_encode_video_filter() const {
  const ::DavWaveSetting::VideoFilterSetting* p = pre_encode_video_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::VideoFilterSetting*>(
      &::DavWaveSetting::_VideoFilterSetting_default_instance_);
}
inline const ::DavWaveSetting::VideoFilterSetting& OutputStreamletSetting::pre_encode_video_filter() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.OutputStreamletSetting.pre_encode_video_filter)
  return _internal_pre_encode_video_filter();
}
inline ::DavWaveSetting::VideoFilterSetting* OutputStreamletSetting::release_pre_encode_video_filter() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.OutputStreamletSetting.pre_encode_video_filter)
  
  ::DavWaveSetting::VideoFilterSetting* temp = pre_encode_video_filter_;
  pre_encode_video_filter_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::VideoFilterSetting* OutputStreamletSetting::_internal_mutable_pre_encode_video_filter() {
  
  if (pre_encode_video_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::VideoFilterSetting>(GetArenaNoVirtual());
    pre_encode_video_filter_ = p;
  }
  return pre_encode_video_filter_;
}
inline ::DavWaveSetting::VideoFilterSetting* OutputStreamletSetting::mutable_pre_encode_video_filter() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.OutputStreamletSetting.pre_encode_video_filter)
  return _internal_mutable_pre_encode_video_filter();
}
inline void OutputStreamletSetting::set_allocated_pre_encode_video_filter(::DavWaveSetting::VideoFilterSetting* pre_encode_video_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_encode_video_filter_);
  }
  if (pre_encode_video_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pre_encode_video_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre_encode_video_filter, submessage_arena);
    }
    
  } else {
    
  }
  pre_encode_video_filter_ = pre_encode_video_filter;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.OutputStreamletSetting.pre_encode_video_filter)
}

// .DavWaveSetting.AudioFilterSetting pre_encode_audio_filter = 4;
inline bool OutputStreamletSetting::_internal_has_pre_encode_audio_filter() const {
  return this != internal_default_instance() && pre_encode_audio_filter_ != nullptr;
}
inline bool OutputStreamletSetting::has_pre_encode_audio_filter() const {
  return _internal_has_pre_encode_audio_filter();
}
inline const ::DavWaveSetting::AudioFilterSetting& OutputStreamletSetting::_internal_pre_encode_audio_filter() const {
  const ::DavWaveSetting::AudioFilterSetting* p = pre_encode_audio_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::AudioFilterSetting*>(
      &::DavWaveSetting::_AudioFilterSetting_default_instance_);
}
inline const ::DavWaveSetting::AudioFilterSetting& OutputStreamletSetting::pre_encode_audio_filter() const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.OutputStreamletSetting.pre_encode_audio_filter)
  return _internal_pre_encode_audio_filter();
}
inline ::DavWaveSetting::AudioFilterSetting* OutputStreamletSetting::release_pre_encode_audio_filter() {
  // @@protoc_insertion_point(field_release:DavStreamletSetting.OutputStreamletSetting.pre_encode_audio_filter)
  
  ::DavWaveSetting::AudioFilterSetting* temp = pre_encode_audio_filter_;
  pre_encode_audio_filter_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::AudioFilterSetting* OutputStreamletSetting::_internal_mutable_pre_encode_audio_filter() {
  
  if (pre_encode_audio_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::AudioFilterSetting>(GetArenaNoVirtual());
    pre_encode_audio_filter_ = p;
  }
  return pre_encode_audio_filter_;
}
inline ::DavWaveSetting::AudioFilterSetting* OutputStreamletSetting::mutable_pre_encode_audio_filter() {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.OutputStreamletSetting.pre_encode_audio_filter)
  return _internal_mutable_pre_encode_audio_filter();
}
inline void OutputStreamletSetting::set_allocated_pre_encode_audio_filter(::DavWaveSetting::AudioFilterSetting* pre_encode_audio_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_encode_audio_filter_);
  }
  if (pre_encode_audio_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pre_encode_audio_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre_encode_audio_filter, submessage_arena);
    }
    
  } else {
    
  }
  pre_encode_audio_filter_ = pre_encode_audio_filter;
  // @@protoc_insertion_point(field_set_allocated:DavStreamletSetting.OutputStreamletSetting.pre_encode_audio_filter)
}

// repeated .DavWaveSetting.MuxSetting mux_outputs = 5;
inline int OutputStreamletSetting::_internal_mux_outputs_size() const {
  return mux_outputs_.size();
}
inline int OutputStreamletSetting::mux_outputs_size() const {
  return _internal_mux_outputs_size();
}
inline ::DavWaveSetting::MuxSetting* OutputStreamletSetting::mutable_mux_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:DavStreamletSetting.OutputStreamletSetting.mux_outputs)
  return mux_outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::MuxSetting >*
OutputStreamletSetting::mutable_mux_outputs() {
  // @@protoc_insertion_point(field_mutable_list:DavStreamletSetting.OutputStreamletSetting.mux_outputs)
  return &mux_outputs_;
}
inline const ::DavWaveSetting::MuxSetting& OutputStreamletSetting::_internal_mux_outputs(int index) const {
  return mux_outputs_.Get(index);
}
inline const ::DavWaveSetting::MuxSetting& OutputStreamletSetting::mux_outputs(int index) const {
  // @@protoc_insertion_point(field_get:DavStreamletSetting.OutputStreamletSetting.mux_outputs)
  return _internal_mux_outputs(index);
}
inline ::DavWaveSetting::MuxSetting* OutputStreamletSetting::_internal_add_mux_outputs() {
  return mux_outputs_.Add();
}
inline ::DavWaveSetting::MuxSetting* OutputStreamletSetting::add_mux_outputs() {
  // @@protoc_insertion_point(field_add:DavStreamletSetting.OutputStreamletSetting.mux_outputs)
  return _internal_add_mux_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::MuxSetting >&
OutputStreamletSetting::mux_outputs() const {
  // @@protoc_insertion_point(field_list:DavStreamletSetting.OutputStreamletSetting.mux_outputs)
  return mux_outputs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DavStreamletSetting

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_davStreamletSetting_2eproto
