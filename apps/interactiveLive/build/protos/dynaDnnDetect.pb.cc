// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynaDnnDetect.proto

#include "dynaDnnDetect.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_appGlobalSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalSetting_appGlobalSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davStreamletSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_InputStreamletSetting_davStreamletSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davStreamletSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_OutputStreamletSetting_davStreamletSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dynaDnnDetect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnnDetectSetting_dynaDnnDetect_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dynaDnnDetect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynaDetectGlobalSetting_dynaDnnDetect_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dynaDnnDetect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_dynaDnnDetect_2eproto;
namespace DynaDnnDetect {
class DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse> _instance;
} _DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_default_instance_;
class DynaDnnDetectTaskConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynaDnnDetectTaskConfig> _instance;
} _DynaDnnDetectTaskConfig_default_instance_;
class DynaDetectGlobalSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynaDetectGlobalSetting> _instance;
} _DynaDetectGlobalSetting_default_instance_;
class DnnDetectSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnnDetectSetting> _instance;
} _DnnDetectSetting_default_instance_;
}  // namespace DynaDnnDetect
static void InitDefaultsscc_info_DnnDetectSetting_dynaDnnDetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynaDnnDetect::_DnnDetectSetting_default_instance_;
    new (ptr) ::DynaDnnDetect::DnnDetectSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DynaDnnDetect::DnnDetectSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnnDetectSetting_dynaDnnDetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DnnDetectSetting_dynaDnnDetect_2eproto}, {}};

static void InitDefaultsscc_info_DynaDetectGlobalSetting_dynaDnnDetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynaDnnDetect::_DynaDetectGlobalSetting_default_instance_;
    new (ptr) ::DynaDnnDetect::DynaDetectGlobalSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DynaDnnDetect::DynaDetectGlobalSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynaDetectGlobalSetting_dynaDnnDetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DynaDetectGlobalSetting_dynaDnnDetect_2eproto}, {}};

static void InitDefaultsscc_info_DynaDnnDetectTaskConfig_dynaDnnDetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynaDnnDetect::_DynaDnnDetectTaskConfig_default_instance_;
    new (ptr) ::DynaDnnDetect::DynaDnnDetectTaskConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DynaDnnDetect::DynaDnnDetectTaskConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DynaDnnDetectTaskConfig_dynaDnnDetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_DynaDnnDetectTaskConfig_dynaDnnDetect_2eproto}, {
      &scc_info_GlobalSetting_appGlobalSetting_2eproto.base,
      &scc_info_DynaDetectGlobalSetting_dynaDnnDetect_2eproto.base,
      &scc_info_InputStreamletSetting_davStreamletSetting_2eproto.base,
      &scc_info_OutputStreamletSetting_davStreamletSetting_2eproto.base,
      &scc_info_DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_dynaDnnDetect_2eproto.base,}};

static void InitDefaultsscc_info_DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_dynaDnnDetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynaDnnDetect::_DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse();
  }
  ::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_dynaDnnDetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_dynaDnnDetect_2eproto}, {
      &scc_info_DnnDetectSetting_dynaDnnDetect_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dynaDnnDetect_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dynaDnnDetect_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dynaDnnDetect_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dynaDnnDetect_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig, app_global_setting_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig, dyna_detect_global_setting_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig, input_setting_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig, output_setting_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDnnDetectTaskConfig, dnn_detector_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDetectGlobalSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDetectGlobalSetting, max_detectors_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDetectGlobalSetting, max_buf_num_of_detect_streamlet_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDetectGlobalSetting, input_url_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DynaDetectGlobalSetting, output_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, detector_type_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, detector_framework_tag_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, model_path_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, config_path_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, classname_path_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, backend_id_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, target_id_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, scale_factor_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, means_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, swap_rb_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, width_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, height_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, detect_interval_),
  PROTOBUF_FIELD_OFFSET(::DynaDnnDetect::DnnDetectSetting, enable_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse)},
  { 9, -1, sizeof(::DynaDnnDetect::DynaDnnDetectTaskConfig)},
  { 19, -1, sizeof(::DynaDnnDetect::DynaDetectGlobalSetting)},
  { 28, -1, sizeof(::DynaDnnDetect::DnnDetectSetting)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynaDnnDetect::_DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynaDnnDetect::_DynaDnnDetectTaskConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynaDnnDetect::_DynaDetectGlobalSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynaDnnDetect::_DnnDetectSetting_default_instance_),
};

const char descriptor_table_protodef_dynaDnnDetect_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023dynaDnnDetect.proto\022\rDynaDnnDetect\032\031da"
  "vStreamletSetting.proto\032\026appGlobalSettin"
  "g.proto\"\347\003\n\027DynaDnnDetectTaskConfig\022;\n\022a"
  "pp_global_setting\030\001 \001(\0132\037.AppGlobalSetti"
  "ng.GlobalSetting\022J\n\032dyna_detect_global_s"
  "etting\030\002 \001(\0132&.DynaDnnDetect.DynaDetectG"
  "lobalSetting\022A\n\rinput_setting\030\n \001(\0132*.Da"
  "vStreamletSetting.InputStreamletSetting\022"
  "C\n\016output_setting\030\013 \001(\0132+.DavStreamletSe"
  "tting.OutputStreamletSetting\022^\n\025dnn_dete"
  "ctor_settings\030\014 \003(\0132\?.DynaDnnDetect.Dyna"
  "DnnDetectTaskConfig.DnnDetectorSettingsE"
  "ntry\032[\n\030DnnDetectorSettingsEntry\022\013\n\003key\030"
  "\001 \001(\t\022.\n\005value\030\002 \001(\0132\037.DynaDnnDetect.Dnn"
  "DetectSetting:\0028\001\"\200\001\n\027DynaDetectGlobalSe"
  "tting\022\025\n\rmax_detectors\030\001 \001(\005\022\'\n\037max_buf_"
  "num_of_detect_streamlet\030\002 \001(\005\022\021\n\tinput_u"
  "rl\030\003 \001(\t\022\022\n\noutput_url\030\004 \001(\t\"\307\002\n\020DnnDete"
  "ctSetting\022\025\n\rdetector_type\030\001 \001(\t\022\036\n\026dete"
  "ctor_framework_tag\030\002 \001(\t\022\022\n\nmodel_path\030\003"
  " \001(\t\022\023\n\013config_path\030\004 \001(\t\022\026\n\016classname_p"
  "ath\030\005 \001(\t\022\022\n\nbackend_id\030\006 \001(\005\022\021\n\ttarget_"
  "id\030\007 \001(\005\022\024\n\014scale_factor\030\013 \001(\002\022\r\n\005means\030"
  "\014 \003(\002\022\017\n\007swap_rb\030\r \001(\010\022\r\n\005width\030\016 \001(\005\022\016\n"
  "\006height\030\017 \001(\005\022\026\n\016conf_threshold\030\020 \001(\002\022\027\n"
  "\017detect_interval\030\021 \001(\005\022\016\n\006enable\030\024 \001(\010b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dynaDnnDetect_2eproto_deps[2] = {
  &::descriptor_table_appGlobalSetting_2eproto,
  &::descriptor_table_davStreamletSetting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dynaDnnDetect_2eproto_sccs[4] = {
  &scc_info_DnnDetectSetting_dynaDnnDetect_2eproto.base,
  &scc_info_DynaDetectGlobalSetting_dynaDnnDetect_2eproto.base,
  &scc_info_DynaDnnDetectTaskConfig_dynaDnnDetect_2eproto.base,
  &scc_info_DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse_dynaDnnDetect_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dynaDnnDetect_2eproto_once;
static bool descriptor_table_dynaDnnDetect_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynaDnnDetect_2eproto = {
  &descriptor_table_dynaDnnDetect_2eproto_initialized, descriptor_table_protodef_dynaDnnDetect_2eproto, "dynaDnnDetect.proto", 1046,
  &descriptor_table_dynaDnnDetect_2eproto_once, descriptor_table_dynaDnnDetect_2eproto_sccs, descriptor_table_dynaDnnDetect_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_dynaDnnDetect_2eproto::offsets,
  file_level_metadata_dynaDnnDetect_2eproto, 4, file_level_enum_descriptors_dynaDnnDetect_2eproto, file_level_service_descriptors_dynaDnnDetect_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dynaDnnDetect_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dynaDnnDetect_2eproto), true);
namespace DynaDnnDetect {

// ===================================================================

DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse() {}
DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::MergeFrom(const DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DynaDnnDetectTaskConfig::InitAsDefaultInstance() {
  ::DynaDnnDetect::_DynaDnnDetectTaskConfig_default_instance_._instance.get_mutable()->app_global_setting_ = const_cast< ::AppGlobalSetting::GlobalSetting*>(
      ::AppGlobalSetting::GlobalSetting::internal_default_instance());
  ::DynaDnnDetect::_DynaDnnDetectTaskConfig_default_instance_._instance.get_mutable()->dyna_detect_global_setting_ = const_cast< ::DynaDnnDetect::DynaDetectGlobalSetting*>(
      ::DynaDnnDetect::DynaDetectGlobalSetting::internal_default_instance());
  ::DynaDnnDetect::_DynaDnnDetectTaskConfig_default_instance_._instance.get_mutable()->input_setting_ = const_cast< ::DavStreamletSetting::InputStreamletSetting*>(
      ::DavStreamletSetting::InputStreamletSetting::internal_default_instance());
  ::DynaDnnDetect::_DynaDnnDetectTaskConfig_default_instance_._instance.get_mutable()->output_setting_ = const_cast< ::DavStreamletSetting::OutputStreamletSetting*>(
      ::DavStreamletSetting::OutputStreamletSetting::internal_default_instance());
}
class DynaDnnDetectTaskConfig::_Internal {
 public:
  static const ::AppGlobalSetting::GlobalSetting& app_global_setting(const DynaDnnDetectTaskConfig* msg);
  static const ::DynaDnnDetect::DynaDetectGlobalSetting& dyna_detect_global_setting(const DynaDnnDetectTaskConfig* msg);
  static const ::DavStreamletSetting::InputStreamletSetting& input_setting(const DynaDnnDetectTaskConfig* msg);
  static const ::DavStreamletSetting::OutputStreamletSetting& output_setting(const DynaDnnDetectTaskConfig* msg);
};

const ::AppGlobalSetting::GlobalSetting&
DynaDnnDetectTaskConfig::_Internal::app_global_setting(const DynaDnnDetectTaskConfig* msg) {
  return *msg->app_global_setting_;
}
const ::DynaDnnDetect::DynaDetectGlobalSetting&
DynaDnnDetectTaskConfig::_Internal::dyna_detect_global_setting(const DynaDnnDetectTaskConfig* msg) {
  return *msg->dyna_detect_global_setting_;
}
const ::DavStreamletSetting::InputStreamletSetting&
DynaDnnDetectTaskConfig::_Internal::input_setting(const DynaDnnDetectTaskConfig* msg) {
  return *msg->input_setting_;
}
const ::DavStreamletSetting::OutputStreamletSetting&
DynaDnnDetectTaskConfig::_Internal::output_setting(const DynaDnnDetectTaskConfig* msg) {
  return *msg->output_setting_;
}
void DynaDnnDetectTaskConfig::clear_app_global_setting() {
  if (GetArenaNoVirtual() == nullptr && app_global_setting_ != nullptr) {
    delete app_global_setting_;
  }
  app_global_setting_ = nullptr;
}
void DynaDnnDetectTaskConfig::clear_input_setting() {
  if (GetArenaNoVirtual() == nullptr && input_setting_ != nullptr) {
    delete input_setting_;
  }
  input_setting_ = nullptr;
}
void DynaDnnDetectTaskConfig::clear_output_setting() {
  if (GetArenaNoVirtual() == nullptr && output_setting_ != nullptr) {
    delete output_setting_;
  }
  output_setting_ = nullptr;
}
DynaDnnDetectTaskConfig::DynaDnnDetectTaskConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DynaDnnDetect.DynaDnnDetectTaskConfig)
}
DynaDnnDetectTaskConfig::DynaDnnDetectTaskConfig(const DynaDnnDetectTaskConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dnn_detector_settings_.MergeFrom(from.dnn_detector_settings_);
  if (from._internal_has_app_global_setting()) {
    app_global_setting_ = new ::AppGlobalSetting::GlobalSetting(*from.app_global_setting_);
  } else {
    app_global_setting_ = nullptr;
  }
  if (from._internal_has_dyna_detect_global_setting()) {
    dyna_detect_global_setting_ = new ::DynaDnnDetect::DynaDetectGlobalSetting(*from.dyna_detect_global_setting_);
  } else {
    dyna_detect_global_setting_ = nullptr;
  }
  if (from._internal_has_input_setting()) {
    input_setting_ = new ::DavStreamletSetting::InputStreamletSetting(*from.input_setting_);
  } else {
    input_setting_ = nullptr;
  }
  if (from._internal_has_output_setting()) {
    output_setting_ = new ::DavStreamletSetting::OutputStreamletSetting(*from.output_setting_);
  } else {
    output_setting_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DynaDnnDetect.DynaDnnDetectTaskConfig)
}

void DynaDnnDetectTaskConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynaDnnDetectTaskConfig_dynaDnnDetect_2eproto.base);
  ::memset(&app_global_setting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_setting_) -
      reinterpret_cast<char*>(&app_global_setting_)) + sizeof(output_setting_));
}

DynaDnnDetectTaskConfig::~DynaDnnDetectTaskConfig() {
  // @@protoc_insertion_point(destructor:DynaDnnDetect.DynaDnnDetectTaskConfig)
  SharedDtor();
}

void DynaDnnDetectTaskConfig::SharedDtor() {
  if (this != internal_default_instance()) delete app_global_setting_;
  if (this != internal_default_instance()) delete dyna_detect_global_setting_;
  if (this != internal_default_instance()) delete input_setting_;
  if (this != internal_default_instance()) delete output_setting_;
}

void DynaDnnDetectTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynaDnnDetectTaskConfig& DynaDnnDetectTaskConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynaDnnDetectTaskConfig_dynaDnnDetect_2eproto.base);
  return *internal_default_instance();
}


void DynaDnnDetectTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:DynaDnnDetect.DynaDnnDetectTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dnn_detector_settings_.Clear();
  if (GetArenaNoVirtual() == nullptr && app_global_setting_ != nullptr) {
    delete app_global_setting_;
  }
  app_global_setting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dyna_detect_global_setting_ != nullptr) {
    delete dyna_detect_global_setting_;
  }
  dyna_detect_global_setting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_setting_ != nullptr) {
    delete input_setting_;
  }
  input_setting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_setting_ != nullptr) {
    delete output_setting_;
  }
  output_setting_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DynaDnnDetectTaskConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AppGlobalSetting.GlobalSetting app_global_setting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_global_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynaDnnDetect.DynaDetectGlobalSetting dyna_detect_global_setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dyna_detect_global_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavStreamletSetting.InputStreamletSetting input_setting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavStreamletSetting.OutputStreamletSetting output_setting = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .DynaDnnDetect.DnnDetectSetting> dnn_detector_settings = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dnn_detector_settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynaDnnDetectTaskConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynaDnnDetect.DynaDnnDetectTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AppGlobalSetting.GlobalSetting app_global_setting = 1;
  if (this->has_app_global_setting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::app_global_setting(this), target, stream);
  }

  // .DynaDnnDetect.DynaDetectGlobalSetting dyna_detect_global_setting = 2;
  if (this->has_dyna_detect_global_setting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dyna_detect_global_setting(this), target, stream);
  }

  // .DavStreamletSetting.InputStreamletSetting input_setting = 10;
  if (this->has_input_setting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::input_setting(this), target, stream);
  }

  // .DavStreamletSetting.OutputStreamletSetting output_setting = 11;
  if (this->has_output_setting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::output_setting(this), target, stream);
  }

  // map<string, .DynaDnnDetect.DnnDetectSetting> dnn_detector_settings = 12;
  if (!this->_internal_dnn_detector_settings().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DynaDnnDetect::DnnDetectSetting >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DynaDnnDetect.DynaDnnDetectTaskConfig.DnnDetectorSettingsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dnn_detector_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dnn_detector_settings().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DynaDnnDetect::DnnDetectSetting >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DynaDnnDetect::DnnDetectSetting >::const_iterator
          it = this->_internal_dnn_detector_settings().begin();
          it != this->_internal_dnn_detector_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::Funcs::InternalSerialize(12, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DynaDnnDetect::DnnDetectSetting >::const_iterator
          it = this->_internal_dnn_detector_settings().begin();
          it != this->_internal_dnn_detector_settings().end(); ++it) {
        target = DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::Funcs::InternalSerialize(12, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynaDnnDetect.DynaDnnDetectTaskConfig)
  return target;
}

size_t DynaDnnDetectTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynaDnnDetect.DynaDnnDetectTaskConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .DynaDnnDetect.DnnDetectSetting> dnn_detector_settings = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dnn_detector_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DynaDnnDetect::DnnDetectSetting >::const_iterator
      it = this->_internal_dnn_detector_settings().begin();
      it != this->_internal_dnn_detector_settings().end(); ++it) {
    total_size += DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .AppGlobalSetting.GlobalSetting app_global_setting = 1;
  if (this->has_app_global_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_global_setting_);
  }

  // .DynaDnnDetect.DynaDetectGlobalSetting dyna_detect_global_setting = 2;
  if (this->has_dyna_detect_global_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dyna_detect_global_setting_);
  }

  // .DavStreamletSetting.InputStreamletSetting input_setting = 10;
  if (this->has_input_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_setting_);
  }

  // .DavStreamletSetting.OutputStreamletSetting output_setting = 11;
  if (this->has_output_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_setting_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynaDnnDetectTaskConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynaDnnDetect.DynaDnnDetectTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DynaDnnDetectTaskConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynaDnnDetectTaskConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynaDnnDetect.DynaDnnDetectTaskConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynaDnnDetect.DynaDnnDetectTaskConfig)
    MergeFrom(*source);
  }
}

void DynaDnnDetectTaskConfig::MergeFrom(const DynaDnnDetectTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynaDnnDetect.DynaDnnDetectTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dnn_detector_settings_.MergeFrom(from.dnn_detector_settings_);
  if (from.has_app_global_setting()) {
    _internal_mutable_app_global_setting()->::AppGlobalSetting::GlobalSetting::MergeFrom(from._internal_app_global_setting());
  }
  if (from.has_dyna_detect_global_setting()) {
    _internal_mutable_dyna_detect_global_setting()->::DynaDnnDetect::DynaDetectGlobalSetting::MergeFrom(from._internal_dyna_detect_global_setting());
  }
  if (from.has_input_setting()) {
    _internal_mutable_input_setting()->::DavStreamletSetting::InputStreamletSetting::MergeFrom(from._internal_input_setting());
  }
  if (from.has_output_setting()) {
    _internal_mutable_output_setting()->::DavStreamletSetting::OutputStreamletSetting::MergeFrom(from._internal_output_setting());
  }
}

void DynaDnnDetectTaskConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynaDnnDetect.DynaDnnDetectTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynaDnnDetectTaskConfig::CopyFrom(const DynaDnnDetectTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynaDnnDetect.DynaDnnDetectTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynaDnnDetectTaskConfig::IsInitialized() const {
  return true;
}

void DynaDnnDetectTaskConfig::InternalSwap(DynaDnnDetectTaskConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dnn_detector_settings_.Swap(&other->dnn_detector_settings_);
  swap(app_global_setting_, other->app_global_setting_);
  swap(dyna_detect_global_setting_, other->dyna_detect_global_setting_);
  swap(input_setting_, other->input_setting_);
  swap(output_setting_, other->output_setting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynaDnnDetectTaskConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynaDetectGlobalSetting::InitAsDefaultInstance() {
}
class DynaDetectGlobalSetting::_Internal {
 public:
};

DynaDetectGlobalSetting::DynaDetectGlobalSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DynaDnnDetect.DynaDetectGlobalSetting)
}
DynaDetectGlobalSetting::DynaDetectGlobalSetting(const DynaDetectGlobalSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_url().empty()) {
    input_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_url_);
  }
  output_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_url().empty()) {
    output_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_url_);
  }
  ::memcpy(&max_detectors_, &from.max_detectors_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_buf_num_of_detect_streamlet_) -
    reinterpret_cast<char*>(&max_detectors_)) + sizeof(max_buf_num_of_detect_streamlet_));
  // @@protoc_insertion_point(copy_constructor:DynaDnnDetect.DynaDetectGlobalSetting)
}

void DynaDetectGlobalSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynaDetectGlobalSetting_dynaDnnDetect_2eproto.base);
  input_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_detectors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_buf_num_of_detect_streamlet_) -
      reinterpret_cast<char*>(&max_detectors_)) + sizeof(max_buf_num_of_detect_streamlet_));
}

DynaDetectGlobalSetting::~DynaDetectGlobalSetting() {
  // @@protoc_insertion_point(destructor:DynaDnnDetect.DynaDetectGlobalSetting)
  SharedDtor();
}

void DynaDetectGlobalSetting::SharedDtor() {
  input_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DynaDetectGlobalSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynaDetectGlobalSetting& DynaDetectGlobalSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynaDetectGlobalSetting_dynaDnnDetect_2eproto.base);
  return *internal_default_instance();
}


void DynaDetectGlobalSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DynaDnnDetect.DynaDetectGlobalSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_detectors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_buf_num_of_detect_streamlet_) -
      reinterpret_cast<char*>(&max_detectors_)) + sizeof(max_buf_num_of_detect_streamlet_));
  _internal_metadata_.Clear();
}

const char* DynaDetectGlobalSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_detectors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_detectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_buf_num_of_detect_streamlet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_buf_num_of_detect_streamlet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_input_url(), ptr, ctx, "DynaDnnDetect.DynaDetectGlobalSetting.input_url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string output_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_output_url(), ptr, ctx, "DynaDnnDetect.DynaDetectGlobalSetting.output_url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynaDetectGlobalSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynaDnnDetect.DynaDetectGlobalSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_detectors = 1;
  if (this->max_detectors() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_detectors(), target);
  }

  // int32 max_buf_num_of_detect_streamlet = 2;
  if (this->max_buf_num_of_detect_streamlet() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_buf_num_of_detect_streamlet(), target);
  }

  // string input_url = 3;
  if (this->input_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_url().data(), static_cast<int>(this->_internal_input_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DynaDnnDetect.DynaDetectGlobalSetting.input_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_url(), target);
  }

  // string output_url = 4;
  if (this->output_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_url().data(), static_cast<int>(this->_internal_output_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DynaDnnDetect.DynaDetectGlobalSetting.output_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynaDnnDetect.DynaDetectGlobalSetting)
  return target;
}

size_t DynaDetectGlobalSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynaDnnDetect.DynaDetectGlobalSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_url = 3;
  if (this->input_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_url());
  }

  // string output_url = 4;
  if (this->output_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_url());
  }

  // int32 max_detectors = 1;
  if (this->max_detectors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_detectors());
  }

  // int32 max_buf_num_of_detect_streamlet = 2;
  if (this->max_buf_num_of_detect_streamlet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_buf_num_of_detect_streamlet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynaDetectGlobalSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynaDnnDetect.DynaDetectGlobalSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const DynaDetectGlobalSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynaDetectGlobalSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynaDnnDetect.DynaDetectGlobalSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynaDnnDetect.DynaDetectGlobalSetting)
    MergeFrom(*source);
  }
}

void DynaDetectGlobalSetting::MergeFrom(const DynaDetectGlobalSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynaDnnDetect.DynaDetectGlobalSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_url().size() > 0) {

    input_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_url_);
  }
  if (from.output_url().size() > 0) {

    output_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_url_);
  }
  if (from.max_detectors() != 0) {
    _internal_set_max_detectors(from._internal_max_detectors());
  }
  if (from.max_buf_num_of_detect_streamlet() != 0) {
    _internal_set_max_buf_num_of_detect_streamlet(from._internal_max_buf_num_of_detect_streamlet());
  }
}

void DynaDetectGlobalSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynaDnnDetect.DynaDetectGlobalSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynaDetectGlobalSetting::CopyFrom(const DynaDetectGlobalSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynaDnnDetect.DynaDetectGlobalSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynaDetectGlobalSetting::IsInitialized() const {
  return true;
}

void DynaDetectGlobalSetting::InternalSwap(DynaDetectGlobalSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_url_.Swap(&other->input_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_url_.Swap(&other->output_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(max_detectors_, other->max_detectors_);
  swap(max_buf_num_of_detect_streamlet_, other->max_buf_num_of_detect_streamlet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynaDetectGlobalSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DnnDetectSetting::InitAsDefaultInstance() {
}
class DnnDetectSetting::_Internal {
 public:
};

DnnDetectSetting::DnnDetectSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DynaDnnDetect.DnnDetectSetting)
}
DnnDetectSetting::DnnDetectSetting(const DnnDetectSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      means_(from.means_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detector_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detector_type().empty()) {
    detector_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_type_);
  }
  detector_framework_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detector_framework_tag().empty()) {
    detector_framework_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_framework_tag_);
  }
  model_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_path().empty()) {
    model_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
  config_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_path().empty()) {
    config_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_path_);
  }
  classname_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_classname_path().empty()) {
    classname_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.classname_path_);
  }
  ::memcpy(&backend_id_, &from.backend_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&detect_interval_) -
    reinterpret_cast<char*>(&backend_id_)) + sizeof(detect_interval_));
  // @@protoc_insertion_point(copy_constructor:DynaDnnDetect.DnnDetectSetting)
}

void DnnDetectSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DnnDetectSetting_dynaDnnDetect_2eproto.base);
  detector_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_framework_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classname_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&backend_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detect_interval_) -
      reinterpret_cast<char*>(&backend_id_)) + sizeof(detect_interval_));
}

DnnDetectSetting::~DnnDetectSetting() {
  // @@protoc_insertion_point(destructor:DynaDnnDetect.DnnDetectSetting)
  SharedDtor();
}

void DnnDetectSetting::SharedDtor() {
  detector_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_framework_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classname_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DnnDetectSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnnDetectSetting& DnnDetectSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnnDetectSetting_dynaDnnDetect_2eproto.base);
  return *internal_default_instance();
}


void DnnDetectSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DynaDnnDetect.DnnDetectSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  means_.Clear();
  detector_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_framework_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classname_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&backend_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detect_interval_) -
      reinterpret_cast<char*>(&backend_id_)) + sizeof(detect_interval_));
  _internal_metadata_.Clear();
}

const char* DnnDetectSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string detector_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_detector_type(), ptr, ctx, "DynaDnnDetect.DnnDetectSetting.detector_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detector_framework_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_detector_framework_tag(), ptr, ctx, "DynaDnnDetect.DnnDetectSetting.detector_framework_tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_model_path(), ptr, ctx, "DynaDnnDetect.DnnDetectSetting.model_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_config_path(), ptr, ctx, "DynaDnnDetect.DnnDetectSetting.config_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string classname_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_classname_path(), ptr, ctx, "DynaDnnDetect.DnnDetectSetting.classname_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backend_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          backend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scale_factor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float means = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_means(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          _internal_add_means(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool swap_rb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          swap_rb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float conf_threshold = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 detect_interval = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          detect_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DnnDetectSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynaDnnDetect.DnnDetectSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string detector_type = 1;
  if (this->detector_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detector_type().data(), static_cast<int>(this->_internal_detector_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DynaDnnDetect.DnnDetectSetting.detector_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detector_type(), target);
  }

  // string detector_framework_tag = 2;
  if (this->detector_framework_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detector_framework_tag().data(), static_cast<int>(this->_internal_detector_framework_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DynaDnnDetect.DnnDetectSetting.detector_framework_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detector_framework_tag(), target);
  }

  // string model_path = 3;
  if (this->model_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_path().data(), static_cast<int>(this->_internal_model_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DynaDnnDetect.DnnDetectSetting.model_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_path(), target);
  }

  // string config_path = 4;
  if (this->config_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_path().data(), static_cast<int>(this->_internal_config_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DynaDnnDetect.DnnDetectSetting.config_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_config_path(), target);
  }

  // string classname_path = 5;
  if (this->classname_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classname_path().data(), static_cast<int>(this->_internal_classname_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DynaDnnDetect.DnnDetectSetting.classname_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_classname_path(), target);
  }

  // int32 backend_id = 6;
  if (this->backend_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_backend_id(), target);
  }

  // int32 target_id = 7;
  if (this->target_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_target_id(), target);
  }

  // float scale_factor = 11;
  if (!(this->scale_factor() <= 0 && this->scale_factor() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_scale_factor(), target);
  }

  // repeated float means = 12;
  if (this->_internal_means_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_means(), target);
  }

  // bool swap_rb = 13;
  if (this->swap_rb() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_swap_rb(), target);
  }

  // int32 width = 14;
  if (this->width() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_width(), target);
  }

  // int32 height = 15;
  if (this->height() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_height(), target);
  }

  // float conf_threshold = 16;
  if (!(this->conf_threshold() <= 0 && this->conf_threshold() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_conf_threshold(), target);
  }

  // int32 detect_interval = 17;
  if (this->detect_interval() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_detect_interval(), target);
  }

  // bool enable = 20;
  if (this->enable() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynaDnnDetect.DnnDetectSetting)
  return target;
}

size_t DnnDetectSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynaDnnDetect.DnnDetectSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float means = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_means_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _means_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string detector_type = 1;
  if (this->detector_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detector_type());
  }

  // string detector_framework_tag = 2;
  if (this->detector_framework_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detector_framework_tag());
  }

  // string model_path = 3;
  if (this->model_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_path());
  }

  // string config_path = 4;
  if (this->config_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_path());
  }

  // string classname_path = 5;
  if (this->classname_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classname_path());
  }

  // int32 backend_id = 6;
  if (this->backend_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backend_id());
  }

  // int32 target_id = 7;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_id());
  }

  // float scale_factor = 11;
  if (!(this->scale_factor() <= 0 && this->scale_factor() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 width = 14;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 15;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // float conf_threshold = 16;
  if (!(this->conf_threshold() <= 0 && this->conf_threshold() >= 0)) {
    total_size += 2 + 4;
  }

  // bool swap_rb = 13;
  if (this->swap_rb() != 0) {
    total_size += 1 + 1;
  }

  // bool enable = 20;
  if (this->enable() != 0) {
    total_size += 2 + 1;
  }

  // int32 detect_interval = 17;
  if (this->detect_interval() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detect_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnnDetectSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynaDnnDetect.DnnDetectSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const DnnDetectSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnnDetectSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynaDnnDetect.DnnDetectSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynaDnnDetect.DnnDetectSetting)
    MergeFrom(*source);
  }
}

void DnnDetectSetting::MergeFrom(const DnnDetectSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynaDnnDetect.DnnDetectSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  means_.MergeFrom(from.means_);
  if (from.detector_type().size() > 0) {

    detector_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_type_);
  }
  if (from.detector_framework_tag().size() > 0) {

    detector_framework_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_framework_tag_);
  }
  if (from.model_path().size() > 0) {

    model_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
  if (from.config_path().size() > 0) {

    config_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_path_);
  }
  if (from.classname_path().size() > 0) {

    classname_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.classname_path_);
  }
  if (from.backend_id() != 0) {
    _internal_set_backend_id(from._internal_backend_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (!(from.scale_factor() <= 0 && from.scale_factor() >= 0)) {
    _internal_set_scale_factor(from._internal_scale_factor());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.conf_threshold() <= 0 && from.conf_threshold() >= 0)) {
    _internal_set_conf_threshold(from._internal_conf_threshold());
  }
  if (from.swap_rb() != 0) {
    _internal_set_swap_rb(from._internal_swap_rb());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.detect_interval() != 0) {
    _internal_set_detect_interval(from._internal_detect_interval());
  }
}

void DnnDetectSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynaDnnDetect.DnnDetectSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnnDetectSetting::CopyFrom(const DnnDetectSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynaDnnDetect.DnnDetectSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnnDetectSetting::IsInitialized() const {
  return true;
}

void DnnDetectSetting::InternalSwap(DnnDetectSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  means_.InternalSwap(&other->means_);
  detector_type_.Swap(&other->detector_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detector_framework_tag_.Swap(&other->detector_framework_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_path_.Swap(&other->model_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_path_.Swap(&other->config_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  classname_path_.Swap(&other->classname_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(backend_id_, other->backend_id_);
  swap(target_id_, other->target_id_);
  swap(scale_factor_, other->scale_factor_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(conf_threshold_, other->conf_threshold_);
  swap(swap_rb_, other->swap_rb_);
  swap(enable_, other->enable_);
  swap(detect_interval_, other->detect_interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DnnDetectSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DynaDnnDetect
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::DynaDnnDetect::DynaDnnDetectTaskConfig_DnnDetectorSettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DynaDnnDetect::DynaDnnDetectTaskConfig* Arena::CreateMaybeMessage< ::DynaDnnDetect::DynaDnnDetectTaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::DynaDnnDetect::DynaDnnDetectTaskConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::DynaDnnDetect::DynaDetectGlobalSetting* Arena::CreateMaybeMessage< ::DynaDnnDetect::DynaDetectGlobalSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DynaDnnDetect::DynaDetectGlobalSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DynaDnnDetect::DnnDetectSetting* Arena::CreateMaybeMessage< ::DynaDnnDetect::DnnDetectSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DynaDnnDetect::DnnDetectSetting >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
