// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appGlobalSetting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_appGlobalSetting_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_appGlobalSetting_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_appGlobalSetting_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_appGlobalSetting_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_appGlobalSetting_2eproto;
namespace AppGlobalSetting {
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class GlobalSetting;
class GlobalSettingDefaultTypeInternal;
extern GlobalSettingDefaultTypeInternal _GlobalSetting_default_instance_;
}  // namespace AppGlobalSetting
PROTOBUF_NAMESPACE_OPEN
template<> ::AppGlobalSetting::CommonResponse* Arena::CreateMaybeMessage<::AppGlobalSetting::CommonResponse>(Arena*);
template<> ::AppGlobalSetting::GlobalSetting* Arena::CreateMaybeMessage<::AppGlobalSetting::GlobalSetting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AppGlobalSetting {

// ===================================================================

class GlobalSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppGlobalSetting.GlobalSetting) */ {
 public:
  GlobalSetting();
  virtual ~GlobalSetting();

  GlobalSetting(const GlobalSetting& from);
  GlobalSetting(GlobalSetting&& from) noexcept
    : GlobalSetting() {
    *this = ::std::move(from);
  }

  inline GlobalSetting& operator=(const GlobalSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSetting& operator=(GlobalSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSetting* internal_default_instance() {
    return reinterpret_cast<const GlobalSetting*>(
               &_GlobalSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GlobalSetting& a, GlobalSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSetting* New() const final {
    return CreateMaybeMessage<GlobalSetting>(nullptr);
  }

  GlobalSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalSetting& from);
  void MergeFrom(const GlobalSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppGlobalSetting.GlobalSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appGlobalSetting_2eproto);
    return ::descriptor_table_appGlobalSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHttpServerAddrFieldNumber = 1,
    kGlogSaveLevelFieldNumber = 20,
    kGlogSavePathFieldNumber = 21,
    kFfmpegLogLevelFieldNumber = 22,
    kEventReportFormatFieldNumber = 23,
    kHttpServerPortFieldNumber = 2,
    kInputMaxBufNumFieldNumber = 15,
    kMixMaxBufNumFieldNumber = 16,
    kOutputMaxBufNumFieldNumber = 17,
  };
  // string http_server_addr = 1;
  void clear_http_server_addr();
  const std::string& http_server_addr() const;
  void set_http_server_addr(const std::string& value);
  void set_http_server_addr(std::string&& value);
  void set_http_server_addr(const char* value);
  void set_http_server_addr(const char* value, size_t size);
  std::string* mutable_http_server_addr();
  std::string* release_http_server_addr();
  void set_allocated_http_server_addr(std::string* http_server_addr);
  private:
  const std::string& _internal_http_server_addr() const;
  void _internal_set_http_server_addr(const std::string& value);
  std::string* _internal_mutable_http_server_addr();
  public:

  // string glog_save_level = 20;
  void clear_glog_save_level();
  const std::string& glog_save_level() const;
  void set_glog_save_level(const std::string& value);
  void set_glog_save_level(std::string&& value);
  void set_glog_save_level(const char* value);
  void set_glog_save_level(const char* value, size_t size);
  std::string* mutable_glog_save_level();
  std::string* release_glog_save_level();
  void set_allocated_glog_save_level(std::string* glog_save_level);
  private:
  const std::string& _internal_glog_save_level() const;
  void _internal_set_glog_save_level(const std::string& value);
  std::string* _internal_mutable_glog_save_level();
  public:

  // string glog_save_path = 21;
  void clear_glog_save_path();
  const std::string& glog_save_path() const;
  void set_glog_save_path(const std::string& value);
  void set_glog_save_path(std::string&& value);
  void set_glog_save_path(const char* value);
  void set_glog_save_path(const char* value, size_t size);
  std::string* mutable_glog_save_path();
  std::string* release_glog_save_path();
  void set_allocated_glog_save_path(std::string* glog_save_path);
  private:
  const std::string& _internal_glog_save_path() const;
  void _internal_set_glog_save_path(const std::string& value);
  std::string* _internal_mutable_glog_save_path();
  public:

  // string ffmpeg_log_level = 22;
  void clear_ffmpeg_log_level();
  const std::string& ffmpeg_log_level() const;
  void set_ffmpeg_log_level(const std::string& value);
  void set_ffmpeg_log_level(std::string&& value);
  void set_ffmpeg_log_level(const char* value);
  void set_ffmpeg_log_level(const char* value, size_t size);
  std::string* mutable_ffmpeg_log_level();
  std::string* release_ffmpeg_log_level();
  void set_allocated_ffmpeg_log_level(std::string* ffmpeg_log_level);
  private:
  const std::string& _internal_ffmpeg_log_level() const;
  void _internal_set_ffmpeg_log_level(const std::string& value);
  std::string* _internal_mutable_ffmpeg_log_level();
  public:

  // string event_report_format = 23;
  void clear_event_report_format();
  const std::string& event_report_format() const;
  void set_event_report_format(const std::string& value);
  void set_event_report_format(std::string&& value);
  void set_event_report_format(const char* value);
  void set_event_report_format(const char* value, size_t size);
  std::string* mutable_event_report_format();
  std::string* release_event_report_format();
  void set_allocated_event_report_format(std::string* event_report_format);
  private:
  const std::string& _internal_event_report_format() const;
  void _internal_set_event_report_format(const std::string& value);
  std::string* _internal_mutable_event_report_format();
  public:

  // int32 http_server_port = 2;
  void clear_http_server_port();
  ::PROTOBUF_NAMESPACE_ID::int32 http_server_port() const;
  void set_http_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_http_server_port() const;
  void _internal_set_http_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 input_max_buf_num = 15;
  void clear_input_max_buf_num();
  ::PROTOBUF_NAMESPACE_ID::int32 input_max_buf_num() const;
  void set_input_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_max_buf_num() const;
  void _internal_set_input_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mix_max_buf_num = 16;
  void clear_mix_max_buf_num();
  ::PROTOBUF_NAMESPACE_ID::int32 mix_max_buf_num() const;
  void set_mix_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mix_max_buf_num() const;
  void _internal_set_mix_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 output_max_buf_num = 17;
  void clear_output_max_buf_num();
  ::PROTOBUF_NAMESPACE_ID::int32 output_max_buf_num() const;
  void set_output_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_max_buf_num() const;
  void _internal_set_output_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AppGlobalSetting.GlobalSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_server_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr glog_save_level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr glog_save_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ffmpeg_log_level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_report_format_;
  ::PROTOBUF_NAMESPACE_ID::int32 http_server_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_max_buf_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 mix_max_buf_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_max_buf_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appGlobalSetting_2eproto;
};
// -------------------------------------------------------------------

class CommonResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppGlobalSetting.CommonResponse) */ {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonResponse* New() const final {
    return CreateMaybeMessage<CommonResponse>(nullptr);
  }

  CommonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppGlobalSetting.CommonResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appGlobalSetting_2eproto);
    return ::descriptor_table_appGlobalSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
    kBSyncRespFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool b_sync_resp = 3;
  void clear_b_sync_resp();
  bool b_sync_resp() const;
  void set_b_sync_resp(bool value);
  private:
  bool _internal_b_sync_resp() const;
  void _internal_set_b_sync_resp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AppGlobalSetting.CommonResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  bool b_sync_resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appGlobalSetting_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GlobalSetting

// string http_server_addr = 1;
inline void GlobalSetting::clear_http_server_addr() {
  http_server_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GlobalSetting::http_server_addr() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.http_server_addr)
  return _internal_http_server_addr();
}
inline void GlobalSetting::set_http_server_addr(const std::string& value) {
  _internal_set_http_server_addr(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.http_server_addr)
}
inline std::string* GlobalSetting::mutable_http_server_addr() {
  // @@protoc_insertion_point(field_mutable:AppGlobalSetting.GlobalSetting.http_server_addr)
  return _internal_mutable_http_server_addr();
}
inline const std::string& GlobalSetting::_internal_http_server_addr() const {
  return http_server_addr_.GetNoArena();
}
inline void GlobalSetting::_internal_set_http_server_addr(const std::string& value) {
  
  http_server_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GlobalSetting::set_http_server_addr(std::string&& value) {
  
  http_server_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppGlobalSetting.GlobalSetting.http_server_addr)
}
inline void GlobalSetting::set_http_server_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  http_server_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppGlobalSetting.GlobalSetting.http_server_addr)
}
inline void GlobalSetting::set_http_server_addr(const char* value, size_t size) {
  
  http_server_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppGlobalSetting.GlobalSetting.http_server_addr)
}
inline std::string* GlobalSetting::_internal_mutable_http_server_addr() {
  
  return http_server_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlobalSetting::release_http_server_addr() {
  // @@protoc_insertion_point(field_release:AppGlobalSetting.GlobalSetting.http_server_addr)
  
  return http_server_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalSetting::set_allocated_http_server_addr(std::string* http_server_addr) {
  if (http_server_addr != nullptr) {
    
  } else {
    
  }
  http_server_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_server_addr);
  // @@protoc_insertion_point(field_set_allocated:AppGlobalSetting.GlobalSetting.http_server_addr)
}

// int32 http_server_port = 2;
inline void GlobalSetting::clear_http_server_port() {
  http_server_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalSetting::_internal_http_server_port() const {
  return http_server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalSetting::http_server_port() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.http_server_port)
  return _internal_http_server_port();
}
inline void GlobalSetting::_internal_set_http_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  http_server_port_ = value;
}
inline void GlobalSetting::set_http_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_http_server_port(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.http_server_port)
}

// int32 input_max_buf_num = 15;
inline void GlobalSetting::clear_input_max_buf_num() {
  input_max_buf_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalSetting::_internal_input_max_buf_num() const {
  return input_max_buf_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalSetting::input_max_buf_num() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.input_max_buf_num)
  return _internal_input_max_buf_num();
}
inline void GlobalSetting::_internal_set_input_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  input_max_buf_num_ = value;
}
inline void GlobalSetting::set_input_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_max_buf_num(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.input_max_buf_num)
}

// int32 mix_max_buf_num = 16;
inline void GlobalSetting::clear_mix_max_buf_num() {
  mix_max_buf_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalSetting::_internal_mix_max_buf_num() const {
  return mix_max_buf_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalSetting::mix_max_buf_num() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.mix_max_buf_num)
  return _internal_mix_max_buf_num();
}
inline void GlobalSetting::_internal_set_mix_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mix_max_buf_num_ = value;
}
inline void GlobalSetting::set_mix_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mix_max_buf_num(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.mix_max_buf_num)
}

// int32 output_max_buf_num = 17;
inline void GlobalSetting::clear_output_max_buf_num() {
  output_max_buf_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalSetting::_internal_output_max_buf_num() const {
  return output_max_buf_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalSetting::output_max_buf_num() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.output_max_buf_num)
  return _internal_output_max_buf_num();
}
inline void GlobalSetting::_internal_set_output_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  output_max_buf_num_ = value;
}
inline void GlobalSetting::set_output_max_buf_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_max_buf_num(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.output_max_buf_num)
}

// string glog_save_level = 20;
inline void GlobalSetting::clear_glog_save_level() {
  glog_save_level_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GlobalSetting::glog_save_level() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.glog_save_level)
  return _internal_glog_save_level();
}
inline void GlobalSetting::set_glog_save_level(const std::string& value) {
  _internal_set_glog_save_level(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.glog_save_level)
}
inline std::string* GlobalSetting::mutable_glog_save_level() {
  // @@protoc_insertion_point(field_mutable:AppGlobalSetting.GlobalSetting.glog_save_level)
  return _internal_mutable_glog_save_level();
}
inline const std::string& GlobalSetting::_internal_glog_save_level() const {
  return glog_save_level_.GetNoArena();
}
inline void GlobalSetting::_internal_set_glog_save_level(const std::string& value) {
  
  glog_save_level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GlobalSetting::set_glog_save_level(std::string&& value) {
  
  glog_save_level_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppGlobalSetting.GlobalSetting.glog_save_level)
}
inline void GlobalSetting::set_glog_save_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  glog_save_level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppGlobalSetting.GlobalSetting.glog_save_level)
}
inline void GlobalSetting::set_glog_save_level(const char* value, size_t size) {
  
  glog_save_level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppGlobalSetting.GlobalSetting.glog_save_level)
}
inline std::string* GlobalSetting::_internal_mutable_glog_save_level() {
  
  return glog_save_level_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlobalSetting::release_glog_save_level() {
  // @@protoc_insertion_point(field_release:AppGlobalSetting.GlobalSetting.glog_save_level)
  
  return glog_save_level_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalSetting::set_allocated_glog_save_level(std::string* glog_save_level) {
  if (glog_save_level != nullptr) {
    
  } else {
    
  }
  glog_save_level_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), glog_save_level);
  // @@protoc_insertion_point(field_set_allocated:AppGlobalSetting.GlobalSetting.glog_save_level)
}

// string glog_save_path = 21;
inline void GlobalSetting::clear_glog_save_path() {
  glog_save_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GlobalSetting::glog_save_path() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.glog_save_path)
  return _internal_glog_save_path();
}
inline void GlobalSetting::set_glog_save_path(const std::string& value) {
  _internal_set_glog_save_path(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.glog_save_path)
}
inline std::string* GlobalSetting::mutable_glog_save_path() {
  // @@protoc_insertion_point(field_mutable:AppGlobalSetting.GlobalSetting.glog_save_path)
  return _internal_mutable_glog_save_path();
}
inline const std::string& GlobalSetting::_internal_glog_save_path() const {
  return glog_save_path_.GetNoArena();
}
inline void GlobalSetting::_internal_set_glog_save_path(const std::string& value) {
  
  glog_save_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GlobalSetting::set_glog_save_path(std::string&& value) {
  
  glog_save_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppGlobalSetting.GlobalSetting.glog_save_path)
}
inline void GlobalSetting::set_glog_save_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  glog_save_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppGlobalSetting.GlobalSetting.glog_save_path)
}
inline void GlobalSetting::set_glog_save_path(const char* value, size_t size) {
  
  glog_save_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppGlobalSetting.GlobalSetting.glog_save_path)
}
inline std::string* GlobalSetting::_internal_mutable_glog_save_path() {
  
  return glog_save_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlobalSetting::release_glog_save_path() {
  // @@protoc_insertion_point(field_release:AppGlobalSetting.GlobalSetting.glog_save_path)
  
  return glog_save_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalSetting::set_allocated_glog_save_path(std::string* glog_save_path) {
  if (glog_save_path != nullptr) {
    
  } else {
    
  }
  glog_save_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), glog_save_path);
  // @@protoc_insertion_point(field_set_allocated:AppGlobalSetting.GlobalSetting.glog_save_path)
}

// string ffmpeg_log_level = 22;
inline void GlobalSetting::clear_ffmpeg_log_level() {
  ffmpeg_log_level_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GlobalSetting::ffmpeg_log_level() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.ffmpeg_log_level)
  return _internal_ffmpeg_log_level();
}
inline void GlobalSetting::set_ffmpeg_log_level(const std::string& value) {
  _internal_set_ffmpeg_log_level(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.ffmpeg_log_level)
}
inline std::string* GlobalSetting::mutable_ffmpeg_log_level() {
  // @@protoc_insertion_point(field_mutable:AppGlobalSetting.GlobalSetting.ffmpeg_log_level)
  return _internal_mutable_ffmpeg_log_level();
}
inline const std::string& GlobalSetting::_internal_ffmpeg_log_level() const {
  return ffmpeg_log_level_.GetNoArena();
}
inline void GlobalSetting::_internal_set_ffmpeg_log_level(const std::string& value) {
  
  ffmpeg_log_level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GlobalSetting::set_ffmpeg_log_level(std::string&& value) {
  
  ffmpeg_log_level_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppGlobalSetting.GlobalSetting.ffmpeg_log_level)
}
inline void GlobalSetting::set_ffmpeg_log_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ffmpeg_log_level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppGlobalSetting.GlobalSetting.ffmpeg_log_level)
}
inline void GlobalSetting::set_ffmpeg_log_level(const char* value, size_t size) {
  
  ffmpeg_log_level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppGlobalSetting.GlobalSetting.ffmpeg_log_level)
}
inline std::string* GlobalSetting::_internal_mutable_ffmpeg_log_level() {
  
  return ffmpeg_log_level_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlobalSetting::release_ffmpeg_log_level() {
  // @@protoc_insertion_point(field_release:AppGlobalSetting.GlobalSetting.ffmpeg_log_level)
  
  return ffmpeg_log_level_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalSetting::set_allocated_ffmpeg_log_level(std::string* ffmpeg_log_level) {
  if (ffmpeg_log_level != nullptr) {
    
  } else {
    
  }
  ffmpeg_log_level_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ffmpeg_log_level);
  // @@protoc_insertion_point(field_set_allocated:AppGlobalSetting.GlobalSetting.ffmpeg_log_level)
}

// string event_report_format = 23;
inline void GlobalSetting::clear_event_report_format() {
  event_report_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GlobalSetting::event_report_format() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.GlobalSetting.event_report_format)
  return _internal_event_report_format();
}
inline void GlobalSetting::set_event_report_format(const std::string& value) {
  _internal_set_event_report_format(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.GlobalSetting.event_report_format)
}
inline std::string* GlobalSetting::mutable_event_report_format() {
  // @@protoc_insertion_point(field_mutable:AppGlobalSetting.GlobalSetting.event_report_format)
  return _internal_mutable_event_report_format();
}
inline const std::string& GlobalSetting::_internal_event_report_format() const {
  return event_report_format_.GetNoArena();
}
inline void GlobalSetting::_internal_set_event_report_format(const std::string& value) {
  
  event_report_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GlobalSetting::set_event_report_format(std::string&& value) {
  
  event_report_format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppGlobalSetting.GlobalSetting.event_report_format)
}
inline void GlobalSetting::set_event_report_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_report_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppGlobalSetting.GlobalSetting.event_report_format)
}
inline void GlobalSetting::set_event_report_format(const char* value, size_t size) {
  
  event_report_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppGlobalSetting.GlobalSetting.event_report_format)
}
inline std::string* GlobalSetting::_internal_mutable_event_report_format() {
  
  return event_report_format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlobalSetting::release_event_report_format() {
  // @@protoc_insertion_point(field_release:AppGlobalSetting.GlobalSetting.event_report_format)
  
  return event_report_format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalSetting::set_allocated_event_report_format(std::string* event_report_format) {
  if (event_report_format != nullptr) {
    
  } else {
    
  }
  event_report_format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_report_format);
  // @@protoc_insertion_point(field_set_allocated:AppGlobalSetting.GlobalSetting.event_report_format)
}

// -------------------------------------------------------------------

// CommonResponse

// int32 code = 1;
inline void CommonResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonResponse::code() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.CommonResponse.code)
  return _internal_code();
}
inline void CommonResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CommonResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.CommonResponse.code)
}

// string msg = 2;
inline void CommonResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommonResponse::msg() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.CommonResponse.msg)
  return _internal_msg();
}
inline void CommonResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.CommonResponse.msg)
}
inline std::string* CommonResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:AppGlobalSetting.CommonResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& CommonResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void CommonResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommonResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppGlobalSetting.CommonResponse.msg)
}
inline void CommonResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppGlobalSetting.CommonResponse.msg)
}
inline void CommonResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppGlobalSetting.CommonResponse.msg)
}
inline std::string* CommonResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonResponse::release_msg() {
  // @@protoc_insertion_point(field_release:AppGlobalSetting.CommonResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:AppGlobalSetting.CommonResponse.msg)
}

// bool b_sync_resp = 3;
inline void CommonResponse::clear_b_sync_resp() {
  b_sync_resp_ = false;
}
inline bool CommonResponse::_internal_b_sync_resp() const {
  return b_sync_resp_;
}
inline bool CommonResponse::b_sync_resp() const {
  // @@protoc_insertion_point(field_get:AppGlobalSetting.CommonResponse.b_sync_resp)
  return _internal_b_sync_resp();
}
inline void CommonResponse::_internal_set_b_sync_resp(bool value) {
  
  b_sync_resp_ = value;
}
inline void CommonResponse::set_b_sync_resp(bool value) {
  _internal_set_b_sync_resp(value);
  // @@protoc_insertion_point(field_set:AppGlobalSetting.CommonResponse.b_sync_resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AppGlobalSetting

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_appGlobalSetting_2eproto
