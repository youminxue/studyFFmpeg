// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: davWaveSetting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_davWaveSetting_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_davWaveSetting_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_davWaveSetting_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_davWaveSetting_2eproto;
namespace DavWaveSetting {
class AudioDecodeSetting;
class AudioDecodeSettingDefaultTypeInternal;
extern AudioDecodeSettingDefaultTypeInternal _AudioDecodeSetting_default_instance_;
class AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse;
class AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUseDefaultTypeInternal;
extern AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUseDefaultTypeInternal _AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_;
class AudioEncodeSetting;
class AudioEncodeSettingDefaultTypeInternal;
extern AudioEncodeSettingDefaultTypeInternal _AudioEncodeSetting_default_instance_;
class AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse;
class AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUseDefaultTypeInternal;
extern AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUseDefaultTypeInternal _AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_;
class AudioFilterSetting;
class AudioFilterSettingDefaultTypeInternal;
extern AudioFilterSettingDefaultTypeInternal _AudioFilterSetting_default_instance_;
class AudioMixSetting;
class AudioMixSettingDefaultTypeInternal;
extern AudioMixSettingDefaultTypeInternal _AudioMixSetting_default_instance_;
class DemuxSetting;
class DemuxSettingDefaultTypeInternal;
extern DemuxSettingDefaultTypeInternal _DemuxSetting_default_instance_;
class DemuxSetting_AvdictDemuxOptionEntry_DoNotUse;
class DemuxSetting_AvdictDemuxOptionEntry_DoNotUseDefaultTypeInternal;
extern DemuxSetting_AvdictDemuxOptionEntry_DoNotUseDefaultTypeInternal _DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_default_instance_;
class MuxSetting;
class MuxSettingDefaultTypeInternal;
extern MuxSettingDefaultTypeInternal _MuxSetting_default_instance_;
class MuxSetting_AvdictMuxOptionEntry_DoNotUse;
class MuxSetting_AvdictMuxOptionEntry_DoNotUseDefaultTypeInternal;
extern MuxSetting_AvdictMuxOptionEntry_DoNotUseDefaultTypeInternal _MuxSetting_AvdictMuxOptionEntry_DoNotUse_default_instance_;
class VideoCellCoordinate;
class VideoCellCoordinateDefaultTypeInternal;
extern VideoCellCoordinateDefaultTypeInternal _VideoCellCoordinate_default_instance_;
class VideoDecodeSetting;
class VideoDecodeSettingDefaultTypeInternal;
extern VideoDecodeSettingDefaultTypeInternal _VideoDecodeSetting_default_instance_;
class VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse;
class VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUseDefaultTypeInternal;
extern VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUseDefaultTypeInternal _VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_;
class VideoEncodeSetting;
class VideoEncodeSettingDefaultTypeInternal;
extern VideoEncodeSettingDefaultTypeInternal _VideoEncodeSetting_default_instance_;
class VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse;
class VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUseDefaultTypeInternal;
extern VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUseDefaultTypeInternal _VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_;
class VideoFilterSetting;
class VideoFilterSettingDefaultTypeInternal;
extern VideoFilterSettingDefaultTypeInternal _VideoFilterSetting_default_instance_;
class VideoMixLayoutUpdate;
class VideoMixLayoutUpdateDefaultTypeInternal;
extern VideoMixLayoutUpdateDefaultTypeInternal _VideoMixLayoutUpdate_default_instance_;
class VideoMixSetting;
class VideoMixSettingDefaultTypeInternal;
extern VideoMixSettingDefaultTypeInternal _VideoMixSetting_default_instance_;
}  // namespace DavWaveSetting
PROTOBUF_NAMESPACE_OPEN
template<> ::DavWaveSetting::AudioDecodeSetting* Arena::CreateMaybeMessage<::DavWaveSetting::AudioDecodeSetting>(Arena*);
template<> ::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse* Arena::CreateMaybeMessage<::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse>(Arena*);
template<> ::DavWaveSetting::AudioEncodeSetting* Arena::CreateMaybeMessage<::DavWaveSetting::AudioEncodeSetting>(Arena*);
template<> ::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse* Arena::CreateMaybeMessage<::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse>(Arena*);
template<> ::DavWaveSetting::AudioFilterSetting* Arena::CreateMaybeMessage<::DavWaveSetting::AudioFilterSetting>(Arena*);
template<> ::DavWaveSetting::AudioMixSetting* Arena::CreateMaybeMessage<::DavWaveSetting::AudioMixSetting>(Arena*);
template<> ::DavWaveSetting::DemuxSetting* Arena::CreateMaybeMessage<::DavWaveSetting::DemuxSetting>(Arena*);
template<> ::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse* Arena::CreateMaybeMessage<::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse>(Arena*);
template<> ::DavWaveSetting::MuxSetting* Arena::CreateMaybeMessage<::DavWaveSetting::MuxSetting>(Arena*);
template<> ::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse* Arena::CreateMaybeMessage<::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse>(Arena*);
template<> ::DavWaveSetting::VideoCellCoordinate* Arena::CreateMaybeMessage<::DavWaveSetting::VideoCellCoordinate>(Arena*);
template<> ::DavWaveSetting::VideoDecodeSetting* Arena::CreateMaybeMessage<::DavWaveSetting::VideoDecodeSetting>(Arena*);
template<> ::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse* Arena::CreateMaybeMessage<::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse>(Arena*);
template<> ::DavWaveSetting::VideoEncodeSetting* Arena::CreateMaybeMessage<::DavWaveSetting::VideoEncodeSetting>(Arena*);
template<> ::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse* Arena::CreateMaybeMessage<::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse>(Arena*);
template<> ::DavWaveSetting::VideoFilterSetting* Arena::CreateMaybeMessage<::DavWaveSetting::VideoFilterSetting>(Arena*);
template<> ::DavWaveSetting::VideoMixLayoutUpdate* Arena::CreateMaybeMessage<::DavWaveSetting::VideoMixLayoutUpdate>(Arena*);
template<> ::DavWaveSetting::VideoMixSetting* Arena::CreateMaybeMessage<::DavWaveSetting::VideoMixSetting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DavWaveSetting {

enum EVideoMixLayout : int {
  eLayoutAuto = 0,
  eLayoutUnknown = -1,
  eSingle_1 = 1,
  eHorizonal_2 = 2,
  eLeft1SmallRight1Big_2 = 3,
  eLeft2SmallRight1Big_3 = 4,
  eEqual_4 = 5,
  eLeft1BigRight3Small_4 = 6,
  eRow2Col3_6 = 7,
  eEqual_9 = 8,
  eRow3Col4_12 = 9,
  eEqual_16 = 10,
  eEqual_25 = 11,
  eEqual_36 = 12,
  eLayoutSpecific = 13,
  EVideoMixLayout_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EVideoMixLayout_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EVideoMixLayout_IsValid(int value);
constexpr EVideoMixLayout EVideoMixLayout_MIN = eLayoutUnknown;
constexpr EVideoMixLayout EVideoMixLayout_MAX = eLayoutSpecific;
constexpr int EVideoMixLayout_ARRAYSIZE = EVideoMixLayout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EVideoMixLayout_descriptor();
template<typename T>
inline const std::string& EVideoMixLayout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EVideoMixLayout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EVideoMixLayout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EVideoMixLayout_descriptor(), enum_t_value);
}
inline bool EVideoMixLayout_Parse(
    const std::string& name, EVideoMixLayout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EVideoMixLayout>(
    EVideoMixLayout_descriptor(), name, value);
}
// ===================================================================

class DemuxSetting_AvdictDemuxOptionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DemuxSetting_AvdictDemuxOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DemuxSetting_AvdictDemuxOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DemuxSetting_AvdictDemuxOptionEntry_DoNotUse();
  DemuxSetting_AvdictDemuxOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DemuxSetting_AvdictDemuxOptionEntry_DoNotUse& other);
  static const DemuxSetting_AvdictDemuxOptionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DemuxSetting_AvdictDemuxOptionEntry_DoNotUse*>(&_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.DemuxSetting.AvdictDemuxOptionEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.DemuxSetting.AvdictDemuxOptionEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class DemuxSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.DemuxSetting) */ {
 public:
  DemuxSetting();
  virtual ~DemuxSetting();

  DemuxSetting(const DemuxSetting& from);
  DemuxSetting(DemuxSetting&& from) noexcept
    : DemuxSetting() {
    *this = ::std::move(from);
  }

  inline DemuxSetting& operator=(const DemuxSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemuxSetting& operator=(DemuxSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemuxSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemuxSetting* internal_default_instance() {
    return reinterpret_cast<const DemuxSetting*>(
               &_DemuxSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DemuxSetting& a, DemuxSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(DemuxSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemuxSetting* New() const final {
    return CreateMaybeMessage<DemuxSetting>(nullptr);
  }

  DemuxSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemuxSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemuxSetting& from);
  void MergeFrom(const DemuxSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemuxSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.DemuxSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAvdictDemuxOptionFieldNumber = 5,
    kDemuxTypeFieldNumber = 1,
    kInputFpsEmulateFieldNumber = 2,
    kReadTimeoutFieldNumber = 3,
    kReconnectTimesFieldNumber = 4,
  };
  // map<string, string> avdict_demux_option = 5;
  int avdict_demux_option_size() const;
  private:
  int _internal_avdict_demux_option_size() const;
  public:
  void clear_avdict_demux_option();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_avdict_demux_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_avdict_demux_option();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      avdict_demux_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_avdict_demux_option();

  // string demux_type = 1;
  void clear_demux_type();
  const std::string& demux_type() const;
  void set_demux_type(const std::string& value);
  void set_demux_type(std::string&& value);
  void set_demux_type(const char* value);
  void set_demux_type(const char* value, size_t size);
  std::string* mutable_demux_type();
  std::string* release_demux_type();
  void set_allocated_demux_type(std::string* demux_type);
  private:
  const std::string& _internal_demux_type() const;
  void _internal_set_demux_type(const std::string& value);
  std::string* _internal_mutable_demux_type();
  public:

  // bool input_fps_emulate = 2;
  void clear_input_fps_emulate();
  bool input_fps_emulate() const;
  void set_input_fps_emulate(bool value);
  private:
  bool _internal_input_fps_emulate() const;
  void _internal_set_input_fps_emulate(bool value);
  public:

  // int32 read_timeout = 3;
  void clear_read_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 read_timeout() const;
  void set_read_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_read_timeout() const;
  void _internal_set_read_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reconnect_times = 4;
  void clear_reconnect_times();
  ::PROTOBUF_NAMESPACE_ID::int32 reconnect_times() const;
  void set_reconnect_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reconnect_times() const;
  void _internal_set_reconnect_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.DemuxSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DemuxSetting_AvdictDemuxOptionEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > avdict_demux_option_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr demux_type_;
  bool input_fps_emulate_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 reconnect_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class VideoFilterSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.VideoFilterSetting) */ {
 public:
  VideoFilterSetting();
  virtual ~VideoFilterSetting();

  VideoFilterSetting(const VideoFilterSetting& from);
  VideoFilterSetting(VideoFilterSetting&& from) noexcept
    : VideoFilterSetting() {
    *this = ::std::move(from);
  }

  inline VideoFilterSetting& operator=(const VideoFilterSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoFilterSetting& operator=(VideoFilterSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoFilterSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoFilterSetting* internal_default_instance() {
    return reinterpret_cast<const VideoFilterSetting*>(
               &_VideoFilterSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VideoFilterSetting& a, VideoFilterSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoFilterSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoFilterSetting* New() const final {
    return CreateMaybeMessage<VideoFilterSetting>(nullptr);
  }

  VideoFilterSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoFilterSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoFilterSetting& from);
  void MergeFrom(const VideoFilterSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoFilterSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.VideoFilterSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterTypeFieldNumber = 1,
    kFilterArgFieldNumber = 2,
  };
  // string filter_type = 1;
  void clear_filter_type();
  const std::string& filter_type() const;
  void set_filter_type(const std::string& value);
  void set_filter_type(std::string&& value);
  void set_filter_type(const char* value);
  void set_filter_type(const char* value, size_t size);
  std::string* mutable_filter_type();
  std::string* release_filter_type();
  void set_allocated_filter_type(std::string* filter_type);
  private:
  const std::string& _internal_filter_type() const;
  void _internal_set_filter_type(const std::string& value);
  std::string* _internal_mutable_filter_type();
  public:

  // string filter_arg = 2;
  void clear_filter_arg();
  const std::string& filter_arg() const;
  void set_filter_arg(const std::string& value);
  void set_filter_arg(std::string&& value);
  void set_filter_arg(const char* value);
  void set_filter_arg(const char* value, size_t size);
  std::string* mutable_filter_arg();
  std::string* release_filter_arg();
  void set_allocated_filter_arg(std::string* filter_arg);
  private:
  const std::string& _internal_filter_arg() const;
  void _internal_set_filter_arg(const std::string& value);
  std::string* _internal_mutable_filter_arg();
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.VideoFilterSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class AudioFilterSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.AudioFilterSetting) */ {
 public:
  AudioFilterSetting();
  virtual ~AudioFilterSetting();

  AudioFilterSetting(const AudioFilterSetting& from);
  AudioFilterSetting(AudioFilterSetting&& from) noexcept
    : AudioFilterSetting() {
    *this = ::std::move(from);
  }

  inline AudioFilterSetting& operator=(const AudioFilterSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioFilterSetting& operator=(AudioFilterSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioFilterSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioFilterSetting* internal_default_instance() {
    return reinterpret_cast<const AudioFilterSetting*>(
               &_AudioFilterSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AudioFilterSetting& a, AudioFilterSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioFilterSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioFilterSetting* New() const final {
    return CreateMaybeMessage<AudioFilterSetting>(nullptr);
  }

  AudioFilterSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioFilterSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioFilterSetting& from);
  void MergeFrom(const AudioFilterSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioFilterSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.AudioFilterSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterTypeFieldNumber = 1,
    kFilterArgFieldNumber = 2,
  };
  // string filter_type = 1;
  void clear_filter_type();
  const std::string& filter_type() const;
  void set_filter_type(const std::string& value);
  void set_filter_type(std::string&& value);
  void set_filter_type(const char* value);
  void set_filter_type(const char* value, size_t size);
  std::string* mutable_filter_type();
  std::string* release_filter_type();
  void set_allocated_filter_type(std::string* filter_type);
  private:
  const std::string& _internal_filter_type() const;
  void _internal_set_filter_type(const std::string& value);
  std::string* _internal_mutable_filter_type();
  public:

  // string filter_arg = 2;
  void clear_filter_arg();
  const std::string& filter_arg() const;
  void set_filter_arg(const std::string& value);
  void set_filter_arg(std::string&& value);
  void set_filter_arg(const char* value);
  void set_filter_arg(const char* value, size_t size);
  std::string* mutable_filter_arg();
  std::string* release_filter_arg();
  void set_allocated_filter_arg(std::string* filter_arg);
  private:
  const std::string& _internal_filter_arg() const;
  void _internal_set_filter_arg(const std::string& value);
  std::string* _internal_mutable_filter_arg();
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.AudioFilterSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse();
  VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse& other);
  static const VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse*>(&_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.VideoDecodeSetting.AvdictDecodeOptionEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.VideoDecodeSetting.AvdictDecodeOptionEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class VideoDecodeSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.VideoDecodeSetting) */ {
 public:
  VideoDecodeSetting();
  virtual ~VideoDecodeSetting();

  VideoDecodeSetting(const VideoDecodeSetting& from);
  VideoDecodeSetting(VideoDecodeSetting&& from) noexcept
    : VideoDecodeSetting() {
    *this = ::std::move(from);
  }

  inline VideoDecodeSetting& operator=(const VideoDecodeSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoDecodeSetting& operator=(VideoDecodeSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoDecodeSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoDecodeSetting* internal_default_instance() {
    return reinterpret_cast<const VideoDecodeSetting*>(
               &_VideoDecodeSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VideoDecodeSetting& a, VideoDecodeSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoDecodeSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoDecodeSetting* New() const final {
    return CreateMaybeMessage<VideoDecodeSetting>(nullptr);
  }

  VideoDecodeSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoDecodeSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoDecodeSetting& from);
  void MergeFrom(const VideoDecodeSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoDecodeSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.VideoDecodeSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAvdictDecodeOptionFieldNumber = 2,
    kDecodeTypeFieldNumber = 1,
  };
  // map<string, string> avdict_decode_option = 2;
  int avdict_decode_option_size() const;
  private:
  int _internal_avdict_decode_option_size() const;
  public:
  void clear_avdict_decode_option();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_avdict_decode_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_avdict_decode_option();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      avdict_decode_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_avdict_decode_option();

  // string decode_type = 1;
  void clear_decode_type();
  const std::string& decode_type() const;
  void set_decode_type(const std::string& value);
  void set_decode_type(std::string&& value);
  void set_decode_type(const char* value);
  void set_decode_type(const char* value, size_t size);
  std::string* mutable_decode_type();
  std::string* release_decode_type();
  void set_allocated_decode_type(std::string* decode_type);
  private:
  const std::string& _internal_decode_type() const;
  void _internal_set_decode_type(const std::string& value);
  std::string* _internal_mutable_decode_type();
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.VideoDecodeSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > avdict_decode_option_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decode_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse();
  AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse& other);
  static const AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse*>(&_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.AudioDecodeSetting.AvdictDecodeOptionEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.AudioDecodeSetting.AvdictDecodeOptionEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class AudioDecodeSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.AudioDecodeSetting) */ {
 public:
  AudioDecodeSetting();
  virtual ~AudioDecodeSetting();

  AudioDecodeSetting(const AudioDecodeSetting& from);
  AudioDecodeSetting(AudioDecodeSetting&& from) noexcept
    : AudioDecodeSetting() {
    *this = ::std::move(from);
  }

  inline AudioDecodeSetting& operator=(const AudioDecodeSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioDecodeSetting& operator=(AudioDecodeSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioDecodeSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioDecodeSetting* internal_default_instance() {
    return reinterpret_cast<const AudioDecodeSetting*>(
               &_AudioDecodeSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AudioDecodeSetting& a, AudioDecodeSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioDecodeSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioDecodeSetting* New() const final {
    return CreateMaybeMessage<AudioDecodeSetting>(nullptr);
  }

  AudioDecodeSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioDecodeSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioDecodeSetting& from);
  void MergeFrom(const AudioDecodeSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioDecodeSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.AudioDecodeSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAvdictDecodeOptionFieldNumber = 2,
    kDecodeTypeFieldNumber = 1,
  };
  // map<string, string> avdict_decode_option = 2;
  int avdict_decode_option_size() const;
  private:
  int _internal_avdict_decode_option_size() const;
  public:
  void clear_avdict_decode_option();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_avdict_decode_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_avdict_decode_option();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      avdict_decode_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_avdict_decode_option();

  // string decode_type = 1;
  void clear_decode_type();
  const std::string& decode_type() const;
  void set_decode_type(const std::string& value);
  void set_decode_type(std::string&& value);
  void set_decode_type(const char* value);
  void set_decode_type(const char* value, size_t size);
  std::string* mutable_decode_type();
  std::string* release_decode_type();
  void set_allocated_decode_type(std::string* decode_type);
  private:
  const std::string& _internal_decode_type() const;
  void _internal_set_decode_type(const std::string& value);
  std::string* _internal_mutable_decode_type();
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.AudioDecodeSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > avdict_decode_option_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decode_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class VideoMixSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.VideoMixSetting) */ {
 public:
  VideoMixSetting();
  virtual ~VideoMixSetting();

  VideoMixSetting(const VideoMixSetting& from);
  VideoMixSetting(VideoMixSetting&& from) noexcept
    : VideoMixSetting() {
    *this = ::std::move(from);
  }

  inline VideoMixSetting& operator=(const VideoMixSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoMixSetting& operator=(VideoMixSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoMixSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoMixSetting* internal_default_instance() {
    return reinterpret_cast<const VideoMixSetting*>(
               &_VideoMixSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VideoMixSetting& a, VideoMixSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoMixSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoMixSetting* New() const final {
    return CreateMaybeMessage<VideoMixSetting>(nullptr);
  }

  VideoMixSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoMixSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoMixSetting& from);
  void MergeFrom(const VideoMixSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoMixSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.VideoMixSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroudImagePathFieldNumber = 18,
    kLayoutInfoFieldNumber = 19,
    kBRegeneratePtsFieldNumber = 1,
    kBStartAfterAllJoinFieldNumber = 2,
    kBQuitIfNoInputFieldNumber = 3,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kFpsNumFieldNumber = 12,
    kFpsDenFieldNumber = 13,
    kMarginFieldNumber = 14,
    kFilletRadiusFieldNumber = 17,
    kBorderWidthFieldNumber = 15,
    kBorderColorFieldNumber = 16,
  };
  // string backgroud_image_path = 18;
  void clear_backgroud_image_path();
  const std::string& backgroud_image_path() const;
  void set_backgroud_image_path(const std::string& value);
  void set_backgroud_image_path(std::string&& value);
  void set_backgroud_image_path(const char* value);
  void set_backgroud_image_path(const char* value, size_t size);
  std::string* mutable_backgroud_image_path();
  std::string* release_backgroud_image_path();
  void set_allocated_backgroud_image_path(std::string* backgroud_image_path);
  private:
  const std::string& _internal_backgroud_image_path() const;
  void _internal_set_backgroud_image_path(const std::string& value);
  std::string* _internal_mutable_backgroud_image_path();
  public:

  // .DavWaveSetting.VideoMixLayoutUpdate layout_info = 19;
  bool has_layout_info() const;
  private:
  bool _internal_has_layout_info() const;
  public:
  void clear_layout_info();
  const ::DavWaveSetting::VideoMixLayoutUpdate& layout_info() const;
  ::DavWaveSetting::VideoMixLayoutUpdate* release_layout_info();
  ::DavWaveSetting::VideoMixLayoutUpdate* mutable_layout_info();
  void set_allocated_layout_info(::DavWaveSetting::VideoMixLayoutUpdate* layout_info);
  private:
  const ::DavWaveSetting::VideoMixLayoutUpdate& _internal_layout_info() const;
  ::DavWaveSetting::VideoMixLayoutUpdate* _internal_mutable_layout_info();
  public:

  // bool b_regenerate_pts = 1;
  void clear_b_regenerate_pts();
  bool b_regenerate_pts() const;
  void set_b_regenerate_pts(bool value);
  private:
  bool _internal_b_regenerate_pts() const;
  void _internal_set_b_regenerate_pts(bool value);
  public:

  // bool b_start_after_all_join = 2;
  void clear_b_start_after_all_join();
  bool b_start_after_all_join() const;
  void set_b_start_after_all_join(bool value);
  private:
  bool _internal_b_start_after_all_join() const;
  void _internal_set_b_start_after_all_join(bool value);
  public:

  // bool b_quit_if_no_input = 3;
  void clear_b_quit_if_no_input();
  bool b_quit_if_no_input() const;
  void set_b_quit_if_no_input(bool value);
  private:
  bool _internal_b_quit_if_no_input() const;
  void _internal_set_b_quit_if_no_input(bool value);
  public:

  // int32 width = 10;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 11;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fps_num = 12;
  void clear_fps_num();
  ::PROTOBUF_NAMESPACE_ID::int32 fps_num() const;
  void set_fps_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fps_num() const;
  void _internal_set_fps_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fps_den = 13;
  void clear_fps_den();
  ::PROTOBUF_NAMESPACE_ID::int32 fps_den() const;
  void set_fps_den(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fps_den() const;
  void _internal_set_fps_den(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 margin = 14;
  void clear_margin();
  ::PROTOBUF_NAMESPACE_ID::int32 margin() const;
  void set_margin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_margin() const;
  void _internal_set_margin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fillet_radius = 17;
  void clear_fillet_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 fillet_radius() const;
  void set_fillet_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fillet_radius() const;
  void _internal_set_fillet_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 border_width = 15;
  void clear_border_width();
  ::PROTOBUF_NAMESPACE_ID::int32 border_width() const;
  void set_border_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_border_width() const;
  void _internal_set_border_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 border_color = 16;
  void clear_border_color();
  ::PROTOBUF_NAMESPACE_ID::int32 border_color() const;
  void set_border_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_border_color() const;
  void _internal_set_border_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.VideoMixSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backgroud_image_path_;
  ::DavWaveSetting::VideoMixLayoutUpdate* layout_info_;
  bool b_regenerate_pts_;
  bool b_start_after_all_join_;
  bool b_quit_if_no_input_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 fps_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 fps_den_;
  ::PROTOBUF_NAMESPACE_ID::int32 margin_;
  ::PROTOBUF_NAMESPACE_ID::int32 fillet_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 border_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 border_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class AudioMixSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.AudioMixSetting) */ {
 public:
  AudioMixSetting();
  virtual ~AudioMixSetting();

  AudioMixSetting(const AudioMixSetting& from);
  AudioMixSetting(AudioMixSetting&& from) noexcept
    : AudioMixSetting() {
    *this = ::std::move(from);
  }

  inline AudioMixSetting& operator=(const AudioMixSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioMixSetting& operator=(AudioMixSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioMixSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioMixSetting* internal_default_instance() {
    return reinterpret_cast<const AudioMixSetting*>(
               &_AudioMixSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AudioMixSetting& a, AudioMixSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioMixSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioMixSetting* New() const final {
    return CreateMaybeMessage<AudioMixSetting>(nullptr);
  }

  AudioMixSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioMixSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioMixSetting& from);
  void MergeFrom(const AudioMixSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioMixSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.AudioMixSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameSizeFieldNumber = 1,
    kBMuteAtStartFieldNumber = 2,
  };
  // int32 frame_size = 1;
  void clear_frame_size();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_size() const;
  void set_frame_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_size() const;
  void _internal_set_frame_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool b_mute_at_start = 2;
  void clear_b_mute_at_start();
  bool b_mute_at_start() const;
  void set_b_mute_at_start(bool value);
  private:
  bool _internal_b_mute_at_start() const;
  void _internal_set_b_mute_at_start(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.AudioMixSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_size_;
  bool b_mute_at_start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse();
  VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse& other);
  static const VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse*>(&_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.VideoEncodeSetting.AvdictEncodeOptionEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.VideoEncodeSetting.AvdictEncodeOptionEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class VideoEncodeSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.VideoEncodeSetting) */ {
 public:
  VideoEncodeSetting();
  virtual ~VideoEncodeSetting();

  VideoEncodeSetting(const VideoEncodeSetting& from);
  VideoEncodeSetting(VideoEncodeSetting&& from) noexcept
    : VideoEncodeSetting() {
    *this = ::std::move(from);
  }

  inline VideoEncodeSetting& operator=(const VideoEncodeSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoEncodeSetting& operator=(VideoEncodeSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoEncodeSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoEncodeSetting* internal_default_instance() {
    return reinterpret_cast<const VideoEncodeSetting*>(
               &_VideoEncodeSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VideoEncodeSetting& a, VideoEncodeSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoEncodeSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoEncodeSetting* New() const final {
    return CreateMaybeMessage<VideoEncodeSetting>(nullptr);
  }

  VideoEncodeSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoEncodeSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoEncodeSetting& from);
  void MergeFrom(const VideoEncodeSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoEncodeSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.VideoEncodeSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAvdictEncodeOptionFieldNumber = 5,
    kEncodeTypeFieldNumber = 1,
    kCodecNameFieldNumber = 2,
    kFpsNumFieldNumber = 3,
    kFpsDenFieldNumber = 4,
  };
  // map<string, string> avdict_encode_option = 5;
  int avdict_encode_option_size() const;
  private:
  int _internal_avdict_encode_option_size() const;
  public:
  void clear_avdict_encode_option();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_avdict_encode_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_avdict_encode_option();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      avdict_encode_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_avdict_encode_option();

  // string encode_type = 1;
  void clear_encode_type();
  const std::string& encode_type() const;
  void set_encode_type(const std::string& value);
  void set_encode_type(std::string&& value);
  void set_encode_type(const char* value);
  void set_encode_type(const char* value, size_t size);
  std::string* mutable_encode_type();
  std::string* release_encode_type();
  void set_allocated_encode_type(std::string* encode_type);
  private:
  const std::string& _internal_encode_type() const;
  void _internal_set_encode_type(const std::string& value);
  std::string* _internal_mutable_encode_type();
  public:

  // string codec_name = 2;
  void clear_codec_name();
  const std::string& codec_name() const;
  void set_codec_name(const std::string& value);
  void set_codec_name(std::string&& value);
  void set_codec_name(const char* value);
  void set_codec_name(const char* value, size_t size);
  std::string* mutable_codec_name();
  std::string* release_codec_name();
  void set_allocated_codec_name(std::string* codec_name);
  private:
  const std::string& _internal_codec_name() const;
  void _internal_set_codec_name(const std::string& value);
  std::string* _internal_mutable_codec_name();
  public:

  // int32 fps_num = 3;
  void clear_fps_num();
  ::PROTOBUF_NAMESPACE_ID::int32 fps_num() const;
  void set_fps_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fps_num() const;
  void _internal_set_fps_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fps_den = 4;
  void clear_fps_den();
  ::PROTOBUF_NAMESPACE_ID::int32 fps_den() const;
  void set_fps_den(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fps_den() const;
  void _internal_set_fps_den(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.VideoEncodeSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > avdict_encode_option_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encode_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 fps_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 fps_den_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse();
  AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse& other);
  static const AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse*>(&_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.AudioEncodeSetting.AvdictEncodeOptionEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.AudioEncodeSetting.AvdictEncodeOptionEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class AudioEncodeSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.AudioEncodeSetting) */ {
 public:
  AudioEncodeSetting();
  virtual ~AudioEncodeSetting();

  AudioEncodeSetting(const AudioEncodeSetting& from);
  AudioEncodeSetting(AudioEncodeSetting&& from) noexcept
    : AudioEncodeSetting() {
    *this = ::std::move(from);
  }

  inline AudioEncodeSetting& operator=(const AudioEncodeSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioEncodeSetting& operator=(AudioEncodeSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioEncodeSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioEncodeSetting* internal_default_instance() {
    return reinterpret_cast<const AudioEncodeSetting*>(
               &_AudioEncodeSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AudioEncodeSetting& a, AudioEncodeSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioEncodeSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioEncodeSetting* New() const final {
    return CreateMaybeMessage<AudioEncodeSetting>(nullptr);
  }

  AudioEncodeSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioEncodeSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioEncodeSetting& from);
  void MergeFrom(const AudioEncodeSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioEncodeSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.AudioEncodeSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAvdictEncodeOptionFieldNumber = 3,
    kEncodeTypeFieldNumber = 1,
    kCodecNameFieldNumber = 2,
  };
  // map<string, string> avdict_encode_option = 3;
  int avdict_encode_option_size() const;
  private:
  int _internal_avdict_encode_option_size() const;
  public:
  void clear_avdict_encode_option();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_avdict_encode_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_avdict_encode_option();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      avdict_encode_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_avdict_encode_option();

  // string encode_type = 1;
  void clear_encode_type();
  const std::string& encode_type() const;
  void set_encode_type(const std::string& value);
  void set_encode_type(std::string&& value);
  void set_encode_type(const char* value);
  void set_encode_type(const char* value, size_t size);
  std::string* mutable_encode_type();
  std::string* release_encode_type();
  void set_allocated_encode_type(std::string* encode_type);
  private:
  const std::string& _internal_encode_type() const;
  void _internal_set_encode_type(const std::string& value);
  std::string* _internal_mutable_encode_type();
  public:

  // string codec_name = 2;
  void clear_codec_name();
  const std::string& codec_name() const;
  void set_codec_name(const std::string& value);
  void set_codec_name(std::string&& value);
  void set_codec_name(const char* value);
  void set_codec_name(const char* value, size_t size);
  std::string* mutable_codec_name();
  std::string* release_codec_name();
  void set_allocated_codec_name(std::string* codec_name);
  private:
  const std::string& _internal_codec_name() const;
  void _internal_set_codec_name(const std::string& value);
  std::string* _internal_mutable_codec_name();
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.AudioEncodeSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > avdict_encode_option_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encode_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class MuxSetting_AvdictMuxOptionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MuxSetting_AvdictMuxOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MuxSetting_AvdictMuxOptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  MuxSetting_AvdictMuxOptionEntry_DoNotUse();
  MuxSetting_AvdictMuxOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MuxSetting_AvdictMuxOptionEntry_DoNotUse& other);
  static const MuxSetting_AvdictMuxOptionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MuxSetting_AvdictMuxOptionEntry_DoNotUse*>(&_MuxSetting_AvdictMuxOptionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.MuxSetting.AvdictMuxOptionEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DavWaveSetting.MuxSetting.AvdictMuxOptionEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class MuxSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.MuxSetting) */ {
 public:
  MuxSetting();
  virtual ~MuxSetting();

  MuxSetting(const MuxSetting& from);
  MuxSetting(MuxSetting&& from) noexcept
    : MuxSetting() {
    *this = ::std::move(from);
  }

  inline MuxSetting& operator=(const MuxSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuxSetting& operator=(MuxSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MuxSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MuxSetting* internal_default_instance() {
    return reinterpret_cast<const MuxSetting*>(
               &_MuxSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MuxSetting& a, MuxSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(MuxSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MuxSetting* New() const final {
    return CreateMaybeMessage<MuxSetting>(nullptr);
  }

  MuxSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MuxSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MuxSetting& from);
  void MergeFrom(const MuxSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuxSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.MuxSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAvdictMuxOptionFieldNumber = 3,
    kMuxTypeFieldNumber = 1,
    kMuxFmtFieldNumber = 2,
  };
  // map<string, string> avdict_mux_option = 3;
  int avdict_mux_option_size() const;
  private:
  int _internal_avdict_mux_option_size() const;
  public:
  void clear_avdict_mux_option();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_avdict_mux_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_avdict_mux_option();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      avdict_mux_option() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_avdict_mux_option();

  // string mux_type = 1;
  void clear_mux_type();
  const std::string& mux_type() const;
  void set_mux_type(const std::string& value);
  void set_mux_type(std::string&& value);
  void set_mux_type(const char* value);
  void set_mux_type(const char* value, size_t size);
  std::string* mutable_mux_type();
  std::string* release_mux_type();
  void set_allocated_mux_type(std::string* mux_type);
  private:
  const std::string& _internal_mux_type() const;
  void _internal_set_mux_type(const std::string& value);
  std::string* _internal_mutable_mux_type();
  public:

  // string mux_fmt = 2;
  void clear_mux_fmt();
  const std::string& mux_fmt() const;
  void set_mux_fmt(const std::string& value);
  void set_mux_fmt(std::string&& value);
  void set_mux_fmt(const char* value);
  void set_mux_fmt(const char* value, size_t size);
  std::string* mutable_mux_fmt();
  std::string* release_mux_fmt();
  void set_allocated_mux_fmt(std::string* mux_fmt);
  private:
  const std::string& _internal_mux_fmt() const;
  void _internal_set_mux_fmt(const std::string& value);
  std::string* _internal_mutable_mux_fmt();
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.MuxSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MuxSetting_AvdictMuxOptionEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > avdict_mux_option_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mux_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mux_fmt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class VideoMixLayoutUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.VideoMixLayoutUpdate) */ {
 public:
  VideoMixLayoutUpdate();
  virtual ~VideoMixLayoutUpdate();

  VideoMixLayoutUpdate(const VideoMixLayoutUpdate& from);
  VideoMixLayoutUpdate(VideoMixLayoutUpdate&& from) noexcept
    : VideoMixLayoutUpdate() {
    *this = ::std::move(from);
  }

  inline VideoMixLayoutUpdate& operator=(const VideoMixLayoutUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoMixLayoutUpdate& operator=(VideoMixLayoutUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoMixLayoutUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoMixLayoutUpdate* internal_default_instance() {
    return reinterpret_cast<const VideoMixLayoutUpdate*>(
               &_VideoMixLayoutUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VideoMixLayoutUpdate& a, VideoMixLayoutUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoMixLayoutUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoMixLayoutUpdate* New() const final {
    return CreateMaybeMessage<VideoMixLayoutUpdate>(nullptr);
  }

  VideoMixLayoutUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoMixLayoutUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoMixLayoutUpdate& from);
  void MergeFrom(const VideoMixLayoutUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoMixLayoutUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.VideoMixLayoutUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 2,
    kLayoutFieldNumber = 1,
  };
  // repeated .DavWaveSetting.VideoCellCoordinate cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::DavWaveSetting::VideoCellCoordinate* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::VideoCellCoordinate >*
      mutable_cells();
  private:
  const ::DavWaveSetting::VideoCellCoordinate& _internal_cells(int index) const;
  ::DavWaveSetting::VideoCellCoordinate* _internal_add_cells();
  public:
  const ::DavWaveSetting::VideoCellCoordinate& cells(int index) const;
  ::DavWaveSetting::VideoCellCoordinate* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::VideoCellCoordinate >&
      cells() const;

  // .DavWaveSetting.EVideoMixLayout layout = 1;
  void clear_layout();
  ::DavWaveSetting::EVideoMixLayout layout() const;
  void set_layout(::DavWaveSetting::EVideoMixLayout value);
  private:
  ::DavWaveSetting::EVideoMixLayout _internal_layout() const;
  void _internal_set_layout(::DavWaveSetting::EVideoMixLayout value);
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.VideoMixLayoutUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::VideoCellCoordinate > cells_;
  int layout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// -------------------------------------------------------------------

class VideoCellCoordinate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DavWaveSetting.VideoCellCoordinate) */ {
 public:
  VideoCellCoordinate();
  virtual ~VideoCellCoordinate();

  VideoCellCoordinate(const VideoCellCoordinate& from);
  VideoCellCoordinate(VideoCellCoordinate&& from) noexcept
    : VideoCellCoordinate() {
    *this = ::std::move(from);
  }

  inline VideoCellCoordinate& operator=(const VideoCellCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoCellCoordinate& operator=(VideoCellCoordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoCellCoordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoCellCoordinate* internal_default_instance() {
    return reinterpret_cast<const VideoCellCoordinate*>(
               &_VideoCellCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VideoCellCoordinate& a, VideoCellCoordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoCellCoordinate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoCellCoordinate* New() const final {
    return CreateMaybeMessage<VideoCellCoordinate>(nullptr);
  }

  VideoCellCoordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoCellCoordinate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoCellCoordinate& from);
  void MergeFrom(const VideoCellCoordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoCellCoordinate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DavWaveSetting.VideoCellCoordinate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_davWaveSetting_2eproto);
    return ::descriptor_table_davWaveSetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
    kLayerFieldNumber = 5,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 w = 3;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 h = 4;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 layer = 5;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer() const;
  void _internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DavWaveSetting.VideoCellCoordinate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_davWaveSetting_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DemuxSetting

// string demux_type = 1;
inline void DemuxSetting::clear_demux_type() {
  demux_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DemuxSetting::demux_type() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.DemuxSetting.demux_type)
  return _internal_demux_type();
}
inline void DemuxSetting::set_demux_type(const std::string& value) {
  _internal_set_demux_type(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.DemuxSetting.demux_type)
}
inline std::string* DemuxSetting::mutable_demux_type() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.DemuxSetting.demux_type)
  return _internal_mutable_demux_type();
}
inline const std::string& DemuxSetting::_internal_demux_type() const {
  return demux_type_.GetNoArena();
}
inline void DemuxSetting::_internal_set_demux_type(const std::string& value) {
  
  demux_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DemuxSetting::set_demux_type(std::string&& value) {
  
  demux_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.DemuxSetting.demux_type)
}
inline void DemuxSetting::set_demux_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  demux_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.DemuxSetting.demux_type)
}
inline void DemuxSetting::set_demux_type(const char* value, size_t size) {
  
  demux_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.DemuxSetting.demux_type)
}
inline std::string* DemuxSetting::_internal_mutable_demux_type() {
  
  return demux_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DemuxSetting::release_demux_type() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.DemuxSetting.demux_type)
  
  return demux_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DemuxSetting::set_allocated_demux_type(std::string* demux_type) {
  if (demux_type != nullptr) {
    
  } else {
    
  }
  demux_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), demux_type);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.DemuxSetting.demux_type)
}

// bool input_fps_emulate = 2;
inline void DemuxSetting::clear_input_fps_emulate() {
  input_fps_emulate_ = false;
}
inline bool DemuxSetting::_internal_input_fps_emulate() const {
  return input_fps_emulate_;
}
inline bool DemuxSetting::input_fps_emulate() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.DemuxSetting.input_fps_emulate)
  return _internal_input_fps_emulate();
}
inline void DemuxSetting::_internal_set_input_fps_emulate(bool value) {
  
  input_fps_emulate_ = value;
}
inline void DemuxSetting::set_input_fps_emulate(bool value) {
  _internal_set_input_fps_emulate(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.DemuxSetting.input_fps_emulate)
}

// int32 read_timeout = 3;
inline void DemuxSetting::clear_read_timeout() {
  read_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemuxSetting::_internal_read_timeout() const {
  return read_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemuxSetting::read_timeout() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.DemuxSetting.read_timeout)
  return _internal_read_timeout();
}
inline void DemuxSetting::_internal_set_read_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_timeout_ = value;
}
inline void DemuxSetting::set_read_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_read_timeout(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.DemuxSetting.read_timeout)
}

// int32 reconnect_times = 4;
inline void DemuxSetting::clear_reconnect_times() {
  reconnect_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemuxSetting::_internal_reconnect_times() const {
  return reconnect_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemuxSetting::reconnect_times() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.DemuxSetting.reconnect_times)
  return _internal_reconnect_times();
}
inline void DemuxSetting::_internal_set_reconnect_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reconnect_times_ = value;
}
inline void DemuxSetting::set_reconnect_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reconnect_times(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.DemuxSetting.reconnect_times)
}

// map<string, string> avdict_demux_option = 5;
inline int DemuxSetting::_internal_avdict_demux_option_size() const {
  return avdict_demux_option_.size();
}
inline int DemuxSetting::avdict_demux_option_size() const {
  return _internal_avdict_demux_option_size();
}
inline void DemuxSetting::clear_avdict_demux_option() {
  avdict_demux_option_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DemuxSetting::_internal_avdict_demux_option() const {
  return avdict_demux_option_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DemuxSetting::avdict_demux_option() const {
  // @@protoc_insertion_point(field_map:DavWaveSetting.DemuxSetting.avdict_demux_option)
  return _internal_avdict_demux_option();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DemuxSetting::_internal_mutable_avdict_demux_option() {
  return avdict_demux_option_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DemuxSetting::mutable_avdict_demux_option() {
  // @@protoc_insertion_point(field_mutable_map:DavWaveSetting.DemuxSetting.avdict_demux_option)
  return _internal_mutable_avdict_demux_option();
}

// -------------------------------------------------------------------

// VideoFilterSetting

// string filter_type = 1;
inline void VideoFilterSetting::clear_filter_type() {
  filter_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoFilterSetting::filter_type() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoFilterSetting.filter_type)
  return _internal_filter_type();
}
inline void VideoFilterSetting::set_filter_type(const std::string& value) {
  _internal_set_filter_type(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoFilterSetting.filter_type)
}
inline std::string* VideoFilterSetting::mutable_filter_type() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.VideoFilterSetting.filter_type)
  return _internal_mutable_filter_type();
}
inline const std::string& VideoFilterSetting::_internal_filter_type() const {
  return filter_type_.GetNoArena();
}
inline void VideoFilterSetting::_internal_set_filter_type(const std::string& value) {
  
  filter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoFilterSetting::set_filter_type(std::string&& value) {
  
  filter_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.VideoFilterSetting.filter_type)
}
inline void VideoFilterSetting::set_filter_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.VideoFilterSetting.filter_type)
}
inline void VideoFilterSetting::set_filter_type(const char* value, size_t size) {
  
  filter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.VideoFilterSetting.filter_type)
}
inline std::string* VideoFilterSetting::_internal_mutable_filter_type() {
  
  return filter_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoFilterSetting::release_filter_type() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.VideoFilterSetting.filter_type)
  
  return filter_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFilterSetting::set_allocated_filter_type(std::string* filter_type) {
  if (filter_type != nullptr) {
    
  } else {
    
  }
  filter_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_type);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.VideoFilterSetting.filter_type)
}

// string filter_arg = 2;
inline void VideoFilterSetting::clear_filter_arg() {
  filter_arg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoFilterSetting::filter_arg() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoFilterSetting.filter_arg)
  return _internal_filter_arg();
}
inline void VideoFilterSetting::set_filter_arg(const std::string& value) {
  _internal_set_filter_arg(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoFilterSetting.filter_arg)
}
inline std::string* VideoFilterSetting::mutable_filter_arg() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.VideoFilterSetting.filter_arg)
  return _internal_mutable_filter_arg();
}
inline const std::string& VideoFilterSetting::_internal_filter_arg() const {
  return filter_arg_.GetNoArena();
}
inline void VideoFilterSetting::_internal_set_filter_arg(const std::string& value) {
  
  filter_arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoFilterSetting::set_filter_arg(std::string&& value) {
  
  filter_arg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.VideoFilterSetting.filter_arg)
}
inline void VideoFilterSetting::set_filter_arg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.VideoFilterSetting.filter_arg)
}
inline void VideoFilterSetting::set_filter_arg(const char* value, size_t size) {
  
  filter_arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.VideoFilterSetting.filter_arg)
}
inline std::string* VideoFilterSetting::_internal_mutable_filter_arg() {
  
  return filter_arg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoFilterSetting::release_filter_arg() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.VideoFilterSetting.filter_arg)
  
  return filter_arg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFilterSetting::set_allocated_filter_arg(std::string* filter_arg) {
  if (filter_arg != nullptr) {
    
  } else {
    
  }
  filter_arg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_arg);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.VideoFilterSetting.filter_arg)
}

// -------------------------------------------------------------------

// AudioFilterSetting

// string filter_type = 1;
inline void AudioFilterSetting::clear_filter_type() {
  filter_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AudioFilterSetting::filter_type() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.AudioFilterSetting.filter_type)
  return _internal_filter_type();
}
inline void AudioFilterSetting::set_filter_type(const std::string& value) {
  _internal_set_filter_type(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.AudioFilterSetting.filter_type)
}
inline std::string* AudioFilterSetting::mutable_filter_type() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.AudioFilterSetting.filter_type)
  return _internal_mutable_filter_type();
}
inline const std::string& AudioFilterSetting::_internal_filter_type() const {
  return filter_type_.GetNoArena();
}
inline void AudioFilterSetting::_internal_set_filter_type(const std::string& value) {
  
  filter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AudioFilterSetting::set_filter_type(std::string&& value) {
  
  filter_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.AudioFilterSetting.filter_type)
}
inline void AudioFilterSetting::set_filter_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.AudioFilterSetting.filter_type)
}
inline void AudioFilterSetting::set_filter_type(const char* value, size_t size) {
  
  filter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.AudioFilterSetting.filter_type)
}
inline std::string* AudioFilterSetting::_internal_mutable_filter_type() {
  
  return filter_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioFilterSetting::release_filter_type() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.AudioFilterSetting.filter_type)
  
  return filter_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioFilterSetting::set_allocated_filter_type(std::string* filter_type) {
  if (filter_type != nullptr) {
    
  } else {
    
  }
  filter_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_type);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.AudioFilterSetting.filter_type)
}

// string filter_arg = 2;
inline void AudioFilterSetting::clear_filter_arg() {
  filter_arg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AudioFilterSetting::filter_arg() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.AudioFilterSetting.filter_arg)
  return _internal_filter_arg();
}
inline void AudioFilterSetting::set_filter_arg(const std::string& value) {
  _internal_set_filter_arg(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.AudioFilterSetting.filter_arg)
}
inline std::string* AudioFilterSetting::mutable_filter_arg() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.AudioFilterSetting.filter_arg)
  return _internal_mutable_filter_arg();
}
inline const std::string& AudioFilterSetting::_internal_filter_arg() const {
  return filter_arg_.GetNoArena();
}
inline void AudioFilterSetting::_internal_set_filter_arg(const std::string& value) {
  
  filter_arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AudioFilterSetting::set_filter_arg(std::string&& value) {
  
  filter_arg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.AudioFilterSetting.filter_arg)
}
inline void AudioFilterSetting::set_filter_arg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.AudioFilterSetting.filter_arg)
}
inline void AudioFilterSetting::set_filter_arg(const char* value, size_t size) {
  
  filter_arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.AudioFilterSetting.filter_arg)
}
inline std::string* AudioFilterSetting::_internal_mutable_filter_arg() {
  
  return filter_arg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioFilterSetting::release_filter_arg() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.AudioFilterSetting.filter_arg)
  
  return filter_arg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioFilterSetting::set_allocated_filter_arg(std::string* filter_arg) {
  if (filter_arg != nullptr) {
    
  } else {
    
  }
  filter_arg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_arg);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.AudioFilterSetting.filter_arg)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VideoDecodeSetting

// string decode_type = 1;
inline void VideoDecodeSetting::clear_decode_type() {
  decode_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoDecodeSetting::decode_type() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoDecodeSetting.decode_type)
  return _internal_decode_type();
}
inline void VideoDecodeSetting::set_decode_type(const std::string& value) {
  _internal_set_decode_type(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoDecodeSetting.decode_type)
}
inline std::string* VideoDecodeSetting::mutable_decode_type() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.VideoDecodeSetting.decode_type)
  return _internal_mutable_decode_type();
}
inline const std::string& VideoDecodeSetting::_internal_decode_type() const {
  return decode_type_.GetNoArena();
}
inline void VideoDecodeSetting::_internal_set_decode_type(const std::string& value) {
  
  decode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoDecodeSetting::set_decode_type(std::string&& value) {
  
  decode_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.VideoDecodeSetting.decode_type)
}
inline void VideoDecodeSetting::set_decode_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  decode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.VideoDecodeSetting.decode_type)
}
inline void VideoDecodeSetting::set_decode_type(const char* value, size_t size) {
  
  decode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.VideoDecodeSetting.decode_type)
}
inline std::string* VideoDecodeSetting::_internal_mutable_decode_type() {
  
  return decode_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoDecodeSetting::release_decode_type() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.VideoDecodeSetting.decode_type)
  
  return decode_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoDecodeSetting::set_allocated_decode_type(std::string* decode_type) {
  if (decode_type != nullptr) {
    
  } else {
    
  }
  decode_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decode_type);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.VideoDecodeSetting.decode_type)
}

// map<string, string> avdict_decode_option = 2;
inline int VideoDecodeSetting::_internal_avdict_decode_option_size() const {
  return avdict_decode_option_.size();
}
inline int VideoDecodeSetting::avdict_decode_option_size() const {
  return _internal_avdict_decode_option_size();
}
inline void VideoDecodeSetting::clear_avdict_decode_option() {
  avdict_decode_option_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VideoDecodeSetting::_internal_avdict_decode_option() const {
  return avdict_decode_option_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VideoDecodeSetting::avdict_decode_option() const {
  // @@protoc_insertion_point(field_map:DavWaveSetting.VideoDecodeSetting.avdict_decode_option)
  return _internal_avdict_decode_option();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VideoDecodeSetting::_internal_mutable_avdict_decode_option() {
  return avdict_decode_option_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VideoDecodeSetting::mutable_avdict_decode_option() {
  // @@protoc_insertion_point(field_mutable_map:DavWaveSetting.VideoDecodeSetting.avdict_decode_option)
  return _internal_mutable_avdict_decode_option();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AudioDecodeSetting

// string decode_type = 1;
inline void AudioDecodeSetting::clear_decode_type() {
  decode_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AudioDecodeSetting::decode_type() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.AudioDecodeSetting.decode_type)
  return _internal_decode_type();
}
inline void AudioDecodeSetting::set_decode_type(const std::string& value) {
  _internal_set_decode_type(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.AudioDecodeSetting.decode_type)
}
inline std::string* AudioDecodeSetting::mutable_decode_type() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.AudioDecodeSetting.decode_type)
  return _internal_mutable_decode_type();
}
inline const std::string& AudioDecodeSetting::_internal_decode_type() const {
  return decode_type_.GetNoArena();
}
inline void AudioDecodeSetting::_internal_set_decode_type(const std::string& value) {
  
  decode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AudioDecodeSetting::set_decode_type(std::string&& value) {
  
  decode_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.AudioDecodeSetting.decode_type)
}
inline void AudioDecodeSetting::set_decode_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  decode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.AudioDecodeSetting.decode_type)
}
inline void AudioDecodeSetting::set_decode_type(const char* value, size_t size) {
  
  decode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.AudioDecodeSetting.decode_type)
}
inline std::string* AudioDecodeSetting::_internal_mutable_decode_type() {
  
  return decode_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioDecodeSetting::release_decode_type() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.AudioDecodeSetting.decode_type)
  
  return decode_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioDecodeSetting::set_allocated_decode_type(std::string* decode_type) {
  if (decode_type != nullptr) {
    
  } else {
    
  }
  decode_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decode_type);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.AudioDecodeSetting.decode_type)
}

// map<string, string> avdict_decode_option = 2;
inline int AudioDecodeSetting::_internal_avdict_decode_option_size() const {
  return avdict_decode_option_.size();
}
inline int AudioDecodeSetting::avdict_decode_option_size() const {
  return _internal_avdict_decode_option_size();
}
inline void AudioDecodeSetting::clear_avdict_decode_option() {
  avdict_decode_option_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AudioDecodeSetting::_internal_avdict_decode_option() const {
  return avdict_decode_option_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AudioDecodeSetting::avdict_decode_option() const {
  // @@protoc_insertion_point(field_map:DavWaveSetting.AudioDecodeSetting.avdict_decode_option)
  return _internal_avdict_decode_option();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AudioDecodeSetting::_internal_mutable_avdict_decode_option() {
  return avdict_decode_option_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AudioDecodeSetting::mutable_avdict_decode_option() {
  // @@protoc_insertion_point(field_mutable_map:DavWaveSetting.AudioDecodeSetting.avdict_decode_option)
  return _internal_mutable_avdict_decode_option();
}

// -------------------------------------------------------------------

// VideoMixSetting

// bool b_regenerate_pts = 1;
inline void VideoMixSetting::clear_b_regenerate_pts() {
  b_regenerate_pts_ = false;
}
inline bool VideoMixSetting::_internal_b_regenerate_pts() const {
  return b_regenerate_pts_;
}
inline bool VideoMixSetting::b_regenerate_pts() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.b_regenerate_pts)
  return _internal_b_regenerate_pts();
}
inline void VideoMixSetting::_internal_set_b_regenerate_pts(bool value) {
  
  b_regenerate_pts_ = value;
}
inline void VideoMixSetting::set_b_regenerate_pts(bool value) {
  _internal_set_b_regenerate_pts(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.b_regenerate_pts)
}

// bool b_start_after_all_join = 2;
inline void VideoMixSetting::clear_b_start_after_all_join() {
  b_start_after_all_join_ = false;
}
inline bool VideoMixSetting::_internal_b_start_after_all_join() const {
  return b_start_after_all_join_;
}
inline bool VideoMixSetting::b_start_after_all_join() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.b_start_after_all_join)
  return _internal_b_start_after_all_join();
}
inline void VideoMixSetting::_internal_set_b_start_after_all_join(bool value) {
  
  b_start_after_all_join_ = value;
}
inline void VideoMixSetting::set_b_start_after_all_join(bool value) {
  _internal_set_b_start_after_all_join(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.b_start_after_all_join)
}

// bool b_quit_if_no_input = 3;
inline void VideoMixSetting::clear_b_quit_if_no_input() {
  b_quit_if_no_input_ = false;
}
inline bool VideoMixSetting::_internal_b_quit_if_no_input() const {
  return b_quit_if_no_input_;
}
inline bool VideoMixSetting::b_quit_if_no_input() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.b_quit_if_no_input)
  return _internal_b_quit_if_no_input();
}
inline void VideoMixSetting::_internal_set_b_quit_if_no_input(bool value) {
  
  b_quit_if_no_input_ = value;
}
inline void VideoMixSetting::set_b_quit_if_no_input(bool value) {
  _internal_set_b_quit_if_no_input(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.b_quit_if_no_input)
}

// int32 width = 10;
inline void VideoMixSetting::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::width() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.width)
  return _internal_width();
}
inline void VideoMixSetting::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void VideoMixSetting::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.width)
}

// int32 height = 11;
inline void VideoMixSetting::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::height() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.height)
  return _internal_height();
}
inline void VideoMixSetting::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void VideoMixSetting::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.height)
}

// int32 fps_num = 12;
inline void VideoMixSetting::clear_fps_num() {
  fps_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::_internal_fps_num() const {
  return fps_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::fps_num() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.fps_num)
  return _internal_fps_num();
}
inline void VideoMixSetting::_internal_set_fps_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fps_num_ = value;
}
inline void VideoMixSetting::set_fps_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fps_num(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.fps_num)
}

// int32 fps_den = 13;
inline void VideoMixSetting::clear_fps_den() {
  fps_den_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::_internal_fps_den() const {
  return fps_den_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::fps_den() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.fps_den)
  return _internal_fps_den();
}
inline void VideoMixSetting::_internal_set_fps_den(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fps_den_ = value;
}
inline void VideoMixSetting::set_fps_den(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fps_den(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.fps_den)
}

// int32 margin = 14;
inline void VideoMixSetting::clear_margin() {
  margin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::_internal_margin() const {
  return margin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::margin() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.margin)
  return _internal_margin();
}
inline void VideoMixSetting::_internal_set_margin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  margin_ = value;
}
inline void VideoMixSetting::set_margin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.margin)
}

// int32 border_width = 15;
inline void VideoMixSetting::clear_border_width() {
  border_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::_internal_border_width() const {
  return border_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::border_width() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.border_width)
  return _internal_border_width();
}
inline void VideoMixSetting::_internal_set_border_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  border_width_ = value;
}
inline void VideoMixSetting::set_border_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_border_width(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.border_width)
}

// int32 border_color = 16;
inline void VideoMixSetting::clear_border_color() {
  border_color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::_internal_border_color() const {
  return border_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::border_color() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.border_color)
  return _internal_border_color();
}
inline void VideoMixSetting::_internal_set_border_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  border_color_ = value;
}
inline void VideoMixSetting::set_border_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_border_color(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.border_color)
}

// int32 fillet_radius = 17;
inline void VideoMixSetting::clear_fillet_radius() {
  fillet_radius_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::_internal_fillet_radius() const {
  return fillet_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoMixSetting::fillet_radius() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.fillet_radius)
  return _internal_fillet_radius();
}
inline void VideoMixSetting::_internal_set_fillet_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fillet_radius_ = value;
}
inline void VideoMixSetting::set_fillet_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fillet_radius(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.fillet_radius)
}

// string backgroud_image_path = 18;
inline void VideoMixSetting::clear_backgroud_image_path() {
  backgroud_image_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoMixSetting::backgroud_image_path() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.backgroud_image_path)
  return _internal_backgroud_image_path();
}
inline void VideoMixSetting::set_backgroud_image_path(const std::string& value) {
  _internal_set_backgroud_image_path(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixSetting.backgroud_image_path)
}
inline std::string* VideoMixSetting::mutable_backgroud_image_path() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.VideoMixSetting.backgroud_image_path)
  return _internal_mutable_backgroud_image_path();
}
inline const std::string& VideoMixSetting::_internal_backgroud_image_path() const {
  return backgroud_image_path_.GetNoArena();
}
inline void VideoMixSetting::_internal_set_backgroud_image_path(const std::string& value) {
  
  backgroud_image_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoMixSetting::set_backgroud_image_path(std::string&& value) {
  
  backgroud_image_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.VideoMixSetting.backgroud_image_path)
}
inline void VideoMixSetting::set_backgroud_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backgroud_image_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.VideoMixSetting.backgroud_image_path)
}
inline void VideoMixSetting::set_backgroud_image_path(const char* value, size_t size) {
  
  backgroud_image_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.VideoMixSetting.backgroud_image_path)
}
inline std::string* VideoMixSetting::_internal_mutable_backgroud_image_path() {
  
  return backgroud_image_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoMixSetting::release_backgroud_image_path() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.VideoMixSetting.backgroud_image_path)
  
  return backgroud_image_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMixSetting::set_allocated_backgroud_image_path(std::string* backgroud_image_path) {
  if (backgroud_image_path != nullptr) {
    
  } else {
    
  }
  backgroud_image_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backgroud_image_path);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.VideoMixSetting.backgroud_image_path)
}

// .DavWaveSetting.VideoMixLayoutUpdate layout_info = 19;
inline bool VideoMixSetting::_internal_has_layout_info() const {
  return this != internal_default_instance() && layout_info_ != nullptr;
}
inline bool VideoMixSetting::has_layout_info() const {
  return _internal_has_layout_info();
}
inline void VideoMixSetting::clear_layout_info() {
  if (GetArenaNoVirtual() == nullptr && layout_info_ != nullptr) {
    delete layout_info_;
  }
  layout_info_ = nullptr;
}
inline const ::DavWaveSetting::VideoMixLayoutUpdate& VideoMixSetting::_internal_layout_info() const {
  const ::DavWaveSetting::VideoMixLayoutUpdate* p = layout_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::VideoMixLayoutUpdate*>(
      &::DavWaveSetting::_VideoMixLayoutUpdate_default_instance_);
}
inline const ::DavWaveSetting::VideoMixLayoutUpdate& VideoMixSetting::layout_info() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixSetting.layout_info)
  return _internal_layout_info();
}
inline ::DavWaveSetting::VideoMixLayoutUpdate* VideoMixSetting::release_layout_info() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.VideoMixSetting.layout_info)
  
  ::DavWaveSetting::VideoMixLayoutUpdate* temp = layout_info_;
  layout_info_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::VideoMixLayoutUpdate* VideoMixSetting::_internal_mutable_layout_info() {
  
  if (layout_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::VideoMixLayoutUpdate>(GetArenaNoVirtual());
    layout_info_ = p;
  }
  return layout_info_;
}
inline ::DavWaveSetting::VideoMixLayoutUpdate* VideoMixSetting::mutable_layout_info() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.VideoMixSetting.layout_info)
  return _internal_mutable_layout_info();
}
inline void VideoMixSetting::set_allocated_layout_info(::DavWaveSetting::VideoMixLayoutUpdate* layout_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete layout_info_;
  }
  if (layout_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layout_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout_info, submessage_arena);
    }
    
  } else {
    
  }
  layout_info_ = layout_info;
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.VideoMixSetting.layout_info)
}

// -------------------------------------------------------------------

// AudioMixSetting

// int32 frame_size = 1;
inline void AudioMixSetting::clear_frame_size() {
  frame_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioMixSetting::_internal_frame_size() const {
  return frame_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioMixSetting::frame_size() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.AudioMixSetting.frame_size)
  return _internal_frame_size();
}
inline void AudioMixSetting::_internal_set_frame_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_size_ = value;
}
inline void AudioMixSetting::set_frame_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_size(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.AudioMixSetting.frame_size)
}

// bool b_mute_at_start = 2;
inline void AudioMixSetting::clear_b_mute_at_start() {
  b_mute_at_start_ = false;
}
inline bool AudioMixSetting::_internal_b_mute_at_start() const {
  return b_mute_at_start_;
}
inline bool AudioMixSetting::b_mute_at_start() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.AudioMixSetting.b_mute_at_start)
  return _internal_b_mute_at_start();
}
inline void AudioMixSetting::_internal_set_b_mute_at_start(bool value) {
  
  b_mute_at_start_ = value;
}
inline void AudioMixSetting::set_b_mute_at_start(bool value) {
  _internal_set_b_mute_at_start(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.AudioMixSetting.b_mute_at_start)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VideoEncodeSetting

// string encode_type = 1;
inline void VideoEncodeSetting::clear_encode_type() {
  encode_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoEncodeSetting::encode_type() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoEncodeSetting.encode_type)
  return _internal_encode_type();
}
inline void VideoEncodeSetting::set_encode_type(const std::string& value) {
  _internal_set_encode_type(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoEncodeSetting.encode_type)
}
inline std::string* VideoEncodeSetting::mutable_encode_type() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.VideoEncodeSetting.encode_type)
  return _internal_mutable_encode_type();
}
inline const std::string& VideoEncodeSetting::_internal_encode_type() const {
  return encode_type_.GetNoArena();
}
inline void VideoEncodeSetting::_internal_set_encode_type(const std::string& value) {
  
  encode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoEncodeSetting::set_encode_type(std::string&& value) {
  
  encode_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.VideoEncodeSetting.encode_type)
}
inline void VideoEncodeSetting::set_encode_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.VideoEncodeSetting.encode_type)
}
inline void VideoEncodeSetting::set_encode_type(const char* value, size_t size) {
  
  encode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.VideoEncodeSetting.encode_type)
}
inline std::string* VideoEncodeSetting::_internal_mutable_encode_type() {
  
  return encode_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoEncodeSetting::release_encode_type() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.VideoEncodeSetting.encode_type)
  
  return encode_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoEncodeSetting::set_allocated_encode_type(std::string* encode_type) {
  if (encode_type != nullptr) {
    
  } else {
    
  }
  encode_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encode_type);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.VideoEncodeSetting.encode_type)
}

// string codec_name = 2;
inline void VideoEncodeSetting::clear_codec_name() {
  codec_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoEncodeSetting::codec_name() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoEncodeSetting.codec_name)
  return _internal_codec_name();
}
inline void VideoEncodeSetting::set_codec_name(const std::string& value) {
  _internal_set_codec_name(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoEncodeSetting.codec_name)
}
inline std::string* VideoEncodeSetting::mutable_codec_name() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.VideoEncodeSetting.codec_name)
  return _internal_mutable_codec_name();
}
inline const std::string& VideoEncodeSetting::_internal_codec_name() const {
  return codec_name_.GetNoArena();
}
inline void VideoEncodeSetting::_internal_set_codec_name(const std::string& value) {
  
  codec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoEncodeSetting::set_codec_name(std::string&& value) {
  
  codec_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.VideoEncodeSetting.codec_name)
}
inline void VideoEncodeSetting::set_codec_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.VideoEncodeSetting.codec_name)
}
inline void VideoEncodeSetting::set_codec_name(const char* value, size_t size) {
  
  codec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.VideoEncodeSetting.codec_name)
}
inline std::string* VideoEncodeSetting::_internal_mutable_codec_name() {
  
  return codec_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoEncodeSetting::release_codec_name() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.VideoEncodeSetting.codec_name)
  
  return codec_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoEncodeSetting::set_allocated_codec_name(std::string* codec_name) {
  if (codec_name != nullptr) {
    
  } else {
    
  }
  codec_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec_name);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.VideoEncodeSetting.codec_name)
}

// int32 fps_num = 3;
inline void VideoEncodeSetting::clear_fps_num() {
  fps_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoEncodeSetting::_internal_fps_num() const {
  return fps_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoEncodeSetting::fps_num() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoEncodeSetting.fps_num)
  return _internal_fps_num();
}
inline void VideoEncodeSetting::_internal_set_fps_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fps_num_ = value;
}
inline void VideoEncodeSetting::set_fps_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fps_num(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoEncodeSetting.fps_num)
}

// int32 fps_den = 4;
inline void VideoEncodeSetting::clear_fps_den() {
  fps_den_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoEncodeSetting::_internal_fps_den() const {
  return fps_den_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoEncodeSetting::fps_den() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoEncodeSetting.fps_den)
  return _internal_fps_den();
}
inline void VideoEncodeSetting::_internal_set_fps_den(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fps_den_ = value;
}
inline void VideoEncodeSetting::set_fps_den(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fps_den(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoEncodeSetting.fps_den)
}

// map<string, string> avdict_encode_option = 5;
inline int VideoEncodeSetting::_internal_avdict_encode_option_size() const {
  return avdict_encode_option_.size();
}
inline int VideoEncodeSetting::avdict_encode_option_size() const {
  return _internal_avdict_encode_option_size();
}
inline void VideoEncodeSetting::clear_avdict_encode_option() {
  avdict_encode_option_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VideoEncodeSetting::_internal_avdict_encode_option() const {
  return avdict_encode_option_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
VideoEncodeSetting::avdict_encode_option() const {
  // @@protoc_insertion_point(field_map:DavWaveSetting.VideoEncodeSetting.avdict_encode_option)
  return _internal_avdict_encode_option();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VideoEncodeSetting::_internal_mutable_avdict_encode_option() {
  return avdict_encode_option_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
VideoEncodeSetting::mutable_avdict_encode_option() {
  // @@protoc_insertion_point(field_mutable_map:DavWaveSetting.VideoEncodeSetting.avdict_encode_option)
  return _internal_mutable_avdict_encode_option();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AudioEncodeSetting

// string encode_type = 1;
inline void AudioEncodeSetting::clear_encode_type() {
  encode_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AudioEncodeSetting::encode_type() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.AudioEncodeSetting.encode_type)
  return _internal_encode_type();
}
inline void AudioEncodeSetting::set_encode_type(const std::string& value) {
  _internal_set_encode_type(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.AudioEncodeSetting.encode_type)
}
inline std::string* AudioEncodeSetting::mutable_encode_type() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.AudioEncodeSetting.encode_type)
  return _internal_mutable_encode_type();
}
inline const std::string& AudioEncodeSetting::_internal_encode_type() const {
  return encode_type_.GetNoArena();
}
inline void AudioEncodeSetting::_internal_set_encode_type(const std::string& value) {
  
  encode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AudioEncodeSetting::set_encode_type(std::string&& value) {
  
  encode_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.AudioEncodeSetting.encode_type)
}
inline void AudioEncodeSetting::set_encode_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.AudioEncodeSetting.encode_type)
}
inline void AudioEncodeSetting::set_encode_type(const char* value, size_t size) {
  
  encode_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.AudioEncodeSetting.encode_type)
}
inline std::string* AudioEncodeSetting::_internal_mutable_encode_type() {
  
  return encode_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioEncodeSetting::release_encode_type() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.AudioEncodeSetting.encode_type)
  
  return encode_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioEncodeSetting::set_allocated_encode_type(std::string* encode_type) {
  if (encode_type != nullptr) {
    
  } else {
    
  }
  encode_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encode_type);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.AudioEncodeSetting.encode_type)
}

// string codec_name = 2;
inline void AudioEncodeSetting::clear_codec_name() {
  codec_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AudioEncodeSetting::codec_name() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.AudioEncodeSetting.codec_name)
  return _internal_codec_name();
}
inline void AudioEncodeSetting::set_codec_name(const std::string& value) {
  _internal_set_codec_name(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.AudioEncodeSetting.codec_name)
}
inline std::string* AudioEncodeSetting::mutable_codec_name() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.AudioEncodeSetting.codec_name)
  return _internal_mutable_codec_name();
}
inline const std::string& AudioEncodeSetting::_internal_codec_name() const {
  return codec_name_.GetNoArena();
}
inline void AudioEncodeSetting::_internal_set_codec_name(const std::string& value) {
  
  codec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AudioEncodeSetting::set_codec_name(std::string&& value) {
  
  codec_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.AudioEncodeSetting.codec_name)
}
inline void AudioEncodeSetting::set_codec_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.AudioEncodeSetting.codec_name)
}
inline void AudioEncodeSetting::set_codec_name(const char* value, size_t size) {
  
  codec_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.AudioEncodeSetting.codec_name)
}
inline std::string* AudioEncodeSetting::_internal_mutable_codec_name() {
  
  return codec_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioEncodeSetting::release_codec_name() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.AudioEncodeSetting.codec_name)
  
  return codec_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioEncodeSetting::set_allocated_codec_name(std::string* codec_name) {
  if (codec_name != nullptr) {
    
  } else {
    
  }
  codec_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec_name);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.AudioEncodeSetting.codec_name)
}

// map<string, string> avdict_encode_option = 3;
inline int AudioEncodeSetting::_internal_avdict_encode_option_size() const {
  return avdict_encode_option_.size();
}
inline int AudioEncodeSetting::avdict_encode_option_size() const {
  return _internal_avdict_encode_option_size();
}
inline void AudioEncodeSetting::clear_avdict_encode_option() {
  avdict_encode_option_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AudioEncodeSetting::_internal_avdict_encode_option() const {
  return avdict_encode_option_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AudioEncodeSetting::avdict_encode_option() const {
  // @@protoc_insertion_point(field_map:DavWaveSetting.AudioEncodeSetting.avdict_encode_option)
  return _internal_avdict_encode_option();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AudioEncodeSetting::_internal_mutable_avdict_encode_option() {
  return avdict_encode_option_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AudioEncodeSetting::mutable_avdict_encode_option() {
  // @@protoc_insertion_point(field_mutable_map:DavWaveSetting.AudioEncodeSetting.avdict_encode_option)
  return _internal_mutable_avdict_encode_option();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MuxSetting

// string mux_type = 1;
inline void MuxSetting::clear_mux_type() {
  mux_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MuxSetting::mux_type() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.MuxSetting.mux_type)
  return _internal_mux_type();
}
inline void MuxSetting::set_mux_type(const std::string& value) {
  _internal_set_mux_type(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.MuxSetting.mux_type)
}
inline std::string* MuxSetting::mutable_mux_type() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.MuxSetting.mux_type)
  return _internal_mutable_mux_type();
}
inline const std::string& MuxSetting::_internal_mux_type() const {
  return mux_type_.GetNoArena();
}
inline void MuxSetting::_internal_set_mux_type(const std::string& value) {
  
  mux_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MuxSetting::set_mux_type(std::string&& value) {
  
  mux_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.MuxSetting.mux_type)
}
inline void MuxSetting::set_mux_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mux_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.MuxSetting.mux_type)
}
inline void MuxSetting::set_mux_type(const char* value, size_t size) {
  
  mux_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.MuxSetting.mux_type)
}
inline std::string* MuxSetting::_internal_mutable_mux_type() {
  
  return mux_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MuxSetting::release_mux_type() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.MuxSetting.mux_type)
  
  return mux_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MuxSetting::set_allocated_mux_type(std::string* mux_type) {
  if (mux_type != nullptr) {
    
  } else {
    
  }
  mux_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mux_type);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.MuxSetting.mux_type)
}

// string mux_fmt = 2;
inline void MuxSetting::clear_mux_fmt() {
  mux_fmt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MuxSetting::mux_fmt() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.MuxSetting.mux_fmt)
  return _internal_mux_fmt();
}
inline void MuxSetting::set_mux_fmt(const std::string& value) {
  _internal_set_mux_fmt(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.MuxSetting.mux_fmt)
}
inline std::string* MuxSetting::mutable_mux_fmt() {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.MuxSetting.mux_fmt)
  return _internal_mutable_mux_fmt();
}
inline const std::string& MuxSetting::_internal_mux_fmt() const {
  return mux_fmt_.GetNoArena();
}
inline void MuxSetting::_internal_set_mux_fmt(const std::string& value) {
  
  mux_fmt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MuxSetting::set_mux_fmt(std::string&& value) {
  
  mux_fmt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DavWaveSetting.MuxSetting.mux_fmt)
}
inline void MuxSetting::set_mux_fmt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mux_fmt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DavWaveSetting.MuxSetting.mux_fmt)
}
inline void MuxSetting::set_mux_fmt(const char* value, size_t size) {
  
  mux_fmt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DavWaveSetting.MuxSetting.mux_fmt)
}
inline std::string* MuxSetting::_internal_mutable_mux_fmt() {
  
  return mux_fmt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MuxSetting::release_mux_fmt() {
  // @@protoc_insertion_point(field_release:DavWaveSetting.MuxSetting.mux_fmt)
  
  return mux_fmt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MuxSetting::set_allocated_mux_fmt(std::string* mux_fmt) {
  if (mux_fmt != nullptr) {
    
  } else {
    
  }
  mux_fmt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mux_fmt);
  // @@protoc_insertion_point(field_set_allocated:DavWaveSetting.MuxSetting.mux_fmt)
}

// map<string, string> avdict_mux_option = 3;
inline int MuxSetting::_internal_avdict_mux_option_size() const {
  return avdict_mux_option_.size();
}
inline int MuxSetting::avdict_mux_option_size() const {
  return _internal_avdict_mux_option_size();
}
inline void MuxSetting::clear_avdict_mux_option() {
  avdict_mux_option_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MuxSetting::_internal_avdict_mux_option() const {
  return avdict_mux_option_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MuxSetting::avdict_mux_option() const {
  // @@protoc_insertion_point(field_map:DavWaveSetting.MuxSetting.avdict_mux_option)
  return _internal_avdict_mux_option();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MuxSetting::_internal_mutable_avdict_mux_option() {
  return avdict_mux_option_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MuxSetting::mutable_avdict_mux_option() {
  // @@protoc_insertion_point(field_mutable_map:DavWaveSetting.MuxSetting.avdict_mux_option)
  return _internal_mutable_avdict_mux_option();
}

// -------------------------------------------------------------------

// VideoMixLayoutUpdate

// .DavWaveSetting.EVideoMixLayout layout = 1;
inline void VideoMixLayoutUpdate::clear_layout() {
  layout_ = 0;
}
inline ::DavWaveSetting::EVideoMixLayout VideoMixLayoutUpdate::_internal_layout() const {
  return static_cast< ::DavWaveSetting::EVideoMixLayout >(layout_);
}
inline ::DavWaveSetting::EVideoMixLayout VideoMixLayoutUpdate::layout() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixLayoutUpdate.layout)
  return _internal_layout();
}
inline void VideoMixLayoutUpdate::_internal_set_layout(::DavWaveSetting::EVideoMixLayout value) {
  
  layout_ = value;
}
inline void VideoMixLayoutUpdate::set_layout(::DavWaveSetting::EVideoMixLayout value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoMixLayoutUpdate.layout)
}

// repeated .DavWaveSetting.VideoCellCoordinate cells = 2;
inline int VideoMixLayoutUpdate::_internal_cells_size() const {
  return cells_.size();
}
inline int VideoMixLayoutUpdate::cells_size() const {
  return _internal_cells_size();
}
inline void VideoMixLayoutUpdate::clear_cells() {
  cells_.Clear();
}
inline ::DavWaveSetting::VideoCellCoordinate* VideoMixLayoutUpdate::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:DavWaveSetting.VideoMixLayoutUpdate.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::VideoCellCoordinate >*
VideoMixLayoutUpdate::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:DavWaveSetting.VideoMixLayoutUpdate.cells)
  return &cells_;
}
inline const ::DavWaveSetting::VideoCellCoordinate& VideoMixLayoutUpdate::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::DavWaveSetting::VideoCellCoordinate& VideoMixLayoutUpdate::cells(int index) const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoMixLayoutUpdate.cells)
  return _internal_cells(index);
}
inline ::DavWaveSetting::VideoCellCoordinate* VideoMixLayoutUpdate::_internal_add_cells() {
  return cells_.Add();
}
inline ::DavWaveSetting::VideoCellCoordinate* VideoMixLayoutUpdate::add_cells() {
  // @@protoc_insertion_point(field_add:DavWaveSetting.VideoMixLayoutUpdate.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DavWaveSetting::VideoCellCoordinate >&
VideoMixLayoutUpdate::cells() const {
  // @@protoc_insertion_point(field_list:DavWaveSetting.VideoMixLayoutUpdate.cells)
  return cells_;
}

// -------------------------------------------------------------------

// VideoCellCoordinate

// int32 x = 1;
inline void VideoCellCoordinate::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::x() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoCellCoordinate.x)
  return _internal_x();
}
inline void VideoCellCoordinate::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void VideoCellCoordinate::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoCellCoordinate.x)
}

// int32 y = 2;
inline void VideoCellCoordinate::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::y() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoCellCoordinate.y)
  return _internal_y();
}
inline void VideoCellCoordinate::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void VideoCellCoordinate::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoCellCoordinate.y)
}

// int32 w = 3;
inline void VideoCellCoordinate::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::w() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoCellCoordinate.w)
  return _internal_w();
}
inline void VideoCellCoordinate::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
}
inline void VideoCellCoordinate::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoCellCoordinate.w)
}

// int32 h = 4;
inline void VideoCellCoordinate::clear_h() {
  h_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::h() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoCellCoordinate.h)
  return _internal_h();
}
inline void VideoCellCoordinate::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  h_ = value;
}
inline void VideoCellCoordinate::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoCellCoordinate.h)
}

// int32 layer = 5;
inline void VideoCellCoordinate::clear_layer() {
  layer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::_internal_layer() const {
  return layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoCellCoordinate::layer() const {
  // @@protoc_insertion_point(field_get:DavWaveSetting.VideoCellCoordinate.layer)
  return _internal_layer();
}
inline void VideoCellCoordinate::_internal_set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_ = value;
}
inline void VideoCellCoordinate::set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:DavWaveSetting.VideoCellCoordinate.layer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DavWaveSetting

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DavWaveSetting::EVideoMixLayout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DavWaveSetting::EVideoMixLayout>() {
  return ::DavWaveSetting::EVideoMixLayout_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_davWaveSetting_2eproto
