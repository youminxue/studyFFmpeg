// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ialRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ialRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ialRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "davWaveSetting.pb.h"
#include "davStreamletSetting.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ialRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ialRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ialRequest_2eproto;
namespace IalRequest {
class AddNewInputStream;
class AddNewInputStreamDefaultTypeInternal;
extern AddNewInputStreamDefaultTypeInternal _AddNewInputStream_default_instance_;
class AddNewOutput;
class AddNewOutputDefaultTypeInternal;
extern AddNewOutputDefaultTypeInternal _AddNewOutput_default_instance_;
class AddOutputSetting;
class AddOutputSettingDefaultTypeInternal;
extern AddOutputSettingDefaultTypeInternal _AddOutputSetting_default_instance_;
class AudioMixMuteUnMute;
class AudioMixMuteUnMuteDefaultTypeInternal;
extern AudioMixMuteUnMuteDefaultTypeInternal _AudioMixMuteUnMute_default_instance_;
class CloseOneInputStream;
class CloseOneInputStreamDefaultTypeInternal;
extern CloseOneInputStreamDefaultTypeInternal _CloseOneInputStream_default_instance_;
class CloseOneOutput;
class CloseOneOutputDefaultTypeInternal;
extern CloseOneOutputDefaultTypeInternal _CloseOneOutput_default_instance_;
class CreateRoom;
class CreateRoomDefaultTypeInternal;
extern CreateRoomDefaultTypeInternal _CreateRoom_default_instance_;
class GetAllInputStreamInfos;
class GetAllInputStreamInfosDefaultTypeInternal;
extern GetAllInputStreamInfosDefaultTypeInternal _GetAllInputStreamInfos_default_instance_;
class GetAllOutputStreamInfos;
class GetAllOutputStreamInfosDefaultTypeInternal;
extern GetAllOutputStreamInfosDefaultTypeInternal _GetAllOutputStreamInfos_default_instance_;
class GetOneInputStreamInfo;
class GetOneInputStreamInfoDefaultTypeInternal;
extern GetOneInputStreamInfoDefaultTypeInternal _GetOneInputStreamInfo_default_instance_;
class GetOneOutputStreamInfo;
class GetOneOutputStreamInfoDefaultTypeInternal;
extern GetOneOutputStreamInfoDefaultTypeInternal _GetOneOutputStreamInfo_default_instance_;
class StreamInfo;
class StreamInfoDefaultTypeInternal;
extern StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
class StreamInfo_StreamInfoEntry_DoNotUse;
class StreamInfo_StreamInfoEntry_DoNotUseDefaultTypeInternal;
extern StreamInfo_StreamInfoEntry_DoNotUseDefaultTypeInternal _StreamInfo_StreamInfoEntry_DoNotUse_default_instance_;
class UpdateInputSetting;
class UpdateInputSettingDefaultTypeInternal;
extern UpdateInputSettingDefaultTypeInternal _UpdateInputSetting_default_instance_;
class UpdateMixSetting;
class UpdateMixSettingDefaultTypeInternal;
extern UpdateMixSettingDefaultTypeInternal _UpdateMixSetting_default_instance_;
class VideoMixChangeLayout;
class VideoMixChangeLayoutDefaultTypeInternal;
extern VideoMixChangeLayoutDefaultTypeInternal _VideoMixChangeLayout_default_instance_;
class VideoMixUpdateBackgroud;
class VideoMixUpdateBackgroudDefaultTypeInternal;
extern VideoMixUpdateBackgroudDefaultTypeInternal _VideoMixUpdateBackgroud_default_instance_;
}  // namespace IalRequest
PROTOBUF_NAMESPACE_OPEN
template<> ::IalRequest::AddNewInputStream* Arena::CreateMaybeMessage<::IalRequest::AddNewInputStream>(Arena*);
template<> ::IalRequest::AddNewOutput* Arena::CreateMaybeMessage<::IalRequest::AddNewOutput>(Arena*);
template<> ::IalRequest::AddOutputSetting* Arena::CreateMaybeMessage<::IalRequest::AddOutputSetting>(Arena*);
template<> ::IalRequest::AudioMixMuteUnMute* Arena::CreateMaybeMessage<::IalRequest::AudioMixMuteUnMute>(Arena*);
template<> ::IalRequest::CloseOneInputStream* Arena::CreateMaybeMessage<::IalRequest::CloseOneInputStream>(Arena*);
template<> ::IalRequest::CloseOneOutput* Arena::CreateMaybeMessage<::IalRequest::CloseOneOutput>(Arena*);
template<> ::IalRequest::CreateRoom* Arena::CreateMaybeMessage<::IalRequest::CreateRoom>(Arena*);
template<> ::IalRequest::GetAllInputStreamInfos* Arena::CreateMaybeMessage<::IalRequest::GetAllInputStreamInfos>(Arena*);
template<> ::IalRequest::GetAllOutputStreamInfos* Arena::CreateMaybeMessage<::IalRequest::GetAllOutputStreamInfos>(Arena*);
template<> ::IalRequest::GetOneInputStreamInfo* Arena::CreateMaybeMessage<::IalRequest::GetOneInputStreamInfo>(Arena*);
template<> ::IalRequest::GetOneOutputStreamInfo* Arena::CreateMaybeMessage<::IalRequest::GetOneOutputStreamInfo>(Arena*);
template<> ::IalRequest::StreamInfo* Arena::CreateMaybeMessage<::IalRequest::StreamInfo>(Arena*);
template<> ::IalRequest::StreamInfo_StreamInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::IalRequest::StreamInfo_StreamInfoEntry_DoNotUse>(Arena*);
template<> ::IalRequest::UpdateInputSetting* Arena::CreateMaybeMessage<::IalRequest::UpdateInputSetting>(Arena*);
template<> ::IalRequest::UpdateMixSetting* Arena::CreateMaybeMessage<::IalRequest::UpdateMixSetting>(Arena*);
template<> ::IalRequest::VideoMixChangeLayout* Arena::CreateMaybeMessage<::IalRequest::VideoMixChangeLayout>(Arena*);
template<> ::IalRequest::VideoMixUpdateBackgroud* Arena::CreateMaybeMessage<::IalRequest::VideoMixUpdateBackgroud>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IalRequest {

// ===================================================================

class CreateRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.CreateRoom) */ {
 public:
  CreateRoom();
  virtual ~CreateRoom();

  CreateRoom(const CreateRoom& from);
  CreateRoom(CreateRoom&& from) noexcept
    : CreateRoom() {
    *this = ::std::move(from);
  }

  inline CreateRoom& operator=(const CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoom& operator=(CreateRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoom* internal_default_instance() {
    return reinterpret_cast<const CreateRoom*>(
               &_CreateRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateRoom& a, CreateRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoom* New() const final {
    return CreateMaybeMessage<CreateRoom>(nullptr);
  }

  CreateRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoom& from);
  void MergeFrom(const CreateRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.CreateRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUrlsFieldNumber = 2,
    kOutputStreamInfosFieldNumber = 4,
    kRoomIdFieldNumber = 1,
    kRoomOutputBaseUrlFieldNumber = 3,
  };
  // repeated string input_urls = 2;
  int input_urls_size() const;
  private:
  int _internal_input_urls_size() const;
  public:
  void clear_input_urls();
  const std::string& input_urls(int index) const;
  std::string* mutable_input_urls(int index);
  void set_input_urls(int index, const std::string& value);
  void set_input_urls(int index, std::string&& value);
  void set_input_urls(int index, const char* value);
  void set_input_urls(int index, const char* value, size_t size);
  std::string* add_input_urls();
  void add_input_urls(const std::string& value);
  void add_input_urls(std::string&& value);
  void add_input_urls(const char* value);
  void add_input_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_urls();
  private:
  const std::string& _internal_input_urls(int index) const;
  std::string* _internal_add_input_urls();
  public:

  // repeated .IalRequest.AddNewOutput output_stream_infos = 4;
  int output_stream_infos_size() const;
  private:
  int _internal_output_stream_infos_size() const;
  public:
  void clear_output_stream_infos();
  ::IalRequest::AddNewOutput* mutable_output_stream_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IalRequest::AddNewOutput >*
      mutable_output_stream_infos();
  private:
  const ::IalRequest::AddNewOutput& _internal_output_stream_infos(int index) const;
  ::IalRequest::AddNewOutput* _internal_add_output_stream_infos();
  public:
  const ::IalRequest::AddNewOutput& output_stream_infos(int index) const;
  ::IalRequest::AddNewOutput* add_output_stream_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IalRequest::AddNewOutput >&
      output_stream_infos() const;

  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  void set_room_id(const std::string& value);
  void set_room_id(std::string&& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  std::string* mutable_room_id();
  std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string room_output_base_url = 3;
  void clear_room_output_base_url();
  const std::string& room_output_base_url() const;
  void set_room_output_base_url(const std::string& value);
  void set_room_output_base_url(std::string&& value);
  void set_room_output_base_url(const char* value);
  void set_room_output_base_url(const char* value, size_t size);
  std::string* mutable_room_output_base_url();
  std::string* release_room_output_base_url();
  void set_allocated_room_output_base_url(std::string* room_output_base_url);
  private:
  const std::string& _internal_room_output_base_url() const;
  void _internal_set_room_output_base_url(const std::string& value);
  std::string* _internal_mutable_room_output_base_url();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.CreateRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_urls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IalRequest::AddNewOutput > output_stream_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_output_base_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class AddNewInputStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.AddNewInputStream) */ {
 public:
  AddNewInputStream();
  virtual ~AddNewInputStream();

  AddNewInputStream(const AddNewInputStream& from);
  AddNewInputStream(AddNewInputStream&& from) noexcept
    : AddNewInputStream() {
    *this = ::std::move(from);
  }

  inline AddNewInputStream& operator=(const AddNewInputStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNewInputStream& operator=(AddNewInputStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNewInputStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNewInputStream* internal_default_instance() {
    return reinterpret_cast<const AddNewInputStream*>(
               &_AddNewInputStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddNewInputStream& a, AddNewInputStream& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNewInputStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNewInputStream* New() const final {
    return CreateMaybeMessage<AddNewInputStream>(nullptr);
  }

  AddNewInputStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNewInputStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNewInputStream& from);
  void MergeFrom(const AddNewInputStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNewInputStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.AddNewInputStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUrlFieldNumber = 1,
    kSpecificSettingFieldNumber = 2,
  };
  // string input_url = 1;
  void clear_input_url();
  const std::string& input_url() const;
  void set_input_url(const std::string& value);
  void set_input_url(std::string&& value);
  void set_input_url(const char* value);
  void set_input_url(const char* value, size_t size);
  std::string* mutable_input_url();
  std::string* release_input_url();
  void set_allocated_input_url(std::string* input_url);
  private:
  const std::string& _internal_input_url() const;
  void _internal_set_input_url(const std::string& value);
  std::string* _internal_mutable_input_url();
  public:

  // .DavStreamletSetting.InputStreamletSetting specific_setting = 2;
  bool has_specific_setting() const;
  private:
  bool _internal_has_specific_setting() const;
  public:
  void clear_specific_setting();
  const ::DavStreamletSetting::InputStreamletSetting& specific_setting() const;
  ::DavStreamletSetting::InputStreamletSetting* release_specific_setting();
  ::DavStreamletSetting::InputStreamletSetting* mutable_specific_setting();
  void set_allocated_specific_setting(::DavStreamletSetting::InputStreamletSetting* specific_setting);
  private:
  const ::DavStreamletSetting::InputStreamletSetting& _internal_specific_setting() const;
  ::DavStreamletSetting::InputStreamletSetting* _internal_mutable_specific_setting();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.AddNewInputStream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_url_;
  ::DavStreamletSetting::InputStreamletSetting* specific_setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class CloseOneInputStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.CloseOneInputStream) */ {
 public:
  CloseOneInputStream();
  virtual ~CloseOneInputStream();

  CloseOneInputStream(const CloseOneInputStream& from);
  CloseOneInputStream(CloseOneInputStream&& from) noexcept
    : CloseOneInputStream() {
    *this = ::std::move(from);
  }

  inline CloseOneInputStream& operator=(const CloseOneInputStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseOneInputStream& operator=(CloseOneInputStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseOneInputStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseOneInputStream* internal_default_instance() {
    return reinterpret_cast<const CloseOneInputStream*>(
               &_CloseOneInputStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloseOneInputStream& a, CloseOneInputStream& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseOneInputStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseOneInputStream* New() const final {
    return CreateMaybeMessage<CloseOneInputStream>(nullptr);
  }

  CloseOneInputStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseOneInputStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseOneInputStream& from);
  void MergeFrom(const CloseOneInputStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseOneInputStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.CloseOneInputStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUrlFieldNumber = 1,
  };
  // string input_url = 1;
  void clear_input_url();
  const std::string& input_url() const;
  void set_input_url(const std::string& value);
  void set_input_url(std::string&& value);
  void set_input_url(const char* value);
  void set_input_url(const char* value, size_t size);
  std::string* mutable_input_url();
  std::string* release_input_url();
  void set_allocated_input_url(std::string* input_url);
  private:
  const std::string& _internal_input_url() const;
  void _internal_set_input_url(const std::string& value);
  std::string* _internal_mutable_input_url();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.CloseOneInputStream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class GetOneInputStreamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.GetOneInputStreamInfo) */ {
 public:
  GetOneInputStreamInfo();
  virtual ~GetOneInputStreamInfo();

  GetOneInputStreamInfo(const GetOneInputStreamInfo& from);
  GetOneInputStreamInfo(GetOneInputStreamInfo&& from) noexcept
    : GetOneInputStreamInfo() {
    *this = ::std::move(from);
  }

  inline GetOneInputStreamInfo& operator=(const GetOneInputStreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneInputStreamInfo& operator=(GetOneInputStreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOneInputStreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOneInputStreamInfo* internal_default_instance() {
    return reinterpret_cast<const GetOneInputStreamInfo*>(
               &_GetOneInputStreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetOneInputStreamInfo& a, GetOneInputStreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneInputStreamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneInputStreamInfo* New() const final {
    return CreateMaybeMessage<GetOneInputStreamInfo>(nullptr);
  }

  GetOneInputStreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneInputStreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOneInputStreamInfo& from);
  void MergeFrom(const GetOneInputStreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneInputStreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.GetOneInputStreamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUrlFieldNumber = 1,
  };
  // string input_url = 1;
  void clear_input_url();
  const std::string& input_url() const;
  void set_input_url(const std::string& value);
  void set_input_url(std::string&& value);
  void set_input_url(const char* value);
  void set_input_url(const char* value, size_t size);
  std::string* mutable_input_url();
  std::string* release_input_url();
  void set_allocated_input_url(std::string* input_url);
  private:
  const std::string& _internal_input_url() const;
  void _internal_set_input_url(const std::string& value);
  std::string* _internal_mutable_input_url();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.GetOneInputStreamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllInputStreamInfos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.GetAllInputStreamInfos) */ {
 public:
  GetAllInputStreamInfos();
  virtual ~GetAllInputStreamInfos();

  GetAllInputStreamInfos(const GetAllInputStreamInfos& from);
  GetAllInputStreamInfos(GetAllInputStreamInfos&& from) noexcept
    : GetAllInputStreamInfos() {
    *this = ::std::move(from);
  }

  inline GetAllInputStreamInfos& operator=(const GetAllInputStreamInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllInputStreamInfos& operator=(GetAllInputStreamInfos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllInputStreamInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllInputStreamInfos* internal_default_instance() {
    return reinterpret_cast<const GetAllInputStreamInfos*>(
               &_GetAllInputStreamInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetAllInputStreamInfos& a, GetAllInputStreamInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllInputStreamInfos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllInputStreamInfos* New() const final {
    return CreateMaybeMessage<GetAllInputStreamInfos>(nullptr);
  }

  GetAllInputStreamInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllInputStreamInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllInputStreamInfos& from);
  void MergeFrom(const GetAllInputStreamInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllInputStreamInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.GetAllInputStreamInfos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 1,
  };
  // string format = 1;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.GetAllInputStreamInfos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class AddNewOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.AddNewOutput) */ {
 public:
  AddNewOutput();
  virtual ~AddNewOutput();

  AddNewOutput(const AddNewOutput& from);
  AddNewOutput(AddNewOutput&& from) noexcept
    : AddNewOutput() {
    *this = ::std::move(from);
  }

  inline AddNewOutput& operator=(const AddNewOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNewOutput& operator=(AddNewOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNewOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNewOutput* internal_default_instance() {
    return reinterpret_cast<const AddNewOutput*>(
               &_AddNewOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddNewOutput& a, AddNewOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNewOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNewOutput* New() const final {
    return CreateMaybeMessage<AddNewOutput>(nullptr);
  }

  AddNewOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNewOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNewOutput& from);
  void MergeFrom(const AddNewOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNewOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.AddNewOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputUrlsFieldNumber = 2,
    kOutputSettingIdFieldNumber = 1,
    kSpecificSettingFieldNumber = 3,
  };
  // repeated string output_urls = 2;
  int output_urls_size() const;
  private:
  int _internal_output_urls_size() const;
  public:
  void clear_output_urls();
  const std::string& output_urls(int index) const;
  std::string* mutable_output_urls(int index);
  void set_output_urls(int index, const std::string& value);
  void set_output_urls(int index, std::string&& value);
  void set_output_urls(int index, const char* value);
  void set_output_urls(int index, const char* value, size_t size);
  std::string* add_output_urls();
  void add_output_urls(const std::string& value);
  void add_output_urls(std::string&& value);
  void add_output_urls(const char* value);
  void add_output_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_urls();
  private:
  const std::string& _internal_output_urls(int index) const;
  std::string* _internal_add_output_urls();
  public:

  // string output_setting_id = 1;
  void clear_output_setting_id();
  const std::string& output_setting_id() const;
  void set_output_setting_id(const std::string& value);
  void set_output_setting_id(std::string&& value);
  void set_output_setting_id(const char* value);
  void set_output_setting_id(const char* value, size_t size);
  std::string* mutable_output_setting_id();
  std::string* release_output_setting_id();
  void set_allocated_output_setting_id(std::string* output_setting_id);
  private:
  const std::string& _internal_output_setting_id() const;
  void _internal_set_output_setting_id(const std::string& value);
  std::string* _internal_mutable_output_setting_id();
  public:

  // .DavStreamletSetting.OutputStreamletSetting specific_setting = 3;
  bool has_specific_setting() const;
  private:
  bool _internal_has_specific_setting() const;
  public:
  void clear_specific_setting();
  const ::DavStreamletSetting::OutputStreamletSetting& specific_setting() const;
  ::DavStreamletSetting::OutputStreamletSetting* release_specific_setting();
  ::DavStreamletSetting::OutputStreamletSetting* mutable_specific_setting();
  void set_allocated_specific_setting(::DavStreamletSetting::OutputStreamletSetting* specific_setting);
  private:
  const ::DavStreamletSetting::OutputStreamletSetting& _internal_specific_setting() const;
  ::DavStreamletSetting::OutputStreamletSetting* _internal_mutable_specific_setting();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.AddNewOutput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_urls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_setting_id_;
  ::DavStreamletSetting::OutputStreamletSetting* specific_setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class CloseOneOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.CloseOneOutput) */ {
 public:
  CloseOneOutput();
  virtual ~CloseOneOutput();

  CloseOneOutput(const CloseOneOutput& from);
  CloseOneOutput(CloseOneOutput&& from) noexcept
    : CloseOneOutput() {
    *this = ::std::move(from);
  }

  inline CloseOneOutput& operator=(const CloseOneOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseOneOutput& operator=(CloseOneOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseOneOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseOneOutput* internal_default_instance() {
    return reinterpret_cast<const CloseOneOutput*>(
               &_CloseOneOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CloseOneOutput& a, CloseOneOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseOneOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseOneOutput* New() const final {
    return CreateMaybeMessage<CloseOneOutput>(nullptr);
  }

  CloseOneOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseOneOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseOneOutput& from);
  void MergeFrom(const CloseOneOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseOneOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.CloseOneOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputSettingIdFieldNumber = 1,
  };
  // string output_setting_id = 1;
  void clear_output_setting_id();
  const std::string& output_setting_id() const;
  void set_output_setting_id(const std::string& value);
  void set_output_setting_id(std::string&& value);
  void set_output_setting_id(const char* value);
  void set_output_setting_id(const char* value, size_t size);
  std::string* mutable_output_setting_id();
  std::string* release_output_setting_id();
  void set_allocated_output_setting_id(std::string* output_setting_id);
  private:
  const std::string& _internal_output_setting_id() const;
  void _internal_set_output_setting_id(const std::string& value);
  std::string* _internal_mutable_output_setting_id();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.CloseOneOutput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_setting_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class GetOneOutputStreamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.GetOneOutputStreamInfo) */ {
 public:
  GetOneOutputStreamInfo();
  virtual ~GetOneOutputStreamInfo();

  GetOneOutputStreamInfo(const GetOneOutputStreamInfo& from);
  GetOneOutputStreamInfo(GetOneOutputStreamInfo&& from) noexcept
    : GetOneOutputStreamInfo() {
    *this = ::std::move(from);
  }

  inline GetOneOutputStreamInfo& operator=(const GetOneOutputStreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneOutputStreamInfo& operator=(GetOneOutputStreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOneOutputStreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOneOutputStreamInfo* internal_default_instance() {
    return reinterpret_cast<const GetOneOutputStreamInfo*>(
               &_GetOneOutputStreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetOneOutputStreamInfo& a, GetOneOutputStreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneOutputStreamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneOutputStreamInfo* New() const final {
    return CreateMaybeMessage<GetOneOutputStreamInfo>(nullptr);
  }

  GetOneOutputStreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneOutputStreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOneOutputStreamInfo& from);
  void MergeFrom(const GetOneOutputStreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneOutputStreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.GetOneOutputStreamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputSettingIdsFieldNumber = 1,
  };
  // string output_setting_ids = 1;
  void clear_output_setting_ids();
  const std::string& output_setting_ids() const;
  void set_output_setting_ids(const std::string& value);
  void set_output_setting_ids(std::string&& value);
  void set_output_setting_ids(const char* value);
  void set_output_setting_ids(const char* value, size_t size);
  std::string* mutable_output_setting_ids();
  std::string* release_output_setting_ids();
  void set_allocated_output_setting_ids(std::string* output_setting_ids);
  private:
  const std::string& _internal_output_setting_ids() const;
  void _internal_set_output_setting_ids(const std::string& value);
  std::string* _internal_mutable_output_setting_ids();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.GetOneOutputStreamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_setting_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllOutputStreamInfos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.GetAllOutputStreamInfos) */ {
 public:
  GetAllOutputStreamInfos();
  virtual ~GetAllOutputStreamInfos();

  GetAllOutputStreamInfos(const GetAllOutputStreamInfos& from);
  GetAllOutputStreamInfos(GetAllOutputStreamInfos&& from) noexcept
    : GetAllOutputStreamInfos() {
    *this = ::std::move(from);
  }

  inline GetAllOutputStreamInfos& operator=(const GetAllOutputStreamInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllOutputStreamInfos& operator=(GetAllOutputStreamInfos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllOutputStreamInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllOutputStreamInfos* internal_default_instance() {
    return reinterpret_cast<const GetAllOutputStreamInfos*>(
               &_GetAllOutputStreamInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetAllOutputStreamInfos& a, GetAllOutputStreamInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllOutputStreamInfos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllOutputStreamInfos* New() const final {
    return CreateMaybeMessage<GetAllOutputStreamInfos>(nullptr);
  }

  GetAllOutputStreamInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllOutputStreamInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllOutputStreamInfos& from);
  void MergeFrom(const GetAllOutputStreamInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllOutputStreamInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.GetAllOutputStreamInfos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 1,
  };
  // string format = 1;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.GetAllOutputStreamInfos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class StreamInfo_StreamInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamInfo_StreamInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamInfo_StreamInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StreamInfo_StreamInfoEntry_DoNotUse();
  StreamInfo_StreamInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamInfo_StreamInfoEntry_DoNotUse& other);
  static const StreamInfo_StreamInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamInfo_StreamInfoEntry_DoNotUse*>(&_StreamInfo_StreamInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "IalRequest.StreamInfo.StreamInfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "IalRequest.StreamInfo.StreamInfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class StreamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.StreamInfo) */ {
 public:
  StreamInfo();
  virtual ~StreamInfo();

  StreamInfo(const StreamInfo& from);
  StreamInfo(StreamInfo&& from) noexcept
    : StreamInfo() {
    *this = ::std::move(from);
  }

  inline StreamInfo& operator=(const StreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamInfo& operator=(StreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamInfo* internal_default_instance() {
    return reinterpret_cast<const StreamInfo*>(
               &_StreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamInfo& a, StreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamInfo* New() const final {
    return CreateMaybeMessage<StreamInfo>(nullptr);
  }

  StreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamInfo& from);
  void MergeFrom(const StreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.StreamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStreamInfoFieldNumber = 2,
    kStreamNameFieldNumber = 1,
  };
  // map<string, string> stream_info = 2;
  int stream_info_size() const;
  private:
  int _internal_stream_info_size() const;
  public:
  void clear_stream_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_stream_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_stream_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      stream_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_stream_info();

  // string stream_name = 1;
  void clear_stream_name();
  const std::string& stream_name() const;
  void set_stream_name(const std::string& value);
  void set_stream_name(std::string&& value);
  void set_stream_name(const char* value);
  void set_stream_name(const char* value, size_t size);
  std::string* mutable_stream_name();
  std::string* release_stream_name();
  void set_allocated_stream_name(std::string* stream_name);
  private:
  const std::string& _internal_stream_name() const;
  void _internal_set_stream_name(const std::string& value);
  std::string* _internal_mutable_stream_name();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.StreamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamInfo_StreamInfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > stream_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class AudioMixMuteUnMute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.AudioMixMuteUnMute) */ {
 public:
  AudioMixMuteUnMute();
  virtual ~AudioMixMuteUnMute();

  AudioMixMuteUnMute(const AudioMixMuteUnMute& from);
  AudioMixMuteUnMute(AudioMixMuteUnMute&& from) noexcept
    : AudioMixMuteUnMute() {
    *this = ::std::move(from);
  }

  inline AudioMixMuteUnMute& operator=(const AudioMixMuteUnMute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioMixMuteUnMute& operator=(AudioMixMuteUnMute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioMixMuteUnMute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioMixMuteUnMute* internal_default_instance() {
    return reinterpret_cast<const AudioMixMuteUnMute*>(
               &_AudioMixMuteUnMute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AudioMixMuteUnMute& a, AudioMixMuteUnMute& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioMixMuteUnMute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioMixMuteUnMute* New() const final {
    return CreateMaybeMessage<AudioMixMuteUnMute>(nullptr);
  }

  AudioMixMuteUnMute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioMixMuteUnMute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioMixMuteUnMute& from);
  void MergeFrom(const AudioMixMuteUnMute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioMixMuteUnMute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.AudioMixMuteUnMute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMuteInputUrlsFieldNumber = 1,
    kUnmuteInputUrlsFieldNumber = 2,
  };
  // repeated string mute_input_urls = 1;
  int mute_input_urls_size() const;
  private:
  int _internal_mute_input_urls_size() const;
  public:
  void clear_mute_input_urls();
  const std::string& mute_input_urls(int index) const;
  std::string* mutable_mute_input_urls(int index);
  void set_mute_input_urls(int index, const std::string& value);
  void set_mute_input_urls(int index, std::string&& value);
  void set_mute_input_urls(int index, const char* value);
  void set_mute_input_urls(int index, const char* value, size_t size);
  std::string* add_mute_input_urls();
  void add_mute_input_urls(const std::string& value);
  void add_mute_input_urls(std::string&& value);
  void add_mute_input_urls(const char* value);
  void add_mute_input_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mute_input_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mute_input_urls();
  private:
  const std::string& _internal_mute_input_urls(int index) const;
  std::string* _internal_add_mute_input_urls();
  public:

  // repeated string unmute_input_urls = 2;
  int unmute_input_urls_size() const;
  private:
  int _internal_unmute_input_urls_size() const;
  public:
  void clear_unmute_input_urls();
  const std::string& unmute_input_urls(int index) const;
  std::string* mutable_unmute_input_urls(int index);
  void set_unmute_input_urls(int index, const std::string& value);
  void set_unmute_input_urls(int index, std::string&& value);
  void set_unmute_input_urls(int index, const char* value);
  void set_unmute_input_urls(int index, const char* value, size_t size);
  std::string* add_unmute_input_urls();
  void add_unmute_input_urls(const std::string& value);
  void add_unmute_input_urls(std::string&& value);
  void add_unmute_input_urls(const char* value);
  void add_unmute_input_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unmute_input_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unmute_input_urls();
  private:
  const std::string& _internal_unmute_input_urls(int index) const;
  std::string* _internal_add_unmute_input_urls();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.AudioMixMuteUnMute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mute_input_urls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unmute_input_urls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class VideoMixChangeLayout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.VideoMixChangeLayout) */ {
 public:
  VideoMixChangeLayout();
  virtual ~VideoMixChangeLayout();

  VideoMixChangeLayout(const VideoMixChangeLayout& from);
  VideoMixChangeLayout(VideoMixChangeLayout&& from) noexcept
    : VideoMixChangeLayout() {
    *this = ::std::move(from);
  }

  inline VideoMixChangeLayout& operator=(const VideoMixChangeLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoMixChangeLayout& operator=(VideoMixChangeLayout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoMixChangeLayout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoMixChangeLayout* internal_default_instance() {
    return reinterpret_cast<const VideoMixChangeLayout*>(
               &_VideoMixChangeLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VideoMixChangeLayout& a, VideoMixChangeLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoMixChangeLayout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoMixChangeLayout* New() const final {
    return CreateMaybeMessage<VideoMixChangeLayout>(nullptr);
  }

  VideoMixChangeLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoMixChangeLayout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoMixChangeLayout& from);
  void MergeFrom(const VideoMixChangeLayout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoMixChangeLayout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.VideoMixChangeLayout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewLayoutFieldNumber = 1,
  };
  // .DavWaveSetting.VideoMixLayoutUpdate new_layout = 1;
  bool has_new_layout() const;
  private:
  bool _internal_has_new_layout() const;
  public:
  void clear_new_layout();
  const ::DavWaveSetting::VideoMixLayoutUpdate& new_layout() const;
  ::DavWaveSetting::VideoMixLayoutUpdate* release_new_layout();
  ::DavWaveSetting::VideoMixLayoutUpdate* mutable_new_layout();
  void set_allocated_new_layout(::DavWaveSetting::VideoMixLayoutUpdate* new_layout);
  private:
  const ::DavWaveSetting::VideoMixLayoutUpdate& _internal_new_layout() const;
  ::DavWaveSetting::VideoMixLayoutUpdate* _internal_mutable_new_layout();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.VideoMixChangeLayout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DavWaveSetting::VideoMixLayoutUpdate* new_layout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class VideoMixUpdateBackgroud :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.VideoMixUpdateBackgroud) */ {
 public:
  VideoMixUpdateBackgroud();
  virtual ~VideoMixUpdateBackgroud();

  VideoMixUpdateBackgroud(const VideoMixUpdateBackgroud& from);
  VideoMixUpdateBackgroud(VideoMixUpdateBackgroud&& from) noexcept
    : VideoMixUpdateBackgroud() {
    *this = ::std::move(from);
  }

  inline VideoMixUpdateBackgroud& operator=(const VideoMixUpdateBackgroud& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoMixUpdateBackgroud& operator=(VideoMixUpdateBackgroud&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoMixUpdateBackgroud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoMixUpdateBackgroud* internal_default_instance() {
    return reinterpret_cast<const VideoMixUpdateBackgroud*>(
               &_VideoMixUpdateBackgroud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VideoMixUpdateBackgroud& a, VideoMixUpdateBackgroud& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoMixUpdateBackgroud* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoMixUpdateBackgroud* New() const final {
    return CreateMaybeMessage<VideoMixUpdateBackgroud>(nullptr);
  }

  VideoMixUpdateBackgroud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoMixUpdateBackgroud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoMixUpdateBackgroud& from);
  void MergeFrom(const VideoMixUpdateBackgroud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoMixUpdateBackgroud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.VideoMixUpdateBackgroud";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroudImageUrlFieldNumber = 1,
  };
  // string backgroud_image_url = 1;
  void clear_backgroud_image_url();
  const std::string& backgroud_image_url() const;
  void set_backgroud_image_url(const std::string& value);
  void set_backgroud_image_url(std::string&& value);
  void set_backgroud_image_url(const char* value);
  void set_backgroud_image_url(const char* value, size_t size);
  std::string* mutable_backgroud_image_url();
  std::string* release_backgroud_image_url();
  void set_allocated_backgroud_image_url(std::string* backgroud_image_url);
  private:
  const std::string& _internal_backgroud_image_url() const;
  void _internal_set_backgroud_image_url(const std::string& value);
  std::string* _internal_mutable_backgroud_image_url();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.VideoMixUpdateBackgroud)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backgroud_image_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateInputSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.UpdateInputSetting) */ {
 public:
  UpdateInputSetting();
  virtual ~UpdateInputSetting();

  UpdateInputSetting(const UpdateInputSetting& from);
  UpdateInputSetting(UpdateInputSetting&& from) noexcept
    : UpdateInputSetting() {
    *this = ::std::move(from);
  }

  inline UpdateInputSetting& operator=(const UpdateInputSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInputSetting& operator=(UpdateInputSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateInputSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateInputSetting* internal_default_instance() {
    return reinterpret_cast<const UpdateInputSetting*>(
               &_UpdateInputSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateInputSetting& a, UpdateInputSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateInputSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateInputSetting* New() const final {
    return CreateMaybeMessage<UpdateInputSetting>(nullptr);
  }

  UpdateInputSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInputSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateInputSetting& from);
  void MergeFrom(const UpdateInputSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInputSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.UpdateInputSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputSettingFieldNumber = 1,
  };
  // .DavStreamletSetting.InputStreamletSetting input_setting = 1;
  bool has_input_setting() const;
  private:
  bool _internal_has_input_setting() const;
  public:
  void clear_input_setting();
  const ::DavStreamletSetting::InputStreamletSetting& input_setting() const;
  ::DavStreamletSetting::InputStreamletSetting* release_input_setting();
  ::DavStreamletSetting::InputStreamletSetting* mutable_input_setting();
  void set_allocated_input_setting(::DavStreamletSetting::InputStreamletSetting* input_setting);
  private:
  const ::DavStreamletSetting::InputStreamletSetting& _internal_input_setting() const;
  ::DavStreamletSetting::InputStreamletSetting* _internal_mutable_input_setting();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.UpdateInputSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DavStreamletSetting::InputStreamletSetting* input_setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class AddOutputSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.AddOutputSetting) */ {
 public:
  AddOutputSetting();
  virtual ~AddOutputSetting();

  AddOutputSetting(const AddOutputSetting& from);
  AddOutputSetting(AddOutputSetting&& from) noexcept
    : AddOutputSetting() {
    *this = ::std::move(from);
  }

  inline AddOutputSetting& operator=(const AddOutputSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOutputSetting& operator=(AddOutputSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOutputSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOutputSetting* internal_default_instance() {
    return reinterpret_cast<const AddOutputSetting*>(
               &_AddOutputSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AddOutputSetting& a, AddOutputSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOutputSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOutputSetting* New() const final {
    return CreateMaybeMessage<AddOutputSetting>(nullptr);
  }

  AddOutputSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOutputSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOutputSetting& from);
  void MergeFrom(const AddOutputSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOutputSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.AddOutputSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputSettingIdFieldNumber = 1,
    kOutputSettingFieldNumber = 2,
  };
  // string output_setting_id = 1;
  void clear_output_setting_id();
  const std::string& output_setting_id() const;
  void set_output_setting_id(const std::string& value);
  void set_output_setting_id(std::string&& value);
  void set_output_setting_id(const char* value);
  void set_output_setting_id(const char* value, size_t size);
  std::string* mutable_output_setting_id();
  std::string* release_output_setting_id();
  void set_allocated_output_setting_id(std::string* output_setting_id);
  private:
  const std::string& _internal_output_setting_id() const;
  void _internal_set_output_setting_id(const std::string& value);
  std::string* _internal_mutable_output_setting_id();
  public:

  // .DavStreamletSetting.OutputStreamletSetting output_setting = 2;
  bool has_output_setting() const;
  private:
  bool _internal_has_output_setting() const;
  public:
  void clear_output_setting();
  const ::DavStreamletSetting::OutputStreamletSetting& output_setting() const;
  ::DavStreamletSetting::OutputStreamletSetting* release_output_setting();
  ::DavStreamletSetting::OutputStreamletSetting* mutable_output_setting();
  void set_allocated_output_setting(::DavStreamletSetting::OutputStreamletSetting* output_setting);
  private:
  const ::DavStreamletSetting::OutputStreamletSetting& _internal_output_setting() const;
  ::DavStreamletSetting::OutputStreamletSetting* _internal_mutable_output_setting();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.AddOutputSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_setting_id_;
  ::DavStreamletSetting::OutputStreamletSetting* output_setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateMixSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IalRequest.UpdateMixSetting) */ {
 public:
  UpdateMixSetting();
  virtual ~UpdateMixSetting();

  UpdateMixSetting(const UpdateMixSetting& from);
  UpdateMixSetting(UpdateMixSetting&& from) noexcept
    : UpdateMixSetting() {
    *this = ::std::move(from);
  }

  inline UpdateMixSetting& operator=(const UpdateMixSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMixSetting& operator=(UpdateMixSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMixSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMixSetting* internal_default_instance() {
    return reinterpret_cast<const UpdateMixSetting*>(
               &_UpdateMixSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateMixSetting& a, UpdateMixSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMixSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMixSetting* New() const final {
    return CreateMaybeMessage<UpdateMixSetting>(nullptr);
  }

  UpdateMixSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMixSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMixSetting& from);
  void MergeFrom(const UpdateMixSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMixSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IalRequest.UpdateMixSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ialRequest_2eproto);
    return ::descriptor_table_ialRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputSettingIdFieldNumber = 1,
    kMixSettingFieldNumber = 2,
  };
  // string output_setting_id = 1;
  void clear_output_setting_id();
  const std::string& output_setting_id() const;
  void set_output_setting_id(const std::string& value);
  void set_output_setting_id(std::string&& value);
  void set_output_setting_id(const char* value);
  void set_output_setting_id(const char* value, size_t size);
  std::string* mutable_output_setting_id();
  std::string* release_output_setting_id();
  void set_allocated_output_setting_id(std::string* output_setting_id);
  private:
  const std::string& _internal_output_setting_id() const;
  void _internal_set_output_setting_id(const std::string& value);
  std::string* _internal_mutable_output_setting_id();
  public:

  // .DavStreamletSetting.MixStreamletSetting mix_setting = 2;
  bool has_mix_setting() const;
  private:
  bool _internal_has_mix_setting() const;
  public:
  void clear_mix_setting();
  const ::DavStreamletSetting::MixStreamletSetting& mix_setting() const;
  ::DavStreamletSetting::MixStreamletSetting* release_mix_setting();
  ::DavStreamletSetting::MixStreamletSetting* mutable_mix_setting();
  void set_allocated_mix_setting(::DavStreamletSetting::MixStreamletSetting* mix_setting);
  private:
  const ::DavStreamletSetting::MixStreamletSetting& _internal_mix_setting() const;
  ::DavStreamletSetting::MixStreamletSetting* _internal_mutable_mix_setting();
  public:

  // @@protoc_insertion_point(class_scope:IalRequest.UpdateMixSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_setting_id_;
  ::DavStreamletSetting::MixStreamletSetting* mix_setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ialRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateRoom

// string room_id = 1;
inline void CreateRoom::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRoom::room_id() const {
  // @@protoc_insertion_point(field_get:IalRequest.CreateRoom.room_id)
  return _internal_room_id();
}
inline void CreateRoom::set_room_id(const std::string& value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:IalRequest.CreateRoom.room_id)
}
inline std::string* CreateRoom::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:IalRequest.CreateRoom.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& CreateRoom::_internal_room_id() const {
  return room_id_.GetNoArena();
}
inline void CreateRoom::_internal_set_room_id(const std::string& value) {
  
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRoom::set_room_id(std::string&& value) {
  
  room_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.CreateRoom.room_id)
}
inline void CreateRoom::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.CreateRoom.room_id)
}
inline void CreateRoom::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.CreateRoom.room_id)
}
inline std::string* CreateRoom::_internal_mutable_room_id() {
  
  return room_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRoom::release_room_id() {
  // @@protoc_insertion_point(field_release:IalRequest.CreateRoom.room_id)
  
  return room_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRoom::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.CreateRoom.room_id)
}

// repeated string input_urls = 2;
inline int CreateRoom::_internal_input_urls_size() const {
  return input_urls_.size();
}
inline int CreateRoom::input_urls_size() const {
  return _internal_input_urls_size();
}
inline void CreateRoom::clear_input_urls() {
  input_urls_.Clear();
}
inline std::string* CreateRoom::add_input_urls() {
  // @@protoc_insertion_point(field_add_mutable:IalRequest.CreateRoom.input_urls)
  return _internal_add_input_urls();
}
inline const std::string& CreateRoom::_internal_input_urls(int index) const {
  return input_urls_.Get(index);
}
inline const std::string& CreateRoom::input_urls(int index) const {
  // @@protoc_insertion_point(field_get:IalRequest.CreateRoom.input_urls)
  return _internal_input_urls(index);
}
inline std::string* CreateRoom::mutable_input_urls(int index) {
  // @@protoc_insertion_point(field_mutable:IalRequest.CreateRoom.input_urls)
  return input_urls_.Mutable(index);
}
inline void CreateRoom::set_input_urls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IalRequest.CreateRoom.input_urls)
  input_urls_.Mutable(index)->assign(value);
}
inline void CreateRoom::set_input_urls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IalRequest.CreateRoom.input_urls)
  input_urls_.Mutable(index)->assign(std::move(value));
}
inline void CreateRoom::set_input_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IalRequest.CreateRoom.input_urls)
}
inline void CreateRoom::set_input_urls(int index, const char* value, size_t size) {
  input_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IalRequest.CreateRoom.input_urls)
}
inline std::string* CreateRoom::_internal_add_input_urls() {
  return input_urls_.Add();
}
inline void CreateRoom::add_input_urls(const std::string& value) {
  input_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IalRequest.CreateRoom.input_urls)
}
inline void CreateRoom::add_input_urls(std::string&& value) {
  input_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IalRequest.CreateRoom.input_urls)
}
inline void CreateRoom::add_input_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IalRequest.CreateRoom.input_urls)
}
inline void CreateRoom::add_input_urls(const char* value, size_t size) {
  input_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IalRequest.CreateRoom.input_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateRoom::input_urls() const {
  // @@protoc_insertion_point(field_list:IalRequest.CreateRoom.input_urls)
  return input_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateRoom::mutable_input_urls() {
  // @@protoc_insertion_point(field_mutable_list:IalRequest.CreateRoom.input_urls)
  return &input_urls_;
}

// string room_output_base_url = 3;
inline void CreateRoom::clear_room_output_base_url() {
  room_output_base_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRoom::room_output_base_url() const {
  // @@protoc_insertion_point(field_get:IalRequest.CreateRoom.room_output_base_url)
  return _internal_room_output_base_url();
}
inline void CreateRoom::set_room_output_base_url(const std::string& value) {
  _internal_set_room_output_base_url(value);
  // @@protoc_insertion_point(field_set:IalRequest.CreateRoom.room_output_base_url)
}
inline std::string* CreateRoom::mutable_room_output_base_url() {
  // @@protoc_insertion_point(field_mutable:IalRequest.CreateRoom.room_output_base_url)
  return _internal_mutable_room_output_base_url();
}
inline const std::string& CreateRoom::_internal_room_output_base_url() const {
  return room_output_base_url_.GetNoArena();
}
inline void CreateRoom::_internal_set_room_output_base_url(const std::string& value) {
  
  room_output_base_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRoom::set_room_output_base_url(std::string&& value) {
  
  room_output_base_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.CreateRoom.room_output_base_url)
}
inline void CreateRoom::set_room_output_base_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_output_base_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.CreateRoom.room_output_base_url)
}
inline void CreateRoom::set_room_output_base_url(const char* value, size_t size) {
  
  room_output_base_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.CreateRoom.room_output_base_url)
}
inline std::string* CreateRoom::_internal_mutable_room_output_base_url() {
  
  return room_output_base_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRoom::release_room_output_base_url() {
  // @@protoc_insertion_point(field_release:IalRequest.CreateRoom.room_output_base_url)
  
  return room_output_base_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRoom::set_allocated_room_output_base_url(std::string* room_output_base_url) {
  if (room_output_base_url != nullptr) {
    
  } else {
    
  }
  room_output_base_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_output_base_url);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.CreateRoom.room_output_base_url)
}

// repeated .IalRequest.AddNewOutput output_stream_infos = 4;
inline int CreateRoom::_internal_output_stream_infos_size() const {
  return output_stream_infos_.size();
}
inline int CreateRoom::output_stream_infos_size() const {
  return _internal_output_stream_infos_size();
}
inline void CreateRoom::clear_output_stream_infos() {
  output_stream_infos_.Clear();
}
inline ::IalRequest::AddNewOutput* CreateRoom::mutable_output_stream_infos(int index) {
  // @@protoc_insertion_point(field_mutable:IalRequest.CreateRoom.output_stream_infos)
  return output_stream_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IalRequest::AddNewOutput >*
CreateRoom::mutable_output_stream_infos() {
  // @@protoc_insertion_point(field_mutable_list:IalRequest.CreateRoom.output_stream_infos)
  return &output_stream_infos_;
}
inline const ::IalRequest::AddNewOutput& CreateRoom::_internal_output_stream_infos(int index) const {
  return output_stream_infos_.Get(index);
}
inline const ::IalRequest::AddNewOutput& CreateRoom::output_stream_infos(int index) const {
  // @@protoc_insertion_point(field_get:IalRequest.CreateRoom.output_stream_infos)
  return _internal_output_stream_infos(index);
}
inline ::IalRequest::AddNewOutput* CreateRoom::_internal_add_output_stream_infos() {
  return output_stream_infos_.Add();
}
inline ::IalRequest::AddNewOutput* CreateRoom::add_output_stream_infos() {
  // @@protoc_insertion_point(field_add:IalRequest.CreateRoom.output_stream_infos)
  return _internal_add_output_stream_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IalRequest::AddNewOutput >&
CreateRoom::output_stream_infos() const {
  // @@protoc_insertion_point(field_list:IalRequest.CreateRoom.output_stream_infos)
  return output_stream_infos_;
}

// -------------------------------------------------------------------

// AddNewInputStream

// string input_url = 1;
inline void AddNewInputStream::clear_input_url() {
  input_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddNewInputStream::input_url() const {
  // @@protoc_insertion_point(field_get:IalRequest.AddNewInputStream.input_url)
  return _internal_input_url();
}
inline void AddNewInputStream::set_input_url(const std::string& value) {
  _internal_set_input_url(value);
  // @@protoc_insertion_point(field_set:IalRequest.AddNewInputStream.input_url)
}
inline std::string* AddNewInputStream::mutable_input_url() {
  // @@protoc_insertion_point(field_mutable:IalRequest.AddNewInputStream.input_url)
  return _internal_mutable_input_url();
}
inline const std::string& AddNewInputStream::_internal_input_url() const {
  return input_url_.GetNoArena();
}
inline void AddNewInputStream::_internal_set_input_url(const std::string& value) {
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddNewInputStream::set_input_url(std::string&& value) {
  
  input_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.AddNewInputStream.input_url)
}
inline void AddNewInputStream::set_input_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.AddNewInputStream.input_url)
}
inline void AddNewInputStream::set_input_url(const char* value, size_t size) {
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.AddNewInputStream.input_url)
}
inline std::string* AddNewInputStream::_internal_mutable_input_url() {
  
  return input_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddNewInputStream::release_input_url() {
  // @@protoc_insertion_point(field_release:IalRequest.AddNewInputStream.input_url)
  
  return input_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddNewInputStream::set_allocated_input_url(std::string* input_url) {
  if (input_url != nullptr) {
    
  } else {
    
  }
  input_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_url);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.AddNewInputStream.input_url)
}

// .DavStreamletSetting.InputStreamletSetting specific_setting = 2;
inline bool AddNewInputStream::_internal_has_specific_setting() const {
  return this != internal_default_instance() && specific_setting_ != nullptr;
}
inline bool AddNewInputStream::has_specific_setting() const {
  return _internal_has_specific_setting();
}
inline const ::DavStreamletSetting::InputStreamletSetting& AddNewInputStream::_internal_specific_setting() const {
  const ::DavStreamletSetting::InputStreamletSetting* p = specific_setting_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavStreamletSetting::InputStreamletSetting*>(
      &::DavStreamletSetting::_InputStreamletSetting_default_instance_);
}
inline const ::DavStreamletSetting::InputStreamletSetting& AddNewInputStream::specific_setting() const {
  // @@protoc_insertion_point(field_get:IalRequest.AddNewInputStream.specific_setting)
  return _internal_specific_setting();
}
inline ::DavStreamletSetting::InputStreamletSetting* AddNewInputStream::release_specific_setting() {
  // @@protoc_insertion_point(field_release:IalRequest.AddNewInputStream.specific_setting)
  
  ::DavStreamletSetting::InputStreamletSetting* temp = specific_setting_;
  specific_setting_ = nullptr;
  return temp;
}
inline ::DavStreamletSetting::InputStreamletSetting* AddNewInputStream::_internal_mutable_specific_setting() {
  
  if (specific_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavStreamletSetting::InputStreamletSetting>(GetArenaNoVirtual());
    specific_setting_ = p;
  }
  return specific_setting_;
}
inline ::DavStreamletSetting::InputStreamletSetting* AddNewInputStream::mutable_specific_setting() {
  // @@protoc_insertion_point(field_mutable:IalRequest.AddNewInputStream.specific_setting)
  return _internal_mutable_specific_setting();
}
inline void AddNewInputStream::set_allocated_specific_setting(::DavStreamletSetting::InputStreamletSetting* specific_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(specific_setting_);
  }
  if (specific_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      specific_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specific_setting, submessage_arena);
    }
    
  } else {
    
  }
  specific_setting_ = specific_setting;
  // @@protoc_insertion_point(field_set_allocated:IalRequest.AddNewInputStream.specific_setting)
}

// -------------------------------------------------------------------

// CloseOneInputStream

// string input_url = 1;
inline void CloseOneInputStream::clear_input_url() {
  input_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloseOneInputStream::input_url() const {
  // @@protoc_insertion_point(field_get:IalRequest.CloseOneInputStream.input_url)
  return _internal_input_url();
}
inline void CloseOneInputStream::set_input_url(const std::string& value) {
  _internal_set_input_url(value);
  // @@protoc_insertion_point(field_set:IalRequest.CloseOneInputStream.input_url)
}
inline std::string* CloseOneInputStream::mutable_input_url() {
  // @@protoc_insertion_point(field_mutable:IalRequest.CloseOneInputStream.input_url)
  return _internal_mutable_input_url();
}
inline const std::string& CloseOneInputStream::_internal_input_url() const {
  return input_url_.GetNoArena();
}
inline void CloseOneInputStream::_internal_set_input_url(const std::string& value) {
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloseOneInputStream::set_input_url(std::string&& value) {
  
  input_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.CloseOneInputStream.input_url)
}
inline void CloseOneInputStream::set_input_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.CloseOneInputStream.input_url)
}
inline void CloseOneInputStream::set_input_url(const char* value, size_t size) {
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.CloseOneInputStream.input_url)
}
inline std::string* CloseOneInputStream::_internal_mutable_input_url() {
  
  return input_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseOneInputStream::release_input_url() {
  // @@protoc_insertion_point(field_release:IalRequest.CloseOneInputStream.input_url)
  
  return input_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseOneInputStream::set_allocated_input_url(std::string* input_url) {
  if (input_url != nullptr) {
    
  } else {
    
  }
  input_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_url);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.CloseOneInputStream.input_url)
}

// -------------------------------------------------------------------

// GetOneInputStreamInfo

// string input_url = 1;
inline void GetOneInputStreamInfo::clear_input_url() {
  input_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOneInputStreamInfo::input_url() const {
  // @@protoc_insertion_point(field_get:IalRequest.GetOneInputStreamInfo.input_url)
  return _internal_input_url();
}
inline void GetOneInputStreamInfo::set_input_url(const std::string& value) {
  _internal_set_input_url(value);
  // @@protoc_insertion_point(field_set:IalRequest.GetOneInputStreamInfo.input_url)
}
inline std::string* GetOneInputStreamInfo::mutable_input_url() {
  // @@protoc_insertion_point(field_mutable:IalRequest.GetOneInputStreamInfo.input_url)
  return _internal_mutable_input_url();
}
inline const std::string& GetOneInputStreamInfo::_internal_input_url() const {
  return input_url_.GetNoArena();
}
inline void GetOneInputStreamInfo::_internal_set_input_url(const std::string& value) {
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetOneInputStreamInfo::set_input_url(std::string&& value) {
  
  input_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.GetOneInputStreamInfo.input_url)
}
inline void GetOneInputStreamInfo::set_input_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.GetOneInputStreamInfo.input_url)
}
inline void GetOneInputStreamInfo::set_input_url(const char* value, size_t size) {
  
  input_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.GetOneInputStreamInfo.input_url)
}
inline std::string* GetOneInputStreamInfo::_internal_mutable_input_url() {
  
  return input_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOneInputStreamInfo::release_input_url() {
  // @@protoc_insertion_point(field_release:IalRequest.GetOneInputStreamInfo.input_url)
  
  return input_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOneInputStreamInfo::set_allocated_input_url(std::string* input_url) {
  if (input_url != nullptr) {
    
  } else {
    
  }
  input_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_url);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.GetOneInputStreamInfo.input_url)
}

// -------------------------------------------------------------------

// GetAllInputStreamInfos

// string format = 1;
inline void GetAllInputStreamInfos::clear_format() {
  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAllInputStreamInfos::format() const {
  // @@protoc_insertion_point(field_get:IalRequest.GetAllInputStreamInfos.format)
  return _internal_format();
}
inline void GetAllInputStreamInfos::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:IalRequest.GetAllInputStreamInfos.format)
}
inline std::string* GetAllInputStreamInfos::mutable_format() {
  // @@protoc_insertion_point(field_mutable:IalRequest.GetAllInputStreamInfos.format)
  return _internal_mutable_format();
}
inline const std::string& GetAllInputStreamInfos::_internal_format() const {
  return format_.GetNoArena();
}
inline void GetAllInputStreamInfos::_internal_set_format(const std::string& value) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAllInputStreamInfos::set_format(std::string&& value) {
  
  format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.GetAllInputStreamInfos.format)
}
inline void GetAllInputStreamInfos::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.GetAllInputStreamInfos.format)
}
inline void GetAllInputStreamInfos::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.GetAllInputStreamInfos.format)
}
inline std::string* GetAllInputStreamInfos::_internal_mutable_format() {
  
  return format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAllInputStreamInfos::release_format() {
  // @@protoc_insertion_point(field_release:IalRequest.GetAllInputStreamInfos.format)
  
  return format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAllInputStreamInfos::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.GetAllInputStreamInfos.format)
}

// -------------------------------------------------------------------

// AddNewOutput

// string output_setting_id = 1;
inline void AddNewOutput::clear_output_setting_id() {
  output_setting_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddNewOutput::output_setting_id() const {
  // @@protoc_insertion_point(field_get:IalRequest.AddNewOutput.output_setting_id)
  return _internal_output_setting_id();
}
inline void AddNewOutput::set_output_setting_id(const std::string& value) {
  _internal_set_output_setting_id(value);
  // @@protoc_insertion_point(field_set:IalRequest.AddNewOutput.output_setting_id)
}
inline std::string* AddNewOutput::mutable_output_setting_id() {
  // @@protoc_insertion_point(field_mutable:IalRequest.AddNewOutput.output_setting_id)
  return _internal_mutable_output_setting_id();
}
inline const std::string& AddNewOutput::_internal_output_setting_id() const {
  return output_setting_id_.GetNoArena();
}
inline void AddNewOutput::_internal_set_output_setting_id(const std::string& value) {
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddNewOutput::set_output_setting_id(std::string&& value) {
  
  output_setting_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.AddNewOutput.output_setting_id)
}
inline void AddNewOutput::set_output_setting_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.AddNewOutput.output_setting_id)
}
inline void AddNewOutput::set_output_setting_id(const char* value, size_t size) {
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.AddNewOutput.output_setting_id)
}
inline std::string* AddNewOutput::_internal_mutable_output_setting_id() {
  
  return output_setting_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddNewOutput::release_output_setting_id() {
  // @@protoc_insertion_point(field_release:IalRequest.AddNewOutput.output_setting_id)
  
  return output_setting_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddNewOutput::set_allocated_output_setting_id(std::string* output_setting_id) {
  if (output_setting_id != nullptr) {
    
  } else {
    
  }
  output_setting_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_setting_id);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.AddNewOutput.output_setting_id)
}

// repeated string output_urls = 2;
inline int AddNewOutput::_internal_output_urls_size() const {
  return output_urls_.size();
}
inline int AddNewOutput::output_urls_size() const {
  return _internal_output_urls_size();
}
inline void AddNewOutput::clear_output_urls() {
  output_urls_.Clear();
}
inline std::string* AddNewOutput::add_output_urls() {
  // @@protoc_insertion_point(field_add_mutable:IalRequest.AddNewOutput.output_urls)
  return _internal_add_output_urls();
}
inline const std::string& AddNewOutput::_internal_output_urls(int index) const {
  return output_urls_.Get(index);
}
inline const std::string& AddNewOutput::output_urls(int index) const {
  // @@protoc_insertion_point(field_get:IalRequest.AddNewOutput.output_urls)
  return _internal_output_urls(index);
}
inline std::string* AddNewOutput::mutable_output_urls(int index) {
  // @@protoc_insertion_point(field_mutable:IalRequest.AddNewOutput.output_urls)
  return output_urls_.Mutable(index);
}
inline void AddNewOutput::set_output_urls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IalRequest.AddNewOutput.output_urls)
  output_urls_.Mutable(index)->assign(value);
}
inline void AddNewOutput::set_output_urls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IalRequest.AddNewOutput.output_urls)
  output_urls_.Mutable(index)->assign(std::move(value));
}
inline void AddNewOutput::set_output_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IalRequest.AddNewOutput.output_urls)
}
inline void AddNewOutput::set_output_urls(int index, const char* value, size_t size) {
  output_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IalRequest.AddNewOutput.output_urls)
}
inline std::string* AddNewOutput::_internal_add_output_urls() {
  return output_urls_.Add();
}
inline void AddNewOutput::add_output_urls(const std::string& value) {
  output_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IalRequest.AddNewOutput.output_urls)
}
inline void AddNewOutput::add_output_urls(std::string&& value) {
  output_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IalRequest.AddNewOutput.output_urls)
}
inline void AddNewOutput::add_output_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IalRequest.AddNewOutput.output_urls)
}
inline void AddNewOutput::add_output_urls(const char* value, size_t size) {
  output_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IalRequest.AddNewOutput.output_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddNewOutput::output_urls() const {
  // @@protoc_insertion_point(field_list:IalRequest.AddNewOutput.output_urls)
  return output_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddNewOutput::mutable_output_urls() {
  // @@protoc_insertion_point(field_mutable_list:IalRequest.AddNewOutput.output_urls)
  return &output_urls_;
}

// .DavStreamletSetting.OutputStreamletSetting specific_setting = 3;
inline bool AddNewOutput::_internal_has_specific_setting() const {
  return this != internal_default_instance() && specific_setting_ != nullptr;
}
inline bool AddNewOutput::has_specific_setting() const {
  return _internal_has_specific_setting();
}
inline const ::DavStreamletSetting::OutputStreamletSetting& AddNewOutput::_internal_specific_setting() const {
  const ::DavStreamletSetting::OutputStreamletSetting* p = specific_setting_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavStreamletSetting::OutputStreamletSetting*>(
      &::DavStreamletSetting::_OutputStreamletSetting_default_instance_);
}
inline const ::DavStreamletSetting::OutputStreamletSetting& AddNewOutput::specific_setting() const {
  // @@protoc_insertion_point(field_get:IalRequest.AddNewOutput.specific_setting)
  return _internal_specific_setting();
}
inline ::DavStreamletSetting::OutputStreamletSetting* AddNewOutput::release_specific_setting() {
  // @@protoc_insertion_point(field_release:IalRequest.AddNewOutput.specific_setting)
  
  ::DavStreamletSetting::OutputStreamletSetting* temp = specific_setting_;
  specific_setting_ = nullptr;
  return temp;
}
inline ::DavStreamletSetting::OutputStreamletSetting* AddNewOutput::_internal_mutable_specific_setting() {
  
  if (specific_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavStreamletSetting::OutputStreamletSetting>(GetArenaNoVirtual());
    specific_setting_ = p;
  }
  return specific_setting_;
}
inline ::DavStreamletSetting::OutputStreamletSetting* AddNewOutput::mutable_specific_setting() {
  // @@protoc_insertion_point(field_mutable:IalRequest.AddNewOutput.specific_setting)
  return _internal_mutable_specific_setting();
}
inline void AddNewOutput::set_allocated_specific_setting(::DavStreamletSetting::OutputStreamletSetting* specific_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(specific_setting_);
  }
  if (specific_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      specific_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specific_setting, submessage_arena);
    }
    
  } else {
    
  }
  specific_setting_ = specific_setting;
  // @@protoc_insertion_point(field_set_allocated:IalRequest.AddNewOutput.specific_setting)
}

// -------------------------------------------------------------------

// CloseOneOutput

// string output_setting_id = 1;
inline void CloseOneOutput::clear_output_setting_id() {
  output_setting_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloseOneOutput::output_setting_id() const {
  // @@protoc_insertion_point(field_get:IalRequest.CloseOneOutput.output_setting_id)
  return _internal_output_setting_id();
}
inline void CloseOneOutput::set_output_setting_id(const std::string& value) {
  _internal_set_output_setting_id(value);
  // @@protoc_insertion_point(field_set:IalRequest.CloseOneOutput.output_setting_id)
}
inline std::string* CloseOneOutput::mutable_output_setting_id() {
  // @@protoc_insertion_point(field_mutable:IalRequest.CloseOneOutput.output_setting_id)
  return _internal_mutable_output_setting_id();
}
inline const std::string& CloseOneOutput::_internal_output_setting_id() const {
  return output_setting_id_.GetNoArena();
}
inline void CloseOneOutput::_internal_set_output_setting_id(const std::string& value) {
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloseOneOutput::set_output_setting_id(std::string&& value) {
  
  output_setting_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.CloseOneOutput.output_setting_id)
}
inline void CloseOneOutput::set_output_setting_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.CloseOneOutput.output_setting_id)
}
inline void CloseOneOutput::set_output_setting_id(const char* value, size_t size) {
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.CloseOneOutput.output_setting_id)
}
inline std::string* CloseOneOutput::_internal_mutable_output_setting_id() {
  
  return output_setting_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseOneOutput::release_output_setting_id() {
  // @@protoc_insertion_point(field_release:IalRequest.CloseOneOutput.output_setting_id)
  
  return output_setting_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseOneOutput::set_allocated_output_setting_id(std::string* output_setting_id) {
  if (output_setting_id != nullptr) {
    
  } else {
    
  }
  output_setting_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_setting_id);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.CloseOneOutput.output_setting_id)
}

// -------------------------------------------------------------------

// GetOneOutputStreamInfo

// string output_setting_ids = 1;
inline void GetOneOutputStreamInfo::clear_output_setting_ids() {
  output_setting_ids_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOneOutputStreamInfo::output_setting_ids() const {
  // @@protoc_insertion_point(field_get:IalRequest.GetOneOutputStreamInfo.output_setting_ids)
  return _internal_output_setting_ids();
}
inline void GetOneOutputStreamInfo::set_output_setting_ids(const std::string& value) {
  _internal_set_output_setting_ids(value);
  // @@protoc_insertion_point(field_set:IalRequest.GetOneOutputStreamInfo.output_setting_ids)
}
inline std::string* GetOneOutputStreamInfo::mutable_output_setting_ids() {
  // @@protoc_insertion_point(field_mutable:IalRequest.GetOneOutputStreamInfo.output_setting_ids)
  return _internal_mutable_output_setting_ids();
}
inline const std::string& GetOneOutputStreamInfo::_internal_output_setting_ids() const {
  return output_setting_ids_.GetNoArena();
}
inline void GetOneOutputStreamInfo::_internal_set_output_setting_ids(const std::string& value) {
  
  output_setting_ids_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetOneOutputStreamInfo::set_output_setting_ids(std::string&& value) {
  
  output_setting_ids_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.GetOneOutputStreamInfo.output_setting_ids)
}
inline void GetOneOutputStreamInfo::set_output_setting_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_setting_ids_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.GetOneOutputStreamInfo.output_setting_ids)
}
inline void GetOneOutputStreamInfo::set_output_setting_ids(const char* value, size_t size) {
  
  output_setting_ids_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.GetOneOutputStreamInfo.output_setting_ids)
}
inline std::string* GetOneOutputStreamInfo::_internal_mutable_output_setting_ids() {
  
  return output_setting_ids_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOneOutputStreamInfo::release_output_setting_ids() {
  // @@protoc_insertion_point(field_release:IalRequest.GetOneOutputStreamInfo.output_setting_ids)
  
  return output_setting_ids_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOneOutputStreamInfo::set_allocated_output_setting_ids(std::string* output_setting_ids) {
  if (output_setting_ids != nullptr) {
    
  } else {
    
  }
  output_setting_ids_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_setting_ids);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.GetOneOutputStreamInfo.output_setting_ids)
}

// -------------------------------------------------------------------

// GetAllOutputStreamInfos

// string format = 1;
inline void GetAllOutputStreamInfos::clear_format() {
  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAllOutputStreamInfos::format() const {
  // @@protoc_insertion_point(field_get:IalRequest.GetAllOutputStreamInfos.format)
  return _internal_format();
}
inline void GetAllOutputStreamInfos::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:IalRequest.GetAllOutputStreamInfos.format)
}
inline std::string* GetAllOutputStreamInfos::mutable_format() {
  // @@protoc_insertion_point(field_mutable:IalRequest.GetAllOutputStreamInfos.format)
  return _internal_mutable_format();
}
inline const std::string& GetAllOutputStreamInfos::_internal_format() const {
  return format_.GetNoArena();
}
inline void GetAllOutputStreamInfos::_internal_set_format(const std::string& value) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAllOutputStreamInfos::set_format(std::string&& value) {
  
  format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.GetAllOutputStreamInfos.format)
}
inline void GetAllOutputStreamInfos::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.GetAllOutputStreamInfos.format)
}
inline void GetAllOutputStreamInfos::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.GetAllOutputStreamInfos.format)
}
inline std::string* GetAllOutputStreamInfos::_internal_mutable_format() {
  
  return format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAllOutputStreamInfos::release_format() {
  // @@protoc_insertion_point(field_release:IalRequest.GetAllOutputStreamInfos.format)
  
  return format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAllOutputStreamInfos::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.GetAllOutputStreamInfos.format)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamInfo

// string stream_name = 1;
inline void StreamInfo::clear_stream_name() {
  stream_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StreamInfo::stream_name() const {
  // @@protoc_insertion_point(field_get:IalRequest.StreamInfo.stream_name)
  return _internal_stream_name();
}
inline void StreamInfo::set_stream_name(const std::string& value) {
  _internal_set_stream_name(value);
  // @@protoc_insertion_point(field_set:IalRequest.StreamInfo.stream_name)
}
inline std::string* StreamInfo::mutable_stream_name() {
  // @@protoc_insertion_point(field_mutable:IalRequest.StreamInfo.stream_name)
  return _internal_mutable_stream_name();
}
inline const std::string& StreamInfo::_internal_stream_name() const {
  return stream_name_.GetNoArena();
}
inline void StreamInfo::_internal_set_stream_name(const std::string& value) {
  
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StreamInfo::set_stream_name(std::string&& value) {
  
  stream_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.StreamInfo.stream_name)
}
inline void StreamInfo::set_stream_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.StreamInfo.stream_name)
}
inline void StreamInfo::set_stream_name(const char* value, size_t size) {
  
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.StreamInfo.stream_name)
}
inline std::string* StreamInfo::_internal_mutable_stream_name() {
  
  return stream_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamInfo::release_stream_name() {
  // @@protoc_insertion_point(field_release:IalRequest.StreamInfo.stream_name)
  
  return stream_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamInfo::set_allocated_stream_name(std::string* stream_name) {
  if (stream_name != nullptr) {
    
  } else {
    
  }
  stream_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_name);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.StreamInfo.stream_name)
}

// map<string, string> stream_info = 2;
inline int StreamInfo::_internal_stream_info_size() const {
  return stream_info_.size();
}
inline int StreamInfo::stream_info_size() const {
  return _internal_stream_info_size();
}
inline void StreamInfo::clear_stream_info() {
  stream_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamInfo::_internal_stream_info() const {
  return stream_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamInfo::stream_info() const {
  // @@protoc_insertion_point(field_map:IalRequest.StreamInfo.stream_info)
  return _internal_stream_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamInfo::_internal_mutable_stream_info() {
  return stream_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamInfo::mutable_stream_info() {
  // @@protoc_insertion_point(field_mutable_map:IalRequest.StreamInfo.stream_info)
  return _internal_mutable_stream_info();
}

// -------------------------------------------------------------------

// AudioMixMuteUnMute

// repeated string mute_input_urls = 1;
inline int AudioMixMuteUnMute::_internal_mute_input_urls_size() const {
  return mute_input_urls_.size();
}
inline int AudioMixMuteUnMute::mute_input_urls_size() const {
  return _internal_mute_input_urls_size();
}
inline void AudioMixMuteUnMute::clear_mute_input_urls() {
  mute_input_urls_.Clear();
}
inline std::string* AudioMixMuteUnMute::add_mute_input_urls() {
  // @@protoc_insertion_point(field_add_mutable:IalRequest.AudioMixMuteUnMute.mute_input_urls)
  return _internal_add_mute_input_urls();
}
inline const std::string& AudioMixMuteUnMute::_internal_mute_input_urls(int index) const {
  return mute_input_urls_.Get(index);
}
inline const std::string& AudioMixMuteUnMute::mute_input_urls(int index) const {
  // @@protoc_insertion_point(field_get:IalRequest.AudioMixMuteUnMute.mute_input_urls)
  return _internal_mute_input_urls(index);
}
inline std::string* AudioMixMuteUnMute::mutable_mute_input_urls(int index) {
  // @@protoc_insertion_point(field_mutable:IalRequest.AudioMixMuteUnMute.mute_input_urls)
  return mute_input_urls_.Mutable(index);
}
inline void AudioMixMuteUnMute::set_mute_input_urls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IalRequest.AudioMixMuteUnMute.mute_input_urls)
  mute_input_urls_.Mutable(index)->assign(value);
}
inline void AudioMixMuteUnMute::set_mute_input_urls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IalRequest.AudioMixMuteUnMute.mute_input_urls)
  mute_input_urls_.Mutable(index)->assign(std::move(value));
}
inline void AudioMixMuteUnMute::set_mute_input_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mute_input_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IalRequest.AudioMixMuteUnMute.mute_input_urls)
}
inline void AudioMixMuteUnMute::set_mute_input_urls(int index, const char* value, size_t size) {
  mute_input_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IalRequest.AudioMixMuteUnMute.mute_input_urls)
}
inline std::string* AudioMixMuteUnMute::_internal_add_mute_input_urls() {
  return mute_input_urls_.Add();
}
inline void AudioMixMuteUnMute::add_mute_input_urls(const std::string& value) {
  mute_input_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IalRequest.AudioMixMuteUnMute.mute_input_urls)
}
inline void AudioMixMuteUnMute::add_mute_input_urls(std::string&& value) {
  mute_input_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IalRequest.AudioMixMuteUnMute.mute_input_urls)
}
inline void AudioMixMuteUnMute::add_mute_input_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mute_input_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IalRequest.AudioMixMuteUnMute.mute_input_urls)
}
inline void AudioMixMuteUnMute::add_mute_input_urls(const char* value, size_t size) {
  mute_input_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IalRequest.AudioMixMuteUnMute.mute_input_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AudioMixMuteUnMute::mute_input_urls() const {
  // @@protoc_insertion_point(field_list:IalRequest.AudioMixMuteUnMute.mute_input_urls)
  return mute_input_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AudioMixMuteUnMute::mutable_mute_input_urls() {
  // @@protoc_insertion_point(field_mutable_list:IalRequest.AudioMixMuteUnMute.mute_input_urls)
  return &mute_input_urls_;
}

// repeated string unmute_input_urls = 2;
inline int AudioMixMuteUnMute::_internal_unmute_input_urls_size() const {
  return unmute_input_urls_.size();
}
inline int AudioMixMuteUnMute::unmute_input_urls_size() const {
  return _internal_unmute_input_urls_size();
}
inline void AudioMixMuteUnMute::clear_unmute_input_urls() {
  unmute_input_urls_.Clear();
}
inline std::string* AudioMixMuteUnMute::add_unmute_input_urls() {
  // @@protoc_insertion_point(field_add_mutable:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
  return _internal_add_unmute_input_urls();
}
inline const std::string& AudioMixMuteUnMute::_internal_unmute_input_urls(int index) const {
  return unmute_input_urls_.Get(index);
}
inline const std::string& AudioMixMuteUnMute::unmute_input_urls(int index) const {
  // @@protoc_insertion_point(field_get:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
  return _internal_unmute_input_urls(index);
}
inline std::string* AudioMixMuteUnMute::mutable_unmute_input_urls(int index) {
  // @@protoc_insertion_point(field_mutable:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
  return unmute_input_urls_.Mutable(index);
}
inline void AudioMixMuteUnMute::set_unmute_input_urls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
  unmute_input_urls_.Mutable(index)->assign(value);
}
inline void AudioMixMuteUnMute::set_unmute_input_urls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
  unmute_input_urls_.Mutable(index)->assign(std::move(value));
}
inline void AudioMixMuteUnMute::set_unmute_input_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unmute_input_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
}
inline void AudioMixMuteUnMute::set_unmute_input_urls(int index, const char* value, size_t size) {
  unmute_input_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
}
inline std::string* AudioMixMuteUnMute::_internal_add_unmute_input_urls() {
  return unmute_input_urls_.Add();
}
inline void AudioMixMuteUnMute::add_unmute_input_urls(const std::string& value) {
  unmute_input_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
}
inline void AudioMixMuteUnMute::add_unmute_input_urls(std::string&& value) {
  unmute_input_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
}
inline void AudioMixMuteUnMute::add_unmute_input_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unmute_input_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
}
inline void AudioMixMuteUnMute::add_unmute_input_urls(const char* value, size_t size) {
  unmute_input_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AudioMixMuteUnMute::unmute_input_urls() const {
  // @@protoc_insertion_point(field_list:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
  return unmute_input_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AudioMixMuteUnMute::mutable_unmute_input_urls() {
  // @@protoc_insertion_point(field_mutable_list:IalRequest.AudioMixMuteUnMute.unmute_input_urls)
  return &unmute_input_urls_;
}

// -------------------------------------------------------------------

// VideoMixChangeLayout

// .DavWaveSetting.VideoMixLayoutUpdate new_layout = 1;
inline bool VideoMixChangeLayout::_internal_has_new_layout() const {
  return this != internal_default_instance() && new_layout_ != nullptr;
}
inline bool VideoMixChangeLayout::has_new_layout() const {
  return _internal_has_new_layout();
}
inline const ::DavWaveSetting::VideoMixLayoutUpdate& VideoMixChangeLayout::_internal_new_layout() const {
  const ::DavWaveSetting::VideoMixLayoutUpdate* p = new_layout_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavWaveSetting::VideoMixLayoutUpdate*>(
      &::DavWaveSetting::_VideoMixLayoutUpdate_default_instance_);
}
inline const ::DavWaveSetting::VideoMixLayoutUpdate& VideoMixChangeLayout::new_layout() const {
  // @@protoc_insertion_point(field_get:IalRequest.VideoMixChangeLayout.new_layout)
  return _internal_new_layout();
}
inline ::DavWaveSetting::VideoMixLayoutUpdate* VideoMixChangeLayout::release_new_layout() {
  // @@protoc_insertion_point(field_release:IalRequest.VideoMixChangeLayout.new_layout)
  
  ::DavWaveSetting::VideoMixLayoutUpdate* temp = new_layout_;
  new_layout_ = nullptr;
  return temp;
}
inline ::DavWaveSetting::VideoMixLayoutUpdate* VideoMixChangeLayout::_internal_mutable_new_layout() {
  
  if (new_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavWaveSetting::VideoMixLayoutUpdate>(GetArenaNoVirtual());
    new_layout_ = p;
  }
  return new_layout_;
}
inline ::DavWaveSetting::VideoMixLayoutUpdate* VideoMixChangeLayout::mutable_new_layout() {
  // @@protoc_insertion_point(field_mutable:IalRequest.VideoMixChangeLayout.new_layout)
  return _internal_mutable_new_layout();
}
inline void VideoMixChangeLayout::set_allocated_new_layout(::DavWaveSetting::VideoMixLayoutUpdate* new_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_layout_);
  }
  if (new_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_layout, submessage_arena);
    }
    
  } else {
    
  }
  new_layout_ = new_layout;
  // @@protoc_insertion_point(field_set_allocated:IalRequest.VideoMixChangeLayout.new_layout)
}

// -------------------------------------------------------------------

// VideoMixUpdateBackgroud

// string backgroud_image_url = 1;
inline void VideoMixUpdateBackgroud::clear_backgroud_image_url() {
  backgroud_image_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoMixUpdateBackgroud::backgroud_image_url() const {
  // @@protoc_insertion_point(field_get:IalRequest.VideoMixUpdateBackgroud.backgroud_image_url)
  return _internal_backgroud_image_url();
}
inline void VideoMixUpdateBackgroud::set_backgroud_image_url(const std::string& value) {
  _internal_set_backgroud_image_url(value);
  // @@protoc_insertion_point(field_set:IalRequest.VideoMixUpdateBackgroud.backgroud_image_url)
}
inline std::string* VideoMixUpdateBackgroud::mutable_backgroud_image_url() {
  // @@protoc_insertion_point(field_mutable:IalRequest.VideoMixUpdateBackgroud.backgroud_image_url)
  return _internal_mutable_backgroud_image_url();
}
inline const std::string& VideoMixUpdateBackgroud::_internal_backgroud_image_url() const {
  return backgroud_image_url_.GetNoArena();
}
inline void VideoMixUpdateBackgroud::_internal_set_backgroud_image_url(const std::string& value) {
  
  backgroud_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoMixUpdateBackgroud::set_backgroud_image_url(std::string&& value) {
  
  backgroud_image_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.VideoMixUpdateBackgroud.backgroud_image_url)
}
inline void VideoMixUpdateBackgroud::set_backgroud_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backgroud_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.VideoMixUpdateBackgroud.backgroud_image_url)
}
inline void VideoMixUpdateBackgroud::set_backgroud_image_url(const char* value, size_t size) {
  
  backgroud_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.VideoMixUpdateBackgroud.backgroud_image_url)
}
inline std::string* VideoMixUpdateBackgroud::_internal_mutable_backgroud_image_url() {
  
  return backgroud_image_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoMixUpdateBackgroud::release_backgroud_image_url() {
  // @@protoc_insertion_point(field_release:IalRequest.VideoMixUpdateBackgroud.backgroud_image_url)
  
  return backgroud_image_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMixUpdateBackgroud::set_allocated_backgroud_image_url(std::string* backgroud_image_url) {
  if (backgroud_image_url != nullptr) {
    
  } else {
    
  }
  backgroud_image_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backgroud_image_url);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.VideoMixUpdateBackgroud.backgroud_image_url)
}

// -------------------------------------------------------------------

// UpdateInputSetting

// .DavStreamletSetting.InputStreamletSetting input_setting = 1;
inline bool UpdateInputSetting::_internal_has_input_setting() const {
  return this != internal_default_instance() && input_setting_ != nullptr;
}
inline bool UpdateInputSetting::has_input_setting() const {
  return _internal_has_input_setting();
}
inline const ::DavStreamletSetting::InputStreamletSetting& UpdateInputSetting::_internal_input_setting() const {
  const ::DavStreamletSetting::InputStreamletSetting* p = input_setting_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavStreamletSetting::InputStreamletSetting*>(
      &::DavStreamletSetting::_InputStreamletSetting_default_instance_);
}
inline const ::DavStreamletSetting::InputStreamletSetting& UpdateInputSetting::input_setting() const {
  // @@protoc_insertion_point(field_get:IalRequest.UpdateInputSetting.input_setting)
  return _internal_input_setting();
}
inline ::DavStreamletSetting::InputStreamletSetting* UpdateInputSetting::release_input_setting() {
  // @@protoc_insertion_point(field_release:IalRequest.UpdateInputSetting.input_setting)
  
  ::DavStreamletSetting::InputStreamletSetting* temp = input_setting_;
  input_setting_ = nullptr;
  return temp;
}
inline ::DavStreamletSetting::InputStreamletSetting* UpdateInputSetting::_internal_mutable_input_setting() {
  
  if (input_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavStreamletSetting::InputStreamletSetting>(GetArenaNoVirtual());
    input_setting_ = p;
  }
  return input_setting_;
}
inline ::DavStreamletSetting::InputStreamletSetting* UpdateInputSetting::mutable_input_setting() {
  // @@protoc_insertion_point(field_mutable:IalRequest.UpdateInputSetting.input_setting)
  return _internal_mutable_input_setting();
}
inline void UpdateInputSetting::set_allocated_input_setting(::DavStreamletSetting::InputStreamletSetting* input_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_setting_);
  }
  if (input_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_setting, submessage_arena);
    }
    
  } else {
    
  }
  input_setting_ = input_setting;
  // @@protoc_insertion_point(field_set_allocated:IalRequest.UpdateInputSetting.input_setting)
}

// -------------------------------------------------------------------

// AddOutputSetting

// string output_setting_id = 1;
inline void AddOutputSetting::clear_output_setting_id() {
  output_setting_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddOutputSetting::output_setting_id() const {
  // @@protoc_insertion_point(field_get:IalRequest.AddOutputSetting.output_setting_id)
  return _internal_output_setting_id();
}
inline void AddOutputSetting::set_output_setting_id(const std::string& value) {
  _internal_set_output_setting_id(value);
  // @@protoc_insertion_point(field_set:IalRequest.AddOutputSetting.output_setting_id)
}
inline std::string* AddOutputSetting::mutable_output_setting_id() {
  // @@protoc_insertion_point(field_mutable:IalRequest.AddOutputSetting.output_setting_id)
  return _internal_mutable_output_setting_id();
}
inline const std::string& AddOutputSetting::_internal_output_setting_id() const {
  return output_setting_id_.GetNoArena();
}
inline void AddOutputSetting::_internal_set_output_setting_id(const std::string& value) {
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddOutputSetting::set_output_setting_id(std::string&& value) {
  
  output_setting_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.AddOutputSetting.output_setting_id)
}
inline void AddOutputSetting::set_output_setting_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.AddOutputSetting.output_setting_id)
}
inline void AddOutputSetting::set_output_setting_id(const char* value, size_t size) {
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.AddOutputSetting.output_setting_id)
}
inline std::string* AddOutputSetting::_internal_mutable_output_setting_id() {
  
  return output_setting_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddOutputSetting::release_output_setting_id() {
  // @@protoc_insertion_point(field_release:IalRequest.AddOutputSetting.output_setting_id)
  
  return output_setting_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddOutputSetting::set_allocated_output_setting_id(std::string* output_setting_id) {
  if (output_setting_id != nullptr) {
    
  } else {
    
  }
  output_setting_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_setting_id);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.AddOutputSetting.output_setting_id)
}

// .DavStreamletSetting.OutputStreamletSetting output_setting = 2;
inline bool AddOutputSetting::_internal_has_output_setting() const {
  return this != internal_default_instance() && output_setting_ != nullptr;
}
inline bool AddOutputSetting::has_output_setting() const {
  return _internal_has_output_setting();
}
inline const ::DavStreamletSetting::OutputStreamletSetting& AddOutputSetting::_internal_output_setting() const {
  const ::DavStreamletSetting::OutputStreamletSetting* p = output_setting_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavStreamletSetting::OutputStreamletSetting*>(
      &::DavStreamletSetting::_OutputStreamletSetting_default_instance_);
}
inline const ::DavStreamletSetting::OutputStreamletSetting& AddOutputSetting::output_setting() const {
  // @@protoc_insertion_point(field_get:IalRequest.AddOutputSetting.output_setting)
  return _internal_output_setting();
}
inline ::DavStreamletSetting::OutputStreamletSetting* AddOutputSetting::release_output_setting() {
  // @@protoc_insertion_point(field_release:IalRequest.AddOutputSetting.output_setting)
  
  ::DavStreamletSetting::OutputStreamletSetting* temp = output_setting_;
  output_setting_ = nullptr;
  return temp;
}
inline ::DavStreamletSetting::OutputStreamletSetting* AddOutputSetting::_internal_mutable_output_setting() {
  
  if (output_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavStreamletSetting::OutputStreamletSetting>(GetArenaNoVirtual());
    output_setting_ = p;
  }
  return output_setting_;
}
inline ::DavStreamletSetting::OutputStreamletSetting* AddOutputSetting::mutable_output_setting() {
  // @@protoc_insertion_point(field_mutable:IalRequest.AddOutputSetting.output_setting)
  return _internal_mutable_output_setting();
}
inline void AddOutputSetting::set_allocated_output_setting(::DavStreamletSetting::OutputStreamletSetting* output_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_setting_);
  }
  if (output_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_setting, submessage_arena);
    }
    
  } else {
    
  }
  output_setting_ = output_setting;
  // @@protoc_insertion_point(field_set_allocated:IalRequest.AddOutputSetting.output_setting)
}

// -------------------------------------------------------------------

// UpdateMixSetting

// string output_setting_id = 1;
inline void UpdateMixSetting::clear_output_setting_id() {
  output_setting_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateMixSetting::output_setting_id() const {
  // @@protoc_insertion_point(field_get:IalRequest.UpdateMixSetting.output_setting_id)
  return _internal_output_setting_id();
}
inline void UpdateMixSetting::set_output_setting_id(const std::string& value) {
  _internal_set_output_setting_id(value);
  // @@protoc_insertion_point(field_set:IalRequest.UpdateMixSetting.output_setting_id)
}
inline std::string* UpdateMixSetting::mutable_output_setting_id() {
  // @@protoc_insertion_point(field_mutable:IalRequest.UpdateMixSetting.output_setting_id)
  return _internal_mutable_output_setting_id();
}
inline const std::string& UpdateMixSetting::_internal_output_setting_id() const {
  return output_setting_id_.GetNoArena();
}
inline void UpdateMixSetting::_internal_set_output_setting_id(const std::string& value) {
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateMixSetting::set_output_setting_id(std::string&& value) {
  
  output_setting_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IalRequest.UpdateMixSetting.output_setting_id)
}
inline void UpdateMixSetting::set_output_setting_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IalRequest.UpdateMixSetting.output_setting_id)
}
inline void UpdateMixSetting::set_output_setting_id(const char* value, size_t size) {
  
  output_setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IalRequest.UpdateMixSetting.output_setting_id)
}
inline std::string* UpdateMixSetting::_internal_mutable_output_setting_id() {
  
  return output_setting_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateMixSetting::release_output_setting_id() {
  // @@protoc_insertion_point(field_release:IalRequest.UpdateMixSetting.output_setting_id)
  
  return output_setting_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMixSetting::set_allocated_output_setting_id(std::string* output_setting_id) {
  if (output_setting_id != nullptr) {
    
  } else {
    
  }
  output_setting_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_setting_id);
  // @@protoc_insertion_point(field_set_allocated:IalRequest.UpdateMixSetting.output_setting_id)
}

// .DavStreamletSetting.MixStreamletSetting mix_setting = 2;
inline bool UpdateMixSetting::_internal_has_mix_setting() const {
  return this != internal_default_instance() && mix_setting_ != nullptr;
}
inline bool UpdateMixSetting::has_mix_setting() const {
  return _internal_has_mix_setting();
}
inline const ::DavStreamletSetting::MixStreamletSetting& UpdateMixSetting::_internal_mix_setting() const {
  const ::DavStreamletSetting::MixStreamletSetting* p = mix_setting_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DavStreamletSetting::MixStreamletSetting*>(
      &::DavStreamletSetting::_MixStreamletSetting_default_instance_);
}
inline const ::DavStreamletSetting::MixStreamletSetting& UpdateMixSetting::mix_setting() const {
  // @@protoc_insertion_point(field_get:IalRequest.UpdateMixSetting.mix_setting)
  return _internal_mix_setting();
}
inline ::DavStreamletSetting::MixStreamletSetting* UpdateMixSetting::release_mix_setting() {
  // @@protoc_insertion_point(field_release:IalRequest.UpdateMixSetting.mix_setting)
  
  ::DavStreamletSetting::MixStreamletSetting* temp = mix_setting_;
  mix_setting_ = nullptr;
  return temp;
}
inline ::DavStreamletSetting::MixStreamletSetting* UpdateMixSetting::_internal_mutable_mix_setting() {
  
  if (mix_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::DavStreamletSetting::MixStreamletSetting>(GetArenaNoVirtual());
    mix_setting_ = p;
  }
  return mix_setting_;
}
inline ::DavStreamletSetting::MixStreamletSetting* UpdateMixSetting::mutable_mix_setting() {
  // @@protoc_insertion_point(field_mutable:IalRequest.UpdateMixSetting.mix_setting)
  return _internal_mutable_mix_setting();
}
inline void UpdateMixSetting::set_allocated_mix_setting(::DavStreamletSetting::MixStreamletSetting* mix_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mix_setting_);
  }
  if (mix_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mix_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mix_setting, submessage_arena);
    }
    
  } else {
    
  }
  mix_setting_ = mix_setting;
  // @@protoc_insertion_point(field_set_allocated:IalRequest.UpdateMixSetting.mix_setting)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IalRequest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ialRequest_2eproto
