// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: davStreamletSetting.proto

#include "davStreamletSetting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioDecodeSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioEncodeSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFilterSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioMixSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DemuxSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MuxSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoDecodeSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoEncodeSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoFilterSetting_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoMixSetting_davWaveSetting_2eproto;
namespace DavStreamletSetting {
class InputStreamletSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputStreamletSetting> _instance;
} _InputStreamletSetting_default_instance_;
class MixStreamletSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MixStreamletSetting> _instance;
} _MixStreamletSetting_default_instance_;
class OutputStreamletSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputStreamletSetting> _instance;
} _OutputStreamletSetting_default_instance_;
}  // namespace DavStreamletSetting
static void InitDefaultsscc_info_InputStreamletSetting_davStreamletSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavStreamletSetting::_InputStreamletSetting_default_instance_;
    new (ptr) ::DavStreamletSetting::InputStreamletSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavStreamletSetting::InputStreamletSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_InputStreamletSetting_davStreamletSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_InputStreamletSetting_davStreamletSetting_2eproto}, {
      &scc_info_DemuxSetting_davWaveSetting_2eproto.base,
      &scc_info_VideoFilterSetting_davWaveSetting_2eproto.base,
      &scc_info_AudioFilterSetting_davWaveSetting_2eproto.base,
      &scc_info_VideoDecodeSetting_davWaveSetting_2eproto.base,
      &scc_info_AudioDecodeSetting_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_MixStreamletSetting_davStreamletSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavStreamletSetting::_MixStreamletSetting_default_instance_;
    new (ptr) ::DavStreamletSetting::MixStreamletSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavStreamletSetting::MixStreamletSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MixStreamletSetting_davStreamletSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MixStreamletSetting_davStreamletSetting_2eproto}, {
      &scc_info_VideoMixSetting_davWaveSetting_2eproto.base,
      &scc_info_AudioMixSetting_davWaveSetting_2eproto.base,
      &scc_info_VideoFilterSetting_davWaveSetting_2eproto.base,
      &scc_info_AudioFilterSetting_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_OutputStreamletSetting_davStreamletSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavStreamletSetting::_OutputStreamletSetting_default_instance_;
    new (ptr) ::DavStreamletSetting::OutputStreamletSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavStreamletSetting::OutputStreamletSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_OutputStreamletSetting_davStreamletSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_OutputStreamletSetting_davStreamletSetting_2eproto}, {
      &scc_info_VideoEncodeSetting_davWaveSetting_2eproto.base,
      &scc_info_AudioEncodeSetting_davWaveSetting_2eproto.base,
      &scc_info_VideoFilterSetting_davWaveSetting_2eproto.base,
      &scc_info_AudioFilterSetting_davWaveSetting_2eproto.base,
      &scc_info_MuxSetting_davWaveSetting_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_davStreamletSetting_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_davStreamletSetting_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_davStreamletSetting_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_davStreamletSetting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::InputStreamletSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::InputStreamletSetting, demux_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::InputStreamletSetting, post_decode_video_filter_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::InputStreamletSetting, post_decode_audio_filter_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::InputStreamletSetting, video_decode_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::InputStreamletSetting, audio_decode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::MixStreamletSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::MixStreamletSetting, video_mix_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::MixStreamletSetting, audio_mix_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::MixStreamletSetting, post_mix_video_filter_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::MixStreamletSetting, post_mix_audio_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::OutputStreamletSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::OutputStreamletSetting, video_encode_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::OutputStreamletSetting, audio_encode_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::OutputStreamletSetting, pre_encode_video_filter_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::OutputStreamletSetting, pre_encode_audio_filter_),
  PROTOBUF_FIELD_OFFSET(::DavStreamletSetting::OutputStreamletSetting, mux_outputs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DavStreamletSetting::InputStreamletSetting)},
  { 10, -1, sizeof(::DavStreamletSetting::MixStreamletSetting)},
  { 19, -1, sizeof(::DavStreamletSetting::OutputStreamletSetting)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavStreamletSetting::_InputStreamletSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavStreamletSetting::_MixStreamletSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavStreamletSetting::_OutputStreamletSetting_default_instance_),
};

const char descriptor_table_protodef_davStreamletSetting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031davStreamletSetting.proto\022\023DavStreamle"
  "tSetting\032\024davWaveSetting.proto\"\304\002\n\025Input"
  "StreamletSetting\022+\n\005demux\030\001 \001(\0132\034.DavWav"
  "eSetting.DemuxSetting\022D\n\030post_decode_vid"
  "eo_filter\030\002 \001(\0132\".DavWaveSetting.VideoFi"
  "lterSetting\022D\n\030post_decode_audio_filter\030"
  "\003 \001(\0132\".DavWaveSetting.AudioFilterSettin"
  "g\0228\n\014video_decode\030\004 \001(\0132\".DavWaveSetting"
  ".VideoDecodeSetting\0228\n\014audio_decode\030\005 \001("
  "\0132\".DavWaveSetting.AudioDecodeSetting\"\203\002"
  "\n\023MixStreamletSetting\0222\n\tvideo_mix\030\001 \001(\013"
  "2\037.DavWaveSetting.VideoMixSetting\0222\n\taud"
  "io_mix\030\002 \001(\0132\037.DavWaveSetting.AudioMixSe"
  "tting\022A\n\025post_mix_video_filter\030\003 \001(\0132\".D"
  "avWaveSetting.VideoFilterSetting\022A\n\025post"
  "_mix_audio_filter\030\004 \001(\0132\".DavWaveSetting"
  ".AudioFilterSetting\"\307\002\n\026OutputStreamletS"
  "etting\0228\n\014video_encode\030\001 \001(\0132\".DavWaveSe"
  "tting.VideoEncodeSetting\0228\n\014audio_encode"
  "\030\002 \001(\0132\".DavWaveSetting.AudioEncodeSetti"
  "ng\022C\n\027pre_encode_video_filter\030\003 \001(\0132\".Da"
  "vWaveSetting.VideoFilterSetting\022C\n\027pre_e"
  "ncode_audio_filter\030\004 \001(\0132\".DavWaveSettin"
  "g.AudioFilterSetting\022/\n\013mux_outputs\030\005 \003("
  "\0132\032.DavWaveSetting.MuxSettingb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_davStreamletSetting_2eproto_deps[1] = {
  &::descriptor_table_davWaveSetting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_davStreamletSetting_2eproto_sccs[3] = {
  &scc_info_InputStreamletSetting_davStreamletSetting_2eproto.base,
  &scc_info_MixStreamletSetting_davStreamletSetting_2eproto.base,
  &scc_info_OutputStreamletSetting_davStreamletSetting_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_davStreamletSetting_2eproto_once;
static bool descriptor_table_davStreamletSetting_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_davStreamletSetting_2eproto = {
  &descriptor_table_davStreamletSetting_2eproto_initialized, descriptor_table_protodef_davStreamletSetting_2eproto, "davStreamletSetting.proto", 997,
  &descriptor_table_davStreamletSetting_2eproto_once, descriptor_table_davStreamletSetting_2eproto_sccs, descriptor_table_davStreamletSetting_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_davStreamletSetting_2eproto::offsets,
  file_level_metadata_davStreamletSetting_2eproto, 3, file_level_enum_descriptors_davStreamletSetting_2eproto, file_level_service_descriptors_davStreamletSetting_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_davStreamletSetting_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_davStreamletSetting_2eproto), true);
namespace DavStreamletSetting {

// ===================================================================

void InputStreamletSetting::InitAsDefaultInstance() {
  ::DavStreamletSetting::_InputStreamletSetting_default_instance_._instance.get_mutable()->demux_ = const_cast< ::DavWaveSetting::DemuxSetting*>(
      ::DavWaveSetting::DemuxSetting::internal_default_instance());
  ::DavStreamletSetting::_InputStreamletSetting_default_instance_._instance.get_mutable()->post_decode_video_filter_ = const_cast< ::DavWaveSetting::VideoFilterSetting*>(
      ::DavWaveSetting::VideoFilterSetting::internal_default_instance());
  ::DavStreamletSetting::_InputStreamletSetting_default_instance_._instance.get_mutable()->post_decode_audio_filter_ = const_cast< ::DavWaveSetting::AudioFilterSetting*>(
      ::DavWaveSetting::AudioFilterSetting::internal_default_instance());
  ::DavStreamletSetting::_InputStreamletSetting_default_instance_._instance.get_mutable()->video_decode_ = const_cast< ::DavWaveSetting::VideoDecodeSetting*>(
      ::DavWaveSetting::VideoDecodeSetting::internal_default_instance());
  ::DavStreamletSetting::_InputStreamletSetting_default_instance_._instance.get_mutable()->audio_decode_ = const_cast< ::DavWaveSetting::AudioDecodeSetting*>(
      ::DavWaveSetting::AudioDecodeSetting::internal_default_instance());
}
class InputStreamletSetting::_Internal {
 public:
  static const ::DavWaveSetting::DemuxSetting& demux(const InputStreamletSetting* msg);
  static const ::DavWaveSetting::VideoFilterSetting& post_decode_video_filter(const InputStreamletSetting* msg);
  static const ::DavWaveSetting::AudioFilterSetting& post_decode_audio_filter(const InputStreamletSetting* msg);
  static const ::DavWaveSetting::VideoDecodeSetting& video_decode(const InputStreamletSetting* msg);
  static const ::DavWaveSetting::AudioDecodeSetting& audio_decode(const InputStreamletSetting* msg);
};

const ::DavWaveSetting::DemuxSetting&
InputStreamletSetting::_Internal::demux(const InputStreamletSetting* msg) {
  return *msg->demux_;
}
const ::DavWaveSetting::VideoFilterSetting&
InputStreamletSetting::_Internal::post_decode_video_filter(const InputStreamletSetting* msg) {
  return *msg->post_decode_video_filter_;
}
const ::DavWaveSetting::AudioFilterSetting&
InputStreamletSetting::_Internal::post_decode_audio_filter(const InputStreamletSetting* msg) {
  return *msg->post_decode_audio_filter_;
}
const ::DavWaveSetting::VideoDecodeSetting&
InputStreamletSetting::_Internal::video_decode(const InputStreamletSetting* msg) {
  return *msg->video_decode_;
}
const ::DavWaveSetting::AudioDecodeSetting&
InputStreamletSetting::_Internal::audio_decode(const InputStreamletSetting* msg) {
  return *msg->audio_decode_;
}
void InputStreamletSetting::clear_demux() {
  if (GetArenaNoVirtual() == nullptr && demux_ != nullptr) {
    delete demux_;
  }
  demux_ = nullptr;
}
void InputStreamletSetting::clear_post_decode_video_filter() {
  if (GetArenaNoVirtual() == nullptr && post_decode_video_filter_ != nullptr) {
    delete post_decode_video_filter_;
  }
  post_decode_video_filter_ = nullptr;
}
void InputStreamletSetting::clear_post_decode_audio_filter() {
  if (GetArenaNoVirtual() == nullptr && post_decode_audio_filter_ != nullptr) {
    delete post_decode_audio_filter_;
  }
  post_decode_audio_filter_ = nullptr;
}
void InputStreamletSetting::clear_video_decode() {
  if (GetArenaNoVirtual() == nullptr && video_decode_ != nullptr) {
    delete video_decode_;
  }
  video_decode_ = nullptr;
}
void InputStreamletSetting::clear_audio_decode() {
  if (GetArenaNoVirtual() == nullptr && audio_decode_ != nullptr) {
    delete audio_decode_;
  }
  audio_decode_ = nullptr;
}
InputStreamletSetting::InputStreamletSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavStreamletSetting.InputStreamletSetting)
}
InputStreamletSetting::InputStreamletSetting(const InputStreamletSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_demux()) {
    demux_ = new ::DavWaveSetting::DemuxSetting(*from.demux_);
  } else {
    demux_ = nullptr;
  }
  if (from._internal_has_post_decode_video_filter()) {
    post_decode_video_filter_ = new ::DavWaveSetting::VideoFilterSetting(*from.post_decode_video_filter_);
  } else {
    post_decode_video_filter_ = nullptr;
  }
  if (from._internal_has_post_decode_audio_filter()) {
    post_decode_audio_filter_ = new ::DavWaveSetting::AudioFilterSetting(*from.post_decode_audio_filter_);
  } else {
    post_decode_audio_filter_ = nullptr;
  }
  if (from._internal_has_video_decode()) {
    video_decode_ = new ::DavWaveSetting::VideoDecodeSetting(*from.video_decode_);
  } else {
    video_decode_ = nullptr;
  }
  if (from._internal_has_audio_decode()) {
    audio_decode_ = new ::DavWaveSetting::AudioDecodeSetting(*from.audio_decode_);
  } else {
    audio_decode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DavStreamletSetting.InputStreamletSetting)
}

void InputStreamletSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputStreamletSetting_davStreamletSetting_2eproto.base);
  ::memset(&demux_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_decode_) -
      reinterpret_cast<char*>(&demux_)) + sizeof(audio_decode_));
}

InputStreamletSetting::~InputStreamletSetting() {
  // @@protoc_insertion_point(destructor:DavStreamletSetting.InputStreamletSetting)
  SharedDtor();
}

void InputStreamletSetting::SharedDtor() {
  if (this != internal_default_instance()) delete demux_;
  if (this != internal_default_instance()) delete post_decode_video_filter_;
  if (this != internal_default_instance()) delete post_decode_audio_filter_;
  if (this != internal_default_instance()) delete video_decode_;
  if (this != internal_default_instance()) delete audio_decode_;
}

void InputStreamletSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputStreamletSetting& InputStreamletSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputStreamletSetting_davStreamletSetting_2eproto.base);
  return *internal_default_instance();
}


void InputStreamletSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavStreamletSetting.InputStreamletSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && demux_ != nullptr) {
    delete demux_;
  }
  demux_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_decode_video_filter_ != nullptr) {
    delete post_decode_video_filter_;
  }
  post_decode_video_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_decode_audio_filter_ != nullptr) {
    delete post_decode_audio_filter_;
  }
  post_decode_audio_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && video_decode_ != nullptr) {
    delete video_decode_;
  }
  video_decode_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && audio_decode_ != nullptr) {
    delete audio_decode_;
  }
  audio_decode_ = nullptr;
  _internal_metadata_.Clear();
}

const char* InputStreamletSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DavWaveSetting.DemuxSetting demux = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_demux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.VideoFilterSetting post_decode_video_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_decode_video_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.AudioFilterSetting post_decode_audio_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_decode_audio_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.VideoDecodeSetting video_decode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_decode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.AudioDecodeSetting audio_decode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_decode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputStreamletSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavStreamletSetting.InputStreamletSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DavWaveSetting.DemuxSetting demux = 1;
  if (this->has_demux()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::demux(this), target, stream);
  }

  // .DavWaveSetting.VideoFilterSetting post_decode_video_filter = 2;
  if (this->has_post_decode_video_filter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::post_decode_video_filter(this), target, stream);
  }

  // .DavWaveSetting.AudioFilterSetting post_decode_audio_filter = 3;
  if (this->has_post_decode_audio_filter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::post_decode_audio_filter(this), target, stream);
  }

  // .DavWaveSetting.VideoDecodeSetting video_decode = 4;
  if (this->has_video_decode()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::video_decode(this), target, stream);
  }

  // .DavWaveSetting.AudioDecodeSetting audio_decode = 5;
  if (this->has_audio_decode()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::audio_decode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavStreamletSetting.InputStreamletSetting)
  return target;
}

size_t InputStreamletSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavStreamletSetting.InputStreamletSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DavWaveSetting.DemuxSetting demux = 1;
  if (this->has_demux()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *demux_);
  }

  // .DavWaveSetting.VideoFilterSetting post_decode_video_filter = 2;
  if (this->has_post_decode_video_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_decode_video_filter_);
  }

  // .DavWaveSetting.AudioFilterSetting post_decode_audio_filter = 3;
  if (this->has_post_decode_audio_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_decode_audio_filter_);
  }

  // .DavWaveSetting.VideoDecodeSetting video_decode = 4;
  if (this->has_video_decode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_decode_);
  }

  // .DavWaveSetting.AudioDecodeSetting audio_decode = 5;
  if (this->has_audio_decode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_decode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputStreamletSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavStreamletSetting.InputStreamletSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const InputStreamletSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputStreamletSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavStreamletSetting.InputStreamletSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavStreamletSetting.InputStreamletSetting)
    MergeFrom(*source);
  }
}

void InputStreamletSetting::MergeFrom(const InputStreamletSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavStreamletSetting.InputStreamletSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_demux()) {
    _internal_mutable_demux()->::DavWaveSetting::DemuxSetting::MergeFrom(from._internal_demux());
  }
  if (from.has_post_decode_video_filter()) {
    _internal_mutable_post_decode_video_filter()->::DavWaveSetting::VideoFilterSetting::MergeFrom(from._internal_post_decode_video_filter());
  }
  if (from.has_post_decode_audio_filter()) {
    _internal_mutable_post_decode_audio_filter()->::DavWaveSetting::AudioFilterSetting::MergeFrom(from._internal_post_decode_audio_filter());
  }
  if (from.has_video_decode()) {
    _internal_mutable_video_decode()->::DavWaveSetting::VideoDecodeSetting::MergeFrom(from._internal_video_decode());
  }
  if (from.has_audio_decode()) {
    _internal_mutable_audio_decode()->::DavWaveSetting::AudioDecodeSetting::MergeFrom(from._internal_audio_decode());
  }
}

void InputStreamletSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavStreamletSetting.InputStreamletSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputStreamletSetting::CopyFrom(const InputStreamletSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavStreamletSetting.InputStreamletSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputStreamletSetting::IsInitialized() const {
  return true;
}

void InputStreamletSetting::InternalSwap(InputStreamletSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(demux_, other->demux_);
  swap(post_decode_video_filter_, other->post_decode_video_filter_);
  swap(post_decode_audio_filter_, other->post_decode_audio_filter_);
  swap(video_decode_, other->video_decode_);
  swap(audio_decode_, other->audio_decode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputStreamletSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MixStreamletSetting::InitAsDefaultInstance() {
  ::DavStreamletSetting::_MixStreamletSetting_default_instance_._instance.get_mutable()->video_mix_ = const_cast< ::DavWaveSetting::VideoMixSetting*>(
      ::DavWaveSetting::VideoMixSetting::internal_default_instance());
  ::DavStreamletSetting::_MixStreamletSetting_default_instance_._instance.get_mutable()->audio_mix_ = const_cast< ::DavWaveSetting::AudioMixSetting*>(
      ::DavWaveSetting::AudioMixSetting::internal_default_instance());
  ::DavStreamletSetting::_MixStreamletSetting_default_instance_._instance.get_mutable()->post_mix_video_filter_ = const_cast< ::DavWaveSetting::VideoFilterSetting*>(
      ::DavWaveSetting::VideoFilterSetting::internal_default_instance());
  ::DavStreamletSetting::_MixStreamletSetting_default_instance_._instance.get_mutable()->post_mix_audio_filter_ = const_cast< ::DavWaveSetting::AudioFilterSetting*>(
      ::DavWaveSetting::AudioFilterSetting::internal_default_instance());
}
class MixStreamletSetting::_Internal {
 public:
  static const ::DavWaveSetting::VideoMixSetting& video_mix(const MixStreamletSetting* msg);
  static const ::DavWaveSetting::AudioMixSetting& audio_mix(const MixStreamletSetting* msg);
  static const ::DavWaveSetting::VideoFilterSetting& post_mix_video_filter(const MixStreamletSetting* msg);
  static const ::DavWaveSetting::AudioFilterSetting& post_mix_audio_filter(const MixStreamletSetting* msg);
};

const ::DavWaveSetting::VideoMixSetting&
MixStreamletSetting::_Internal::video_mix(const MixStreamletSetting* msg) {
  return *msg->video_mix_;
}
const ::DavWaveSetting::AudioMixSetting&
MixStreamletSetting::_Internal::audio_mix(const MixStreamletSetting* msg) {
  return *msg->audio_mix_;
}
const ::DavWaveSetting::VideoFilterSetting&
MixStreamletSetting::_Internal::post_mix_video_filter(const MixStreamletSetting* msg) {
  return *msg->post_mix_video_filter_;
}
const ::DavWaveSetting::AudioFilterSetting&
MixStreamletSetting::_Internal::post_mix_audio_filter(const MixStreamletSetting* msg) {
  return *msg->post_mix_audio_filter_;
}
void MixStreamletSetting::clear_video_mix() {
  if (GetArenaNoVirtual() == nullptr && video_mix_ != nullptr) {
    delete video_mix_;
  }
  video_mix_ = nullptr;
}
void MixStreamletSetting::clear_audio_mix() {
  if (GetArenaNoVirtual() == nullptr && audio_mix_ != nullptr) {
    delete audio_mix_;
  }
  audio_mix_ = nullptr;
}
void MixStreamletSetting::clear_post_mix_video_filter() {
  if (GetArenaNoVirtual() == nullptr && post_mix_video_filter_ != nullptr) {
    delete post_mix_video_filter_;
  }
  post_mix_video_filter_ = nullptr;
}
void MixStreamletSetting::clear_post_mix_audio_filter() {
  if (GetArenaNoVirtual() == nullptr && post_mix_audio_filter_ != nullptr) {
    delete post_mix_audio_filter_;
  }
  post_mix_audio_filter_ = nullptr;
}
MixStreamletSetting::MixStreamletSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavStreamletSetting.MixStreamletSetting)
}
MixStreamletSetting::MixStreamletSetting(const MixStreamletSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_video_mix()) {
    video_mix_ = new ::DavWaveSetting::VideoMixSetting(*from.video_mix_);
  } else {
    video_mix_ = nullptr;
  }
  if (from._internal_has_audio_mix()) {
    audio_mix_ = new ::DavWaveSetting::AudioMixSetting(*from.audio_mix_);
  } else {
    audio_mix_ = nullptr;
  }
  if (from._internal_has_post_mix_video_filter()) {
    post_mix_video_filter_ = new ::DavWaveSetting::VideoFilterSetting(*from.post_mix_video_filter_);
  } else {
    post_mix_video_filter_ = nullptr;
  }
  if (from._internal_has_post_mix_audio_filter()) {
    post_mix_audio_filter_ = new ::DavWaveSetting::AudioFilterSetting(*from.post_mix_audio_filter_);
  } else {
    post_mix_audio_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DavStreamletSetting.MixStreamletSetting)
}

void MixStreamletSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MixStreamletSetting_davStreamletSetting_2eproto.base);
  ::memset(&video_mix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_mix_audio_filter_) -
      reinterpret_cast<char*>(&video_mix_)) + sizeof(post_mix_audio_filter_));
}

MixStreamletSetting::~MixStreamletSetting() {
  // @@protoc_insertion_point(destructor:DavStreamletSetting.MixStreamletSetting)
  SharedDtor();
}

void MixStreamletSetting::SharedDtor() {
  if (this != internal_default_instance()) delete video_mix_;
  if (this != internal_default_instance()) delete audio_mix_;
  if (this != internal_default_instance()) delete post_mix_video_filter_;
  if (this != internal_default_instance()) delete post_mix_audio_filter_;
}

void MixStreamletSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MixStreamletSetting& MixStreamletSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MixStreamletSetting_davStreamletSetting_2eproto.base);
  return *internal_default_instance();
}


void MixStreamletSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavStreamletSetting.MixStreamletSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && video_mix_ != nullptr) {
    delete video_mix_;
  }
  video_mix_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && audio_mix_ != nullptr) {
    delete audio_mix_;
  }
  audio_mix_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_mix_video_filter_ != nullptr) {
    delete post_mix_video_filter_;
  }
  post_mix_video_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_mix_audio_filter_ != nullptr) {
    delete post_mix_audio_filter_;
  }
  post_mix_audio_filter_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MixStreamletSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DavWaveSetting.VideoMixSetting video_mix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_mix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.AudioMixSetting audio_mix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_mix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.VideoFilterSetting post_mix_video_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_mix_video_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.AudioFilterSetting post_mix_audio_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_mix_audio_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixStreamletSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavStreamletSetting.MixStreamletSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DavWaveSetting.VideoMixSetting video_mix = 1;
  if (this->has_video_mix()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::video_mix(this), target, stream);
  }

  // .DavWaveSetting.AudioMixSetting audio_mix = 2;
  if (this->has_audio_mix()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::audio_mix(this), target, stream);
  }

  // .DavWaveSetting.VideoFilterSetting post_mix_video_filter = 3;
  if (this->has_post_mix_video_filter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::post_mix_video_filter(this), target, stream);
  }

  // .DavWaveSetting.AudioFilterSetting post_mix_audio_filter = 4;
  if (this->has_post_mix_audio_filter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::post_mix_audio_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavStreamletSetting.MixStreamletSetting)
  return target;
}

size_t MixStreamletSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavStreamletSetting.MixStreamletSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DavWaveSetting.VideoMixSetting video_mix = 1;
  if (this->has_video_mix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_mix_);
  }

  // .DavWaveSetting.AudioMixSetting audio_mix = 2;
  if (this->has_audio_mix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_mix_);
  }

  // .DavWaveSetting.VideoFilterSetting post_mix_video_filter = 3;
  if (this->has_post_mix_video_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_mix_video_filter_);
  }

  // .DavWaveSetting.AudioFilterSetting post_mix_audio_filter = 4;
  if (this->has_post_mix_audio_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_mix_audio_filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixStreamletSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavStreamletSetting.MixStreamletSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const MixStreamletSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MixStreamletSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavStreamletSetting.MixStreamletSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavStreamletSetting.MixStreamletSetting)
    MergeFrom(*source);
  }
}

void MixStreamletSetting::MergeFrom(const MixStreamletSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavStreamletSetting.MixStreamletSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_mix()) {
    _internal_mutable_video_mix()->::DavWaveSetting::VideoMixSetting::MergeFrom(from._internal_video_mix());
  }
  if (from.has_audio_mix()) {
    _internal_mutable_audio_mix()->::DavWaveSetting::AudioMixSetting::MergeFrom(from._internal_audio_mix());
  }
  if (from.has_post_mix_video_filter()) {
    _internal_mutable_post_mix_video_filter()->::DavWaveSetting::VideoFilterSetting::MergeFrom(from._internal_post_mix_video_filter());
  }
  if (from.has_post_mix_audio_filter()) {
    _internal_mutable_post_mix_audio_filter()->::DavWaveSetting::AudioFilterSetting::MergeFrom(from._internal_post_mix_audio_filter());
  }
}

void MixStreamletSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavStreamletSetting.MixStreamletSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixStreamletSetting::CopyFrom(const MixStreamletSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavStreamletSetting.MixStreamletSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixStreamletSetting::IsInitialized() const {
  return true;
}

void MixStreamletSetting::InternalSwap(MixStreamletSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(video_mix_, other->video_mix_);
  swap(audio_mix_, other->audio_mix_);
  swap(post_mix_video_filter_, other->post_mix_video_filter_);
  swap(post_mix_audio_filter_, other->post_mix_audio_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixStreamletSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputStreamletSetting::InitAsDefaultInstance() {
  ::DavStreamletSetting::_OutputStreamletSetting_default_instance_._instance.get_mutable()->video_encode_ = const_cast< ::DavWaveSetting::VideoEncodeSetting*>(
      ::DavWaveSetting::VideoEncodeSetting::internal_default_instance());
  ::DavStreamletSetting::_OutputStreamletSetting_default_instance_._instance.get_mutable()->audio_encode_ = const_cast< ::DavWaveSetting::AudioEncodeSetting*>(
      ::DavWaveSetting::AudioEncodeSetting::internal_default_instance());
  ::DavStreamletSetting::_OutputStreamletSetting_default_instance_._instance.get_mutable()->pre_encode_video_filter_ = const_cast< ::DavWaveSetting::VideoFilterSetting*>(
      ::DavWaveSetting::VideoFilterSetting::internal_default_instance());
  ::DavStreamletSetting::_OutputStreamletSetting_default_instance_._instance.get_mutable()->pre_encode_audio_filter_ = const_cast< ::DavWaveSetting::AudioFilterSetting*>(
      ::DavWaveSetting::AudioFilterSetting::internal_default_instance());
}
class OutputStreamletSetting::_Internal {
 public:
  static const ::DavWaveSetting::VideoEncodeSetting& video_encode(const OutputStreamletSetting* msg);
  static const ::DavWaveSetting::AudioEncodeSetting& audio_encode(const OutputStreamletSetting* msg);
  static const ::DavWaveSetting::VideoFilterSetting& pre_encode_video_filter(const OutputStreamletSetting* msg);
  static const ::DavWaveSetting::AudioFilterSetting& pre_encode_audio_filter(const OutputStreamletSetting* msg);
};

const ::DavWaveSetting::VideoEncodeSetting&
OutputStreamletSetting::_Internal::video_encode(const OutputStreamletSetting* msg) {
  return *msg->video_encode_;
}
const ::DavWaveSetting::AudioEncodeSetting&
OutputStreamletSetting::_Internal::audio_encode(const OutputStreamletSetting* msg) {
  return *msg->audio_encode_;
}
const ::DavWaveSetting::VideoFilterSetting&
OutputStreamletSetting::_Internal::pre_encode_video_filter(const OutputStreamletSetting* msg) {
  return *msg->pre_encode_video_filter_;
}
const ::DavWaveSetting::AudioFilterSetting&
OutputStreamletSetting::_Internal::pre_encode_audio_filter(const OutputStreamletSetting* msg) {
  return *msg->pre_encode_audio_filter_;
}
void OutputStreamletSetting::clear_video_encode() {
  if (GetArenaNoVirtual() == nullptr && video_encode_ != nullptr) {
    delete video_encode_;
  }
  video_encode_ = nullptr;
}
void OutputStreamletSetting::clear_audio_encode() {
  if (GetArenaNoVirtual() == nullptr && audio_encode_ != nullptr) {
    delete audio_encode_;
  }
  audio_encode_ = nullptr;
}
void OutputStreamletSetting::clear_pre_encode_video_filter() {
  if (GetArenaNoVirtual() == nullptr && pre_encode_video_filter_ != nullptr) {
    delete pre_encode_video_filter_;
  }
  pre_encode_video_filter_ = nullptr;
}
void OutputStreamletSetting::clear_pre_encode_audio_filter() {
  if (GetArenaNoVirtual() == nullptr && pre_encode_audio_filter_ != nullptr) {
    delete pre_encode_audio_filter_;
  }
  pre_encode_audio_filter_ = nullptr;
}
void OutputStreamletSetting::clear_mux_outputs() {
  mux_outputs_.Clear();
}
OutputStreamletSetting::OutputStreamletSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavStreamletSetting.OutputStreamletSetting)
}
OutputStreamletSetting::OutputStreamletSetting(const OutputStreamletSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mux_outputs_(from.mux_outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_video_encode()) {
    video_encode_ = new ::DavWaveSetting::VideoEncodeSetting(*from.video_encode_);
  } else {
    video_encode_ = nullptr;
  }
  if (from._internal_has_audio_encode()) {
    audio_encode_ = new ::DavWaveSetting::AudioEncodeSetting(*from.audio_encode_);
  } else {
    audio_encode_ = nullptr;
  }
  if (from._internal_has_pre_encode_video_filter()) {
    pre_encode_video_filter_ = new ::DavWaveSetting::VideoFilterSetting(*from.pre_encode_video_filter_);
  } else {
    pre_encode_video_filter_ = nullptr;
  }
  if (from._internal_has_pre_encode_audio_filter()) {
    pre_encode_audio_filter_ = new ::DavWaveSetting::AudioFilterSetting(*from.pre_encode_audio_filter_);
  } else {
    pre_encode_audio_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DavStreamletSetting.OutputStreamletSetting)
}

void OutputStreamletSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputStreamletSetting_davStreamletSetting_2eproto.base);
  ::memset(&video_encode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_encode_audio_filter_) -
      reinterpret_cast<char*>(&video_encode_)) + sizeof(pre_encode_audio_filter_));
}

OutputStreamletSetting::~OutputStreamletSetting() {
  // @@protoc_insertion_point(destructor:DavStreamletSetting.OutputStreamletSetting)
  SharedDtor();
}

void OutputStreamletSetting::SharedDtor() {
  if (this != internal_default_instance()) delete video_encode_;
  if (this != internal_default_instance()) delete audio_encode_;
  if (this != internal_default_instance()) delete pre_encode_video_filter_;
  if (this != internal_default_instance()) delete pre_encode_audio_filter_;
}

void OutputStreamletSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputStreamletSetting& OutputStreamletSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputStreamletSetting_davStreamletSetting_2eproto.base);
  return *internal_default_instance();
}


void OutputStreamletSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavStreamletSetting.OutputStreamletSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mux_outputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && video_encode_ != nullptr) {
    delete video_encode_;
  }
  video_encode_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && audio_encode_ != nullptr) {
    delete audio_encode_;
  }
  audio_encode_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pre_encode_video_filter_ != nullptr) {
    delete pre_encode_video_filter_;
  }
  pre_encode_video_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pre_encode_audio_filter_ != nullptr) {
    delete pre_encode_audio_filter_;
  }
  pre_encode_audio_filter_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OutputStreamletSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DavWaveSetting.VideoEncodeSetting video_encode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_encode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.AudioEncodeSetting audio_encode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_encode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.VideoFilterSetting pre_encode_video_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_encode_video_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.AudioFilterSetting pre_encode_audio_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_encode_audio_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DavWaveSetting.MuxSetting mux_outputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mux_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputStreamletSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavStreamletSetting.OutputStreamletSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DavWaveSetting.VideoEncodeSetting video_encode = 1;
  if (this->has_video_encode()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::video_encode(this), target, stream);
  }

  // .DavWaveSetting.AudioEncodeSetting audio_encode = 2;
  if (this->has_audio_encode()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::audio_encode(this), target, stream);
  }

  // .DavWaveSetting.VideoFilterSetting pre_encode_video_filter = 3;
  if (this->has_pre_encode_video_filter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::pre_encode_video_filter(this), target, stream);
  }

  // .DavWaveSetting.AudioFilterSetting pre_encode_audio_filter = 4;
  if (this->has_pre_encode_audio_filter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::pre_encode_audio_filter(this), target, stream);
  }

  // repeated .DavWaveSetting.MuxSetting mux_outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mux_outputs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_mux_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavStreamletSetting.OutputStreamletSetting)
  return target;
}

size_t OutputStreamletSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavStreamletSetting.OutputStreamletSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DavWaveSetting.MuxSetting mux_outputs = 5;
  total_size += 1UL * this->_internal_mux_outputs_size();
  for (const auto& msg : this->mux_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DavWaveSetting.VideoEncodeSetting video_encode = 1;
  if (this->has_video_encode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_encode_);
  }

  // .DavWaveSetting.AudioEncodeSetting audio_encode = 2;
  if (this->has_audio_encode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_encode_);
  }

  // .DavWaveSetting.VideoFilterSetting pre_encode_video_filter = 3;
  if (this->has_pre_encode_video_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pre_encode_video_filter_);
  }

  // .DavWaveSetting.AudioFilterSetting pre_encode_audio_filter = 4;
  if (this->has_pre_encode_audio_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pre_encode_audio_filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputStreamletSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavStreamletSetting.OutputStreamletSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputStreamletSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputStreamletSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavStreamletSetting.OutputStreamletSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavStreamletSetting.OutputStreamletSetting)
    MergeFrom(*source);
  }
}

void OutputStreamletSetting::MergeFrom(const OutputStreamletSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavStreamletSetting.OutputStreamletSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mux_outputs_.MergeFrom(from.mux_outputs_);
  if (from.has_video_encode()) {
    _internal_mutable_video_encode()->::DavWaveSetting::VideoEncodeSetting::MergeFrom(from._internal_video_encode());
  }
  if (from.has_audio_encode()) {
    _internal_mutable_audio_encode()->::DavWaveSetting::AudioEncodeSetting::MergeFrom(from._internal_audio_encode());
  }
  if (from.has_pre_encode_video_filter()) {
    _internal_mutable_pre_encode_video_filter()->::DavWaveSetting::VideoFilterSetting::MergeFrom(from._internal_pre_encode_video_filter());
  }
  if (from.has_pre_encode_audio_filter()) {
    _internal_mutable_pre_encode_audio_filter()->::DavWaveSetting::AudioFilterSetting::MergeFrom(from._internal_pre_encode_audio_filter());
  }
}

void OutputStreamletSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavStreamletSetting.OutputStreamletSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputStreamletSetting::CopyFrom(const OutputStreamletSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavStreamletSetting.OutputStreamletSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputStreamletSetting::IsInitialized() const {
  return true;
}

void OutputStreamletSetting::InternalSwap(OutputStreamletSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mux_outputs_.InternalSwap(&other->mux_outputs_);
  swap(video_encode_, other->video_encode_);
  swap(audio_encode_, other->audio_encode_);
  swap(pre_encode_video_filter_, other->pre_encode_video_filter_);
  swap(pre_encode_audio_filter_, other->pre_encode_audio_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputStreamletSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DavStreamletSetting
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DavStreamletSetting::InputStreamletSetting* Arena::CreateMaybeMessage< ::DavStreamletSetting::InputStreamletSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavStreamletSetting::InputStreamletSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavStreamletSetting::MixStreamletSetting* Arena::CreateMaybeMessage< ::DavStreamletSetting::MixStreamletSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavStreamletSetting::MixStreamletSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavStreamletSetting::OutputStreamletSetting* Arena::CreateMaybeMessage< ::DavStreamletSetting::OutputStreamletSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavStreamletSetting::OutputStreamletSetting >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
