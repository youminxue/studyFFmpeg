// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: davWaveSetting.proto

#include "davWaveSetting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuxSetting_AvdictMuxOptionEntry_DoNotUse_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoCellCoordinate_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_davWaveSetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoMixLayoutUpdate_davWaveSetting_2eproto;
namespace DavWaveSetting {
class DemuxSetting_AvdictDemuxOptionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemuxSetting_AvdictDemuxOptionEntry_DoNotUse> _instance;
} _DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_default_instance_;
class DemuxSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemuxSetting> _instance;
} _DemuxSetting_default_instance_;
class VideoFilterSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoFilterSetting> _instance;
} _VideoFilterSetting_default_instance_;
class AudioFilterSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioFilterSetting> _instance;
} _AudioFilterSetting_default_instance_;
class VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse> _instance;
} _VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_;
class VideoDecodeSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoDecodeSetting> _instance;
} _VideoDecodeSetting_default_instance_;
class AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse> _instance;
} _AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_;
class AudioDecodeSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioDecodeSetting> _instance;
} _AudioDecodeSetting_default_instance_;
class VideoMixSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoMixSetting> _instance;
} _VideoMixSetting_default_instance_;
class AudioMixSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioMixSetting> _instance;
} _AudioMixSetting_default_instance_;
class VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse> _instance;
} _VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_;
class VideoEncodeSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoEncodeSetting> _instance;
} _VideoEncodeSetting_default_instance_;
class AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse> _instance;
} _AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_;
class AudioEncodeSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioEncodeSetting> _instance;
} _AudioEncodeSetting_default_instance_;
class MuxSetting_AvdictMuxOptionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuxSetting_AvdictMuxOptionEntry_DoNotUse> _instance;
} _MuxSetting_AvdictMuxOptionEntry_DoNotUse_default_instance_;
class MuxSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuxSetting> _instance;
} _MuxSetting_default_instance_;
class VideoMixLayoutUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoMixLayoutUpdate> _instance;
} _VideoMixLayoutUpdate_default_instance_;
class VideoCellCoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoCellCoordinate> _instance;
} _VideoCellCoordinate_default_instance_;
}  // namespace DavWaveSetting
static void InitDefaultsscc_info_AudioDecodeSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_AudioDecodeSetting_default_instance_;
    new (ptr) ::DavWaveSetting::AudioDecodeSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::AudioDecodeSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioDecodeSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AudioDecodeSetting_davWaveSetting_2eproto}, {
      &scc_info_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_;
    new (ptr) ::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse();
  }
  ::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_AudioEncodeSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_AudioEncodeSetting_default_instance_;
    new (ptr) ::DavWaveSetting::AudioEncodeSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::AudioEncodeSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioEncodeSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AudioEncodeSetting_davWaveSetting_2eproto}, {
      &scc_info_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_;
    new (ptr) ::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse();
  }
  ::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_AudioFilterSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_AudioFilterSetting_default_instance_;
    new (ptr) ::DavWaveSetting::AudioFilterSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::AudioFilterSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFilterSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioFilterSetting_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_AudioMixSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_AudioMixSetting_default_instance_;
    new (ptr) ::DavWaveSetting::AudioMixSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::AudioMixSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioMixSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioMixSetting_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_DemuxSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_DemuxSetting_default_instance_;
    new (ptr) ::DavWaveSetting::DemuxSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::DemuxSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DemuxSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DemuxSetting_davWaveSetting_2eproto}, {
      &scc_info_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_default_instance_;
    new (ptr) ::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse();
  }
  ::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_MuxSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_MuxSetting_default_instance_;
    new (ptr) ::DavWaveSetting::MuxSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::MuxSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MuxSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MuxSetting_davWaveSetting_2eproto}, {
      &scc_info_MuxSetting_AvdictMuxOptionEntry_DoNotUse_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_MuxSetting_AvdictMuxOptionEntry_DoNotUse_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_MuxSetting_AvdictMuxOptionEntry_DoNotUse_default_instance_;
    new (ptr) ::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse();
  }
  ::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuxSetting_AvdictMuxOptionEntry_DoNotUse_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MuxSetting_AvdictMuxOptionEntry_DoNotUse_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_VideoCellCoordinate_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_VideoCellCoordinate_default_instance_;
    new (ptr) ::DavWaveSetting::VideoCellCoordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::VideoCellCoordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoCellCoordinate_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoCellCoordinate_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_VideoDecodeSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_VideoDecodeSetting_default_instance_;
    new (ptr) ::DavWaveSetting::VideoDecodeSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::VideoDecodeSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoDecodeSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoDecodeSetting_davWaveSetting_2eproto}, {
      &scc_info_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_;
    new (ptr) ::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse();
  }
  ::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_VideoEncodeSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_VideoEncodeSetting_default_instance_;
    new (ptr) ::DavWaveSetting::VideoEncodeSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::VideoEncodeSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoEncodeSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoEncodeSetting_davWaveSetting_2eproto}, {
      &scc_info_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_;
    new (ptr) ::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse();
  }
  ::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_VideoFilterSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_VideoFilterSetting_default_instance_;
    new (ptr) ::DavWaveSetting::VideoFilterSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::VideoFilterSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoFilterSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoFilterSetting_davWaveSetting_2eproto}, {}};

static void InitDefaultsscc_info_VideoMixLayoutUpdate_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_VideoMixLayoutUpdate_default_instance_;
    new (ptr) ::DavWaveSetting::VideoMixLayoutUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::VideoMixLayoutUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoMixLayoutUpdate_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoMixLayoutUpdate_davWaveSetting_2eproto}, {
      &scc_info_VideoCellCoordinate_davWaveSetting_2eproto.base,}};

static void InitDefaultsscc_info_VideoMixSetting_davWaveSetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DavWaveSetting::_VideoMixSetting_default_instance_;
    new (ptr) ::DavWaveSetting::VideoMixSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DavWaveSetting::VideoMixSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoMixSetting_davWaveSetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoMixSetting_davWaveSetting_2eproto}, {
      &scc_info_VideoMixLayoutUpdate_davWaveSetting_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_davWaveSetting_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_davWaveSetting_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_davWaveSetting_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_davWaveSetting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting, demux_type_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting, input_fps_emulate_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting, read_timeout_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting, reconnect_times_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::DemuxSetting, avdict_demux_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoFilterSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoFilterSetting, filter_type_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoFilterSetting, filter_arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioFilterSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioFilterSetting, filter_type_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioFilterSetting, filter_arg_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoDecodeSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoDecodeSetting, decode_type_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoDecodeSetting, avdict_decode_option_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioDecodeSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioDecodeSetting, decode_type_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioDecodeSetting, avdict_decode_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, b_regenerate_pts_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, b_start_after_all_join_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, b_quit_if_no_input_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, width_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, height_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, fps_num_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, fps_den_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, margin_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, border_width_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, border_color_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, fillet_radius_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, backgroud_image_path_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixSetting, layout_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioMixSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioMixSetting, frame_size_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioMixSetting, b_mute_at_start_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting, encode_type_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting, codec_name_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting, fps_num_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting, fps_den_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoEncodeSetting, avdict_encode_option_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioEncodeSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioEncodeSetting, encode_type_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioEncodeSetting, codec_name_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::AudioEncodeSetting, avdict_encode_option_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::MuxSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::MuxSetting, mux_type_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::MuxSetting, mux_fmt_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::MuxSetting, avdict_mux_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixLayoutUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixLayoutUpdate, layout_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoMixLayoutUpdate, cells_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoCellCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoCellCoordinate, x_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoCellCoordinate, y_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoCellCoordinate, w_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoCellCoordinate, h_),
  PROTOBUF_FIELD_OFFSET(::DavWaveSetting::VideoCellCoordinate, layer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse)},
  { 9, -1, sizeof(::DavWaveSetting::DemuxSetting)},
  { 19, -1, sizeof(::DavWaveSetting::VideoFilterSetting)},
  { 26, -1, sizeof(::DavWaveSetting::AudioFilterSetting)},
  { 33, 40, sizeof(::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse)},
  { 42, -1, sizeof(::DavWaveSetting::VideoDecodeSetting)},
  { 49, 56, sizeof(::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse)},
  { 58, -1, sizeof(::DavWaveSetting::AudioDecodeSetting)},
  { 65, -1, sizeof(::DavWaveSetting::VideoMixSetting)},
  { 83, -1, sizeof(::DavWaveSetting::AudioMixSetting)},
  { 90, 97, sizeof(::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse)},
  { 99, -1, sizeof(::DavWaveSetting::VideoEncodeSetting)},
  { 109, 116, sizeof(::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse)},
  { 118, -1, sizeof(::DavWaveSetting::AudioEncodeSetting)},
  { 126, 133, sizeof(::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse)},
  { 135, -1, sizeof(::DavWaveSetting::MuxSetting)},
  { 143, -1, sizeof(::DavWaveSetting::VideoMixLayoutUpdate)},
  { 150, -1, sizeof(::DavWaveSetting::VideoCellCoordinate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_DemuxSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_VideoFilterSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_AudioFilterSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_VideoDecodeSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_AudioDecodeSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_VideoMixSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_AudioMixSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_VideoEncodeSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_AudioEncodeSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_MuxSetting_AvdictMuxOptionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_MuxSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_VideoMixLayoutUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DavWaveSetting::_VideoCellCoordinate_default_instance_),
};

const char descriptor_table_protodef_davWaveSetting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024davWaveSetting.proto\022\016DavWaveSetting\"\370"
  "\001\n\014DemuxSetting\022\022\n\ndemux_type\030\001 \001(\t\022\031\n\021i"
  "nput_fps_emulate\030\002 \001(\010\022\024\n\014read_timeout\030\003"
  " \001(\005\022\027\n\017reconnect_times\030\004 \001(\005\022P\n\023avdict_"
  "demux_option\030\005 \003(\01323.DavWaveSetting.Demu"
  "xSetting.AvdictDemuxOptionEntry\0328\n\026Avdic"
  "tDemuxOptionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\"=\n\022VideoFilterSetting\022\023\n\013filte"
  "r_type\030\001 \001(\t\022\022\n\nfilter_arg\030\002 \001(\t\"=\n\022Audi"
  "oFilterSetting\022\023\n\013filter_type\030\001 \001(\t\022\022\n\nf"
  "ilter_arg\030\002 \001(\t\"\276\001\n\022VideoDecodeSetting\022\023"
  "\n\013decode_type\030\001 \001(\t\022X\n\024avdict_decode_opt"
  "ion\030\002 \003(\0132:.DavWaveSetting.VideoDecodeSe"
  "tting.AvdictDecodeOptionEntry\0329\n\027AvdictD"
  "ecodeOptionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\"\276\001\n\022AudioDecodeSetting\022\023\n\013decod"
  "e_type\030\001 \001(\t\022X\n\024avdict_decode_option\030\002 \003"
  "(\0132:.DavWaveSetting.AudioDecodeSetting.A"
  "vdictDecodeOptionEntry\0329\n\027AvdictDecodeOp"
  "tionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"\324\002\n\017VideoMixSetting\022\030\n\020b_regenerate_pt"
  "s\030\001 \001(\010\022\036\n\026b_start_after_all_join\030\002 \001(\010\022"
  "\032\n\022b_quit_if_no_input\030\003 \001(\010\022\r\n\005width\030\n \001"
  "(\005\022\016\n\006height\030\013 \001(\005\022\017\n\007fps_num\030\014 \001(\005\022\017\n\007f"
  "ps_den\030\r \001(\005\022\016\n\006margin\030\016 \001(\005\022\024\n\014border_w"
  "idth\030\017 \001(\005\022\024\n\014border_color\030\020 \001(\005\022\025\n\rfill"
  "et_radius\030\021 \001(\005\022\034\n\024backgroud_image_path\030"
  "\022 \001(\t\0229\n\013layout_info\030\023 \001(\0132$.DavWaveSett"
  "ing.VideoMixLayoutUpdate\">\n\017AudioMixSett"
  "ing\022\022\n\nframe_size\030\001 \001(\005\022\027\n\017b_mute_at_sta"
  "rt\030\002 \001(\010\"\364\001\n\022VideoEncodeSetting\022\023\n\013encod"
  "e_type\030\001 \001(\t\022\022\n\ncodec_name\030\002 \001(\t\022\017\n\007fps_"
  "num\030\003 \001(\005\022\017\n\007fps_den\030\004 \001(\005\022X\n\024avdict_enc"
  "ode_option\030\005 \003(\0132:.DavWaveSetting.VideoE"
  "ncodeSetting.AvdictEncodeOptionEntry\0329\n\027"
  "AvdictEncodeOptionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"\322\001\n\022AudioEncodeSetting\022\023"
  "\n\013encode_type\030\001 \001(\t\022\022\n\ncodec_name\030\002 \001(\t\022"
  "X\n\024avdict_encode_option\030\003 \003(\0132:.DavWaveS"
  "etting.AudioEncodeSetting.AvdictEncodeOp"
  "tionEntry\0329\n\027AvdictEncodeOptionEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\263\001\n\nMuxSett"
  "ing\022\020\n\010mux_type\030\001 \001(\t\022\017\n\007mux_fmt\030\002 \001(\t\022J"
  "\n\021avdict_mux_option\030\003 \003(\0132/.DavWaveSetti"
  "ng.MuxSetting.AvdictMuxOptionEntry\0326\n\024Av"
  "dictMuxOptionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"{\n\024VideoMixLayoutUpdate\022/\n\006la"
  "yout\030\001 \001(\0162\037.DavWaveSetting.EVideoMixLay"
  "out\0222\n\005cells\030\002 \003(\0132#.DavWaveSetting.Vide"
  "oCellCoordinate\"P\n\023VideoCellCoordinate\022\t"
  "\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001w\030\003 \001(\005\022\t\n\001h\030\004 \001"
  "(\005\022\r\n\005layer\030\005 \001(\005*\265\002\n\017EVideoMixLayout\022\017\n"
  "\013eLayoutAuto\020\000\022\033\n\016eLayoutUnknown\020\377\377\377\377\377\377\377"
  "\377\377\001\022\r\n\teSingle_1\020\001\022\020\n\014eHorizonal_2\020\002\022\032\n\026"
  "eLeft1SmallRight1Big_2\020\003\022\032\n\026eLeft2SmallR"
  "ight1Big_3\020\004\022\014\n\010eEqual_4\020\005\022\032\n\026eLeft1BigR"
  "ight3Small_4\020\006\022\017\n\013eRow2Col3_6\020\007\022\014\n\010eEqua"
  "l_9\020\010\022\020\n\014eRow3Col4_12\020\t\022\r\n\teEqual_16\020\n\022\r"
  "\n\teEqual_25\020\013\022\r\n\teEqual_36\020\014\022\023\n\017eLayoutS"
  "pecific\020\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_davWaveSetting_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_davWaveSetting_2eproto_sccs[18] = {
  &scc_info_AudioDecodeSetting_davWaveSetting_2eproto.base,
  &scc_info_AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto.base,
  &scc_info_AudioEncodeSetting_davWaveSetting_2eproto.base,
  &scc_info_AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto.base,
  &scc_info_AudioFilterSetting_davWaveSetting_2eproto.base,
  &scc_info_AudioMixSetting_davWaveSetting_2eproto.base,
  &scc_info_DemuxSetting_davWaveSetting_2eproto.base,
  &scc_info_DemuxSetting_AvdictDemuxOptionEntry_DoNotUse_davWaveSetting_2eproto.base,
  &scc_info_MuxSetting_davWaveSetting_2eproto.base,
  &scc_info_MuxSetting_AvdictMuxOptionEntry_DoNotUse_davWaveSetting_2eproto.base,
  &scc_info_VideoCellCoordinate_davWaveSetting_2eproto.base,
  &scc_info_VideoDecodeSetting_davWaveSetting_2eproto.base,
  &scc_info_VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse_davWaveSetting_2eproto.base,
  &scc_info_VideoEncodeSetting_davWaveSetting_2eproto.base,
  &scc_info_VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse_davWaveSetting_2eproto.base,
  &scc_info_VideoFilterSetting_davWaveSetting_2eproto.base,
  &scc_info_VideoMixLayoutUpdate_davWaveSetting_2eproto.base,
  &scc_info_VideoMixSetting_davWaveSetting_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_davWaveSetting_2eproto_once;
static bool descriptor_table_davWaveSetting_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_davWaveSetting_2eproto = {
  &descriptor_table_davWaveSetting_2eproto_initialized, descriptor_table_protodef_davWaveSetting_2eproto, "davWaveSetting.proto", 2377,
  &descriptor_table_davWaveSetting_2eproto_once, descriptor_table_davWaveSetting_2eproto_sccs, descriptor_table_davWaveSetting_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_davWaveSetting_2eproto::offsets,
  file_level_metadata_davWaveSetting_2eproto, 18, file_level_enum_descriptors_davWaveSetting_2eproto, file_level_service_descriptors_davWaveSetting_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_davWaveSetting_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_davWaveSetting_2eproto), true);
namespace DavWaveSetting {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EVideoMixLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_davWaveSetting_2eproto);
  return file_level_enum_descriptors_davWaveSetting_2eproto[0];
}
bool EVideoMixLayout_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse() {}
DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::MergeFrom(const DemuxSetting_AvdictDemuxOptionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DemuxSetting::InitAsDefaultInstance() {
}
class DemuxSetting::_Internal {
 public:
};

DemuxSetting::DemuxSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.DemuxSetting)
}
DemuxSetting::DemuxSetting(const DemuxSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avdict_demux_option_.MergeFrom(from.avdict_demux_option_);
  demux_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_demux_type().empty()) {
    demux_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.demux_type_);
  }
  ::memcpy(&input_fps_emulate_, &from.input_fps_emulate_,
    static_cast<size_t>(reinterpret_cast<char*>(&reconnect_times_) -
    reinterpret_cast<char*>(&input_fps_emulate_)) + sizeof(reconnect_times_));
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.DemuxSetting)
}

void DemuxSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DemuxSetting_davWaveSetting_2eproto.base);
  demux_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_fps_emulate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reconnect_times_) -
      reinterpret_cast<char*>(&input_fps_emulate_)) + sizeof(reconnect_times_));
}

DemuxSetting::~DemuxSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.DemuxSetting)
  SharedDtor();
}

void DemuxSetting::SharedDtor() {
  demux_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DemuxSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemuxSetting& DemuxSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemuxSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void DemuxSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.DemuxSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avdict_demux_option_.Clear();
  demux_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_fps_emulate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reconnect_times_) -
      reinterpret_cast<char*>(&input_fps_emulate_)) + sizeof(reconnect_times_));
  _internal_metadata_.Clear();
}

const char* DemuxSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string demux_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_demux_type(), ptr, ctx, "DavWaveSetting.DemuxSetting.demux_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool input_fps_emulate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          input_fps_emulate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 read_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          read_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reconnect_times = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reconnect_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> avdict_demux_option = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&avdict_demux_option_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DemuxSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.DemuxSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string demux_type = 1;
  if (this->demux_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_demux_type().data(), static_cast<int>(this->_internal_demux_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.DemuxSetting.demux_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_demux_type(), target);
  }

  // bool input_fps_emulate = 2;
  if (this->input_fps_emulate() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_input_fps_emulate(), target);
  }

  // int32 read_timeout = 3;
  if (this->read_timeout() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_read_timeout(), target);
  }

  // int32 reconnect_times = 4;
  if (this->reconnect_times() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reconnect_times(), target);
  }

  // map<string, string> avdict_demux_option = 5;
  if (!this->_internal_avdict_demux_option().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.DemuxSetting.AvdictDemuxOptionEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.DemuxSetting.AvdictDemuxOptionEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_avdict_demux_option().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_avdict_demux_option().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_demux_option().begin();
          it != this->_internal_avdict_demux_option().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_demux_option().begin();
          it != this->_internal_avdict_demux_option().end(); ++it) {
        target = DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.DemuxSetting)
  return target;
}

size_t DemuxSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.DemuxSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> avdict_demux_option = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avdict_demux_option_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_avdict_demux_option().begin();
      it != this->_internal_avdict_demux_option().end(); ++it) {
    total_size += DemuxSetting_AvdictDemuxOptionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string demux_type = 1;
  if (this->demux_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_demux_type());
  }

  // bool input_fps_emulate = 2;
  if (this->input_fps_emulate() != 0) {
    total_size += 1 + 1;
  }

  // int32 read_timeout = 3;
  if (this->read_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_read_timeout());
  }

  // int32 reconnect_times = 4;
  if (this->reconnect_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reconnect_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemuxSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.DemuxSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const DemuxSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DemuxSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.DemuxSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.DemuxSetting)
    MergeFrom(*source);
  }
}

void DemuxSetting::MergeFrom(const DemuxSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.DemuxSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avdict_demux_option_.MergeFrom(from.avdict_demux_option_);
  if (from.demux_type().size() > 0) {

    demux_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.demux_type_);
  }
  if (from.input_fps_emulate() != 0) {
    _internal_set_input_fps_emulate(from._internal_input_fps_emulate());
  }
  if (from.read_timeout() != 0) {
    _internal_set_read_timeout(from._internal_read_timeout());
  }
  if (from.reconnect_times() != 0) {
    _internal_set_reconnect_times(from._internal_reconnect_times());
  }
}

void DemuxSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.DemuxSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemuxSetting::CopyFrom(const DemuxSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.DemuxSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemuxSetting::IsInitialized() const {
  return true;
}

void DemuxSetting::InternalSwap(DemuxSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avdict_demux_option_.Swap(&other->avdict_demux_option_);
  demux_type_.Swap(&other->demux_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_fps_emulate_, other->input_fps_emulate_);
  swap(read_timeout_, other->read_timeout_);
  swap(reconnect_times_, other->reconnect_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DemuxSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoFilterSetting::InitAsDefaultInstance() {
}
class VideoFilterSetting::_Internal {
 public:
};

VideoFilterSetting::VideoFilterSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.VideoFilterSetting)
}
VideoFilterSetting::VideoFilterSetting(const VideoFilterSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter_type().empty()) {
    filter_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_type_);
  }
  filter_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter_arg().empty()) {
    filter_arg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_arg_);
  }
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.VideoFilterSetting)
}

void VideoFilterSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoFilterSetting_davWaveSetting_2eproto.base);
  filter_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VideoFilterSetting::~VideoFilterSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.VideoFilterSetting)
  SharedDtor();
}

void VideoFilterSetting::SharedDtor() {
  filter_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_arg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoFilterSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoFilterSetting& VideoFilterSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoFilterSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void VideoFilterSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.VideoFilterSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_arg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* VideoFilterSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filter_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_filter_type(), ptr, ctx, "DavWaveSetting.VideoFilterSetting.filter_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filter_arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_filter_arg(), ptr, ctx, "DavWaveSetting.VideoFilterSetting.filter_arg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFilterSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.VideoFilterSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter_type = 1;
  if (this->filter_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_type().data(), static_cast<int>(this->_internal_filter_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.VideoFilterSetting.filter_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter_type(), target);
  }

  // string filter_arg = 2;
  if (this->filter_arg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_arg().data(), static_cast<int>(this->_internal_filter_arg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.VideoFilterSetting.filter_arg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filter_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.VideoFilterSetting)
  return target;
}

size_t VideoFilterSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.VideoFilterSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter_type = 1;
  if (this->filter_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_type());
  }

  // string filter_arg = 2;
  if (this->filter_arg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFilterSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.VideoFilterSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFilterSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoFilterSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.VideoFilterSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.VideoFilterSetting)
    MergeFrom(*source);
  }
}

void VideoFilterSetting::MergeFrom(const VideoFilterSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.VideoFilterSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter_type().size() > 0) {

    filter_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_type_);
  }
  if (from.filter_arg().size() > 0) {

    filter_arg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_arg_);
  }
}

void VideoFilterSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.VideoFilterSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFilterSetting::CopyFrom(const VideoFilterSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.VideoFilterSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFilterSetting::IsInitialized() const {
  return true;
}

void VideoFilterSetting::InternalSwap(VideoFilterSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filter_type_.Swap(&other->filter_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_arg_.Swap(&other->filter_arg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFilterSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioFilterSetting::InitAsDefaultInstance() {
}
class AudioFilterSetting::_Internal {
 public:
};

AudioFilterSetting::AudioFilterSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.AudioFilterSetting)
}
AudioFilterSetting::AudioFilterSetting(const AudioFilterSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter_type().empty()) {
    filter_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_type_);
  }
  filter_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter_arg().empty()) {
    filter_arg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_arg_);
  }
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.AudioFilterSetting)
}

void AudioFilterSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioFilterSetting_davWaveSetting_2eproto.base);
  filter_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioFilterSetting::~AudioFilterSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.AudioFilterSetting)
  SharedDtor();
}

void AudioFilterSetting::SharedDtor() {
  filter_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_arg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioFilterSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFilterSetting& AudioFilterSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioFilterSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void AudioFilterSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.AudioFilterSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_arg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AudioFilterSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filter_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_filter_type(), ptr, ctx, "DavWaveSetting.AudioFilterSetting.filter_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filter_arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_filter_arg(), ptr, ctx, "DavWaveSetting.AudioFilterSetting.filter_arg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioFilterSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.AudioFilterSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter_type = 1;
  if (this->filter_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_type().data(), static_cast<int>(this->_internal_filter_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.AudioFilterSetting.filter_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter_type(), target);
  }

  // string filter_arg = 2;
  if (this->filter_arg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_arg().data(), static_cast<int>(this->_internal_filter_arg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.AudioFilterSetting.filter_arg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filter_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.AudioFilterSetting)
  return target;
}

size_t AudioFilterSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.AudioFilterSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter_type = 1;
  if (this->filter_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_type());
  }

  // string filter_arg = 2;
  if (this->filter_arg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFilterSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.AudioFilterSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFilterSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioFilterSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.AudioFilterSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.AudioFilterSetting)
    MergeFrom(*source);
  }
}

void AudioFilterSetting::MergeFrom(const AudioFilterSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.AudioFilterSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter_type().size() > 0) {

    filter_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_type_);
  }
  if (from.filter_arg().size() > 0) {

    filter_arg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_arg_);
  }
}

void AudioFilterSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.AudioFilterSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFilterSetting::CopyFrom(const AudioFilterSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.AudioFilterSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFilterSetting::IsInitialized() const {
  return true;
}

void AudioFilterSetting::InternalSwap(AudioFilterSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filter_type_.Swap(&other->filter_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_arg_.Swap(&other->filter_arg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioFilterSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse() {}
VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::MergeFrom(const VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void VideoDecodeSetting::InitAsDefaultInstance() {
}
class VideoDecodeSetting::_Internal {
 public:
};

VideoDecodeSetting::VideoDecodeSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.VideoDecodeSetting)
}
VideoDecodeSetting::VideoDecodeSetting(const VideoDecodeSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avdict_decode_option_.MergeFrom(from.avdict_decode_option_);
  decode_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_decode_type().empty()) {
    decode_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.decode_type_);
  }
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.VideoDecodeSetting)
}

void VideoDecodeSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoDecodeSetting_davWaveSetting_2eproto.base);
  decode_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VideoDecodeSetting::~VideoDecodeSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.VideoDecodeSetting)
  SharedDtor();
}

void VideoDecodeSetting::SharedDtor() {
  decode_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoDecodeSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoDecodeSetting& VideoDecodeSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoDecodeSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void VideoDecodeSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.VideoDecodeSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avdict_decode_option_.Clear();
  decode_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* VideoDecodeSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string decode_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_decode_type(), ptr, ctx, "DavWaveSetting.VideoDecodeSetting.decode_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> avdict_decode_option = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&avdict_decode_option_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoDecodeSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.VideoDecodeSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string decode_type = 1;
  if (this->decode_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_decode_type().data(), static_cast<int>(this->_internal_decode_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.VideoDecodeSetting.decode_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_decode_type(), target);
  }

  // map<string, string> avdict_decode_option = 2;
  if (!this->_internal_avdict_decode_option().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.VideoDecodeSetting.AvdictDecodeOptionEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.VideoDecodeSetting.AvdictDecodeOptionEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_avdict_decode_option().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_avdict_decode_option().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_decode_option().begin();
          it != this->_internal_avdict_decode_option().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_decode_option().begin();
          it != this->_internal_avdict_decode_option().end(); ++it) {
        target = VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.VideoDecodeSetting)
  return target;
}

size_t VideoDecodeSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.VideoDecodeSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> avdict_decode_option = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avdict_decode_option_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_avdict_decode_option().begin();
      it != this->_internal_avdict_decode_option().end(); ++it) {
    total_size += VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string decode_type = 1;
  if (this->decode_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decode_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoDecodeSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.VideoDecodeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoDecodeSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoDecodeSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.VideoDecodeSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.VideoDecodeSetting)
    MergeFrom(*source);
  }
}

void VideoDecodeSetting::MergeFrom(const VideoDecodeSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.VideoDecodeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avdict_decode_option_.MergeFrom(from.avdict_decode_option_);
  if (from.decode_type().size() > 0) {

    decode_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.decode_type_);
  }
}

void VideoDecodeSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.VideoDecodeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoDecodeSetting::CopyFrom(const VideoDecodeSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.VideoDecodeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoDecodeSetting::IsInitialized() const {
  return true;
}

void VideoDecodeSetting::InternalSwap(VideoDecodeSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avdict_decode_option_.Swap(&other->avdict_decode_option_);
  decode_type_.Swap(&other->decode_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoDecodeSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse() {}
AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::MergeFrom(const AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AudioDecodeSetting::InitAsDefaultInstance() {
}
class AudioDecodeSetting::_Internal {
 public:
};

AudioDecodeSetting::AudioDecodeSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.AudioDecodeSetting)
}
AudioDecodeSetting::AudioDecodeSetting(const AudioDecodeSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avdict_decode_option_.MergeFrom(from.avdict_decode_option_);
  decode_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_decode_type().empty()) {
    decode_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.decode_type_);
  }
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.AudioDecodeSetting)
}

void AudioDecodeSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioDecodeSetting_davWaveSetting_2eproto.base);
  decode_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioDecodeSetting::~AudioDecodeSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.AudioDecodeSetting)
  SharedDtor();
}

void AudioDecodeSetting::SharedDtor() {
  decode_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioDecodeSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioDecodeSetting& AudioDecodeSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioDecodeSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void AudioDecodeSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.AudioDecodeSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avdict_decode_option_.Clear();
  decode_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AudioDecodeSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string decode_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_decode_type(), ptr, ctx, "DavWaveSetting.AudioDecodeSetting.decode_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> avdict_decode_option = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&avdict_decode_option_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioDecodeSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.AudioDecodeSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string decode_type = 1;
  if (this->decode_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_decode_type().data(), static_cast<int>(this->_internal_decode_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.AudioDecodeSetting.decode_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_decode_type(), target);
  }

  // map<string, string> avdict_decode_option = 2;
  if (!this->_internal_avdict_decode_option().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.AudioDecodeSetting.AvdictDecodeOptionEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.AudioDecodeSetting.AvdictDecodeOptionEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_avdict_decode_option().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_avdict_decode_option().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_decode_option().begin();
          it != this->_internal_avdict_decode_option().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_decode_option().begin();
          it != this->_internal_avdict_decode_option().end(); ++it) {
        target = AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.AudioDecodeSetting)
  return target;
}

size_t AudioDecodeSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.AudioDecodeSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> avdict_decode_option = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avdict_decode_option_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_avdict_decode_option().begin();
      it != this->_internal_avdict_decode_option().end(); ++it) {
    total_size += AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string decode_type = 1;
  if (this->decode_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decode_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioDecodeSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.AudioDecodeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioDecodeSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioDecodeSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.AudioDecodeSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.AudioDecodeSetting)
    MergeFrom(*source);
  }
}

void AudioDecodeSetting::MergeFrom(const AudioDecodeSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.AudioDecodeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avdict_decode_option_.MergeFrom(from.avdict_decode_option_);
  if (from.decode_type().size() > 0) {

    decode_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.decode_type_);
  }
}

void AudioDecodeSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.AudioDecodeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioDecodeSetting::CopyFrom(const AudioDecodeSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.AudioDecodeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioDecodeSetting::IsInitialized() const {
  return true;
}

void AudioDecodeSetting::InternalSwap(AudioDecodeSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avdict_decode_option_.Swap(&other->avdict_decode_option_);
  decode_type_.Swap(&other->decode_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioDecodeSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoMixSetting::InitAsDefaultInstance() {
  ::DavWaveSetting::_VideoMixSetting_default_instance_._instance.get_mutable()->layout_info_ = const_cast< ::DavWaveSetting::VideoMixLayoutUpdate*>(
      ::DavWaveSetting::VideoMixLayoutUpdate::internal_default_instance());
}
class VideoMixSetting::_Internal {
 public:
  static const ::DavWaveSetting::VideoMixLayoutUpdate& layout_info(const VideoMixSetting* msg);
};

const ::DavWaveSetting::VideoMixLayoutUpdate&
VideoMixSetting::_Internal::layout_info(const VideoMixSetting* msg) {
  return *msg->layout_info_;
}
VideoMixSetting::VideoMixSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.VideoMixSetting)
}
VideoMixSetting::VideoMixSetting(const VideoMixSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  backgroud_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_backgroud_image_path().empty()) {
    backgroud_image_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backgroud_image_path_);
  }
  if (from._internal_has_layout_info()) {
    layout_info_ = new ::DavWaveSetting::VideoMixLayoutUpdate(*from.layout_info_);
  } else {
    layout_info_ = nullptr;
  }
  ::memcpy(&b_regenerate_pts_, &from.b_regenerate_pts_,
    static_cast<size_t>(reinterpret_cast<char*>(&border_color_) -
    reinterpret_cast<char*>(&b_regenerate_pts_)) + sizeof(border_color_));
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.VideoMixSetting)
}

void VideoMixSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoMixSetting_davWaveSetting_2eproto.base);
  backgroud_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&layout_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&border_color_) -
      reinterpret_cast<char*>(&layout_info_)) + sizeof(border_color_));
}

VideoMixSetting::~VideoMixSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.VideoMixSetting)
  SharedDtor();
}

void VideoMixSetting::SharedDtor() {
  backgroud_image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layout_info_;
}

void VideoMixSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoMixSetting& VideoMixSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoMixSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void VideoMixSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.VideoMixSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  backgroud_image_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && layout_info_ != nullptr) {
    delete layout_info_;
  }
  layout_info_ = nullptr;
  ::memset(&b_regenerate_pts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&border_color_) -
      reinterpret_cast<char*>(&b_regenerate_pts_)) + sizeof(border_color_));
  _internal_metadata_.Clear();
}

const char* VideoMixSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool b_regenerate_pts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          b_regenerate_pts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool b_start_after_all_join = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          b_start_after_all_join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool b_quit_if_no_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          b_quit_if_no_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fps_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          fps_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fps_den = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          fps_den_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 margin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 border_width = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          border_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 border_color = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          border_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fillet_radius = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          fillet_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string backgroud_image_path = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_backgroud_image_path(), ptr, ctx, "DavWaveSetting.VideoMixSetting.backgroud_image_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DavWaveSetting.VideoMixLayoutUpdate layout_info = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoMixSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.VideoMixSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool b_regenerate_pts = 1;
  if (this->b_regenerate_pts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_b_regenerate_pts(), target);
  }

  // bool b_start_after_all_join = 2;
  if (this->b_start_after_all_join() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_b_start_after_all_join(), target);
  }

  // bool b_quit_if_no_input = 3;
  if (this->b_quit_if_no_input() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_b_quit_if_no_input(), target);
  }

  // int32 width = 10;
  if (this->width() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_width(), target);
  }

  // int32 height = 11;
  if (this->height() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_height(), target);
  }

  // int32 fps_num = 12;
  if (this->fps_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_fps_num(), target);
  }

  // int32 fps_den = 13;
  if (this->fps_den() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_fps_den(), target);
  }

  // int32 margin = 14;
  if (this->margin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_margin(), target);
  }

  // int32 border_width = 15;
  if (this->border_width() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_border_width(), target);
  }

  // int32 border_color = 16;
  if (this->border_color() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_border_color(), target);
  }

  // int32 fillet_radius = 17;
  if (this->fillet_radius() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_fillet_radius(), target);
  }

  // string backgroud_image_path = 18;
  if (this->backgroud_image_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backgroud_image_path().data(), static_cast<int>(this->_internal_backgroud_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.VideoMixSetting.backgroud_image_path");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_backgroud_image_path(), target);
  }

  // .DavWaveSetting.VideoMixLayoutUpdate layout_info = 19;
  if (this->has_layout_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::layout_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.VideoMixSetting)
  return target;
}

size_t VideoMixSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.VideoMixSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string backgroud_image_path = 18;
  if (this->backgroud_image_path().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backgroud_image_path());
  }

  // .DavWaveSetting.VideoMixLayoutUpdate layout_info = 19;
  if (this->has_layout_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layout_info_);
  }

  // bool b_regenerate_pts = 1;
  if (this->b_regenerate_pts() != 0) {
    total_size += 1 + 1;
  }

  // bool b_start_after_all_join = 2;
  if (this->b_start_after_all_join() != 0) {
    total_size += 1 + 1;
  }

  // bool b_quit_if_no_input = 3;
  if (this->b_quit_if_no_input() != 0) {
    total_size += 1 + 1;
  }

  // int32 width = 10;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 11;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 fps_num = 12;
  if (this->fps_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fps_num());
  }

  // int32 fps_den = 13;
  if (this->fps_den() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fps_den());
  }

  // int32 margin = 14;
  if (this->margin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_margin());
  }

  // int32 fillet_radius = 17;
  if (this->fillet_radius() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fillet_radius());
  }

  // int32 border_width = 15;
  if (this->border_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_border_width());
  }

  // int32 border_color = 16;
  if (this->border_color() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_border_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoMixSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.VideoMixSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMixSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoMixSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.VideoMixSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.VideoMixSetting)
    MergeFrom(*source);
  }
}

void VideoMixSetting::MergeFrom(const VideoMixSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.VideoMixSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.backgroud_image_path().size() > 0) {

    backgroud_image_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backgroud_image_path_);
  }
  if (from.has_layout_info()) {
    _internal_mutable_layout_info()->::DavWaveSetting::VideoMixLayoutUpdate::MergeFrom(from._internal_layout_info());
  }
  if (from.b_regenerate_pts() != 0) {
    _internal_set_b_regenerate_pts(from._internal_b_regenerate_pts());
  }
  if (from.b_start_after_all_join() != 0) {
    _internal_set_b_start_after_all_join(from._internal_b_start_after_all_join());
  }
  if (from.b_quit_if_no_input() != 0) {
    _internal_set_b_quit_if_no_input(from._internal_b_quit_if_no_input());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.fps_num() != 0) {
    _internal_set_fps_num(from._internal_fps_num());
  }
  if (from.fps_den() != 0) {
    _internal_set_fps_den(from._internal_fps_den());
  }
  if (from.margin() != 0) {
    _internal_set_margin(from._internal_margin());
  }
  if (from.fillet_radius() != 0) {
    _internal_set_fillet_radius(from._internal_fillet_radius());
  }
  if (from.border_width() != 0) {
    _internal_set_border_width(from._internal_border_width());
  }
  if (from.border_color() != 0) {
    _internal_set_border_color(from._internal_border_color());
  }
}

void VideoMixSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.VideoMixSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMixSetting::CopyFrom(const VideoMixSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.VideoMixSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMixSetting::IsInitialized() const {
  return true;
}

void VideoMixSetting::InternalSwap(VideoMixSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  backgroud_image_path_.Swap(&other->backgroud_image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(layout_info_, other->layout_info_);
  swap(b_regenerate_pts_, other->b_regenerate_pts_);
  swap(b_start_after_all_join_, other->b_start_after_all_join_);
  swap(b_quit_if_no_input_, other->b_quit_if_no_input_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(fps_num_, other->fps_num_);
  swap(fps_den_, other->fps_den_);
  swap(margin_, other->margin_);
  swap(fillet_radius_, other->fillet_radius_);
  swap(border_width_, other->border_width_);
  swap(border_color_, other->border_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoMixSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioMixSetting::InitAsDefaultInstance() {
}
class AudioMixSetting::_Internal {
 public:
};

AudioMixSetting::AudioMixSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.AudioMixSetting)
}
AudioMixSetting::AudioMixSetting(const AudioMixSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_size_, &from.frame_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_mute_at_start_) -
    reinterpret_cast<char*>(&frame_size_)) + sizeof(b_mute_at_start_));
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.AudioMixSetting)
}

void AudioMixSetting::SharedCtor() {
  ::memset(&frame_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_mute_at_start_) -
      reinterpret_cast<char*>(&frame_size_)) + sizeof(b_mute_at_start_));
}

AudioMixSetting::~AudioMixSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.AudioMixSetting)
  SharedDtor();
}

void AudioMixSetting::SharedDtor() {
}

void AudioMixSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioMixSetting& AudioMixSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioMixSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void AudioMixSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.AudioMixSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frame_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_mute_at_start_) -
      reinterpret_cast<char*>(&frame_size_)) + sizeof(b_mute_at_start_));
  _internal_metadata_.Clear();
}

const char* AudioMixSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool b_mute_at_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          b_mute_at_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioMixSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.AudioMixSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_size = 1;
  if (this->frame_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_size(), target);
  }

  // bool b_mute_at_start = 2;
  if (this->b_mute_at_start() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_b_mute_at_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.AudioMixSetting)
  return target;
}

size_t AudioMixSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.AudioMixSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 frame_size = 1;
  if (this->frame_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_size());
  }

  // bool b_mute_at_start = 2;
  if (this->b_mute_at_start() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioMixSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.AudioMixSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioMixSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioMixSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.AudioMixSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.AudioMixSetting)
    MergeFrom(*source);
  }
}

void AudioMixSetting::MergeFrom(const AudioMixSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.AudioMixSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_size() != 0) {
    _internal_set_frame_size(from._internal_frame_size());
  }
  if (from.b_mute_at_start() != 0) {
    _internal_set_b_mute_at_start(from._internal_b_mute_at_start());
  }
}

void AudioMixSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.AudioMixSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioMixSetting::CopyFrom(const AudioMixSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.AudioMixSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioMixSetting::IsInitialized() const {
  return true;
}

void AudioMixSetting::InternalSwap(AudioMixSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(frame_size_, other->frame_size_);
  swap(b_mute_at_start_, other->b_mute_at_start_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioMixSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse() {}
VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::MergeFrom(const VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void VideoEncodeSetting::InitAsDefaultInstance() {
}
class VideoEncodeSetting::_Internal {
 public:
};

VideoEncodeSetting::VideoEncodeSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.VideoEncodeSetting)
}
VideoEncodeSetting::VideoEncodeSetting(const VideoEncodeSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avdict_encode_option_.MergeFrom(from.avdict_encode_option_);
  encode_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encode_type().empty()) {
    encode_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encode_type_);
  }
  codec_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_codec_name().empty()) {
    codec_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codec_name_);
  }
  ::memcpy(&fps_num_, &from.fps_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_den_) -
    reinterpret_cast<char*>(&fps_num_)) + sizeof(fps_den_));
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.VideoEncodeSetting)
}

void VideoEncodeSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoEncodeSetting_davWaveSetting_2eproto.base);
  encode_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fps_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_den_) -
      reinterpret_cast<char*>(&fps_num_)) + sizeof(fps_den_));
}

VideoEncodeSetting::~VideoEncodeSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.VideoEncodeSetting)
  SharedDtor();
}

void VideoEncodeSetting::SharedDtor() {
  encode_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoEncodeSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoEncodeSetting& VideoEncodeSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoEncodeSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void VideoEncodeSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.VideoEncodeSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avdict_encode_option_.Clear();
  encode_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fps_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_den_) -
      reinterpret_cast<char*>(&fps_num_)) + sizeof(fps_den_));
  _internal_metadata_.Clear();
}

const char* VideoEncodeSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string encode_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_encode_type(), ptr, ctx, "DavWaveSetting.VideoEncodeSetting.encode_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string codec_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_codec_name(), ptr, ctx, "DavWaveSetting.VideoEncodeSetting.codec_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fps_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fps_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fps_den = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fps_den_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> avdict_encode_option = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&avdict_encode_option_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoEncodeSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.VideoEncodeSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string encode_type = 1;
  if (this->encode_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encode_type().data(), static_cast<int>(this->_internal_encode_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.VideoEncodeSetting.encode_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encode_type(), target);
  }

  // string codec_name = 2;
  if (this->codec_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec_name().data(), static_cast<int>(this->_internal_codec_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.VideoEncodeSetting.codec_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_codec_name(), target);
  }

  // int32 fps_num = 3;
  if (this->fps_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fps_num(), target);
  }

  // int32 fps_den = 4;
  if (this->fps_den() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fps_den(), target);
  }

  // map<string, string> avdict_encode_option = 5;
  if (!this->_internal_avdict_encode_option().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.VideoEncodeSetting.AvdictEncodeOptionEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.VideoEncodeSetting.AvdictEncodeOptionEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_avdict_encode_option().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_avdict_encode_option().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_encode_option().begin();
          it != this->_internal_avdict_encode_option().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_encode_option().begin();
          it != this->_internal_avdict_encode_option().end(); ++it) {
        target = VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.VideoEncodeSetting)
  return target;
}

size_t VideoEncodeSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.VideoEncodeSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> avdict_encode_option = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avdict_encode_option_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_avdict_encode_option().begin();
      it != this->_internal_avdict_encode_option().end(); ++it) {
    total_size += VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string encode_type = 1;
  if (this->encode_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encode_type());
  }

  // string codec_name = 2;
  if (this->codec_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec_name());
  }

  // int32 fps_num = 3;
  if (this->fps_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fps_num());
  }

  // int32 fps_den = 4;
  if (this->fps_den() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fps_den());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoEncodeSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.VideoEncodeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoEncodeSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoEncodeSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.VideoEncodeSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.VideoEncodeSetting)
    MergeFrom(*source);
  }
}

void VideoEncodeSetting::MergeFrom(const VideoEncodeSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.VideoEncodeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avdict_encode_option_.MergeFrom(from.avdict_encode_option_);
  if (from.encode_type().size() > 0) {

    encode_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encode_type_);
  }
  if (from.codec_name().size() > 0) {

    codec_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codec_name_);
  }
  if (from.fps_num() != 0) {
    _internal_set_fps_num(from._internal_fps_num());
  }
  if (from.fps_den() != 0) {
    _internal_set_fps_den(from._internal_fps_den());
  }
}

void VideoEncodeSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.VideoEncodeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoEncodeSetting::CopyFrom(const VideoEncodeSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.VideoEncodeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoEncodeSetting::IsInitialized() const {
  return true;
}

void VideoEncodeSetting::InternalSwap(VideoEncodeSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avdict_encode_option_.Swap(&other->avdict_encode_option_);
  encode_type_.Swap(&other->encode_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codec_name_.Swap(&other->codec_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fps_num_, other->fps_num_);
  swap(fps_den_, other->fps_den_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoEncodeSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse() {}
AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::MergeFrom(const AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AudioEncodeSetting::InitAsDefaultInstance() {
}
class AudioEncodeSetting::_Internal {
 public:
};

AudioEncodeSetting::AudioEncodeSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.AudioEncodeSetting)
}
AudioEncodeSetting::AudioEncodeSetting(const AudioEncodeSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avdict_encode_option_.MergeFrom(from.avdict_encode_option_);
  encode_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encode_type().empty()) {
    encode_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encode_type_);
  }
  codec_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_codec_name().empty()) {
    codec_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codec_name_);
  }
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.AudioEncodeSetting)
}

void AudioEncodeSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioEncodeSetting_davWaveSetting_2eproto.base);
  encode_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioEncodeSetting::~AudioEncodeSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.AudioEncodeSetting)
  SharedDtor();
}

void AudioEncodeSetting::SharedDtor() {
  encode_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioEncodeSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioEncodeSetting& AudioEncodeSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioEncodeSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void AudioEncodeSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.AudioEncodeSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avdict_encode_option_.Clear();
  encode_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AudioEncodeSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string encode_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_encode_type(), ptr, ctx, "DavWaveSetting.AudioEncodeSetting.encode_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string codec_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_codec_name(), ptr, ctx, "DavWaveSetting.AudioEncodeSetting.codec_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> avdict_encode_option = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&avdict_encode_option_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioEncodeSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.AudioEncodeSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string encode_type = 1;
  if (this->encode_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encode_type().data(), static_cast<int>(this->_internal_encode_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.AudioEncodeSetting.encode_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encode_type(), target);
  }

  // string codec_name = 2;
  if (this->codec_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec_name().data(), static_cast<int>(this->_internal_codec_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.AudioEncodeSetting.codec_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_codec_name(), target);
  }

  // map<string, string> avdict_encode_option = 3;
  if (!this->_internal_avdict_encode_option().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.AudioEncodeSetting.AvdictEncodeOptionEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.AudioEncodeSetting.AvdictEncodeOptionEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_avdict_encode_option().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_avdict_encode_option().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_encode_option().begin();
          it != this->_internal_avdict_encode_option().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_encode_option().begin();
          it != this->_internal_avdict_encode_option().end(); ++it) {
        target = AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.AudioEncodeSetting)
  return target;
}

size_t AudioEncodeSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.AudioEncodeSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> avdict_encode_option = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avdict_encode_option_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_avdict_encode_option().begin();
      it != this->_internal_avdict_encode_option().end(); ++it) {
    total_size += AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string encode_type = 1;
  if (this->encode_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encode_type());
  }

  // string codec_name = 2;
  if (this->codec_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioEncodeSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.AudioEncodeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioEncodeSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioEncodeSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.AudioEncodeSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.AudioEncodeSetting)
    MergeFrom(*source);
  }
}

void AudioEncodeSetting::MergeFrom(const AudioEncodeSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.AudioEncodeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avdict_encode_option_.MergeFrom(from.avdict_encode_option_);
  if (from.encode_type().size() > 0) {

    encode_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encode_type_);
  }
  if (from.codec_name().size() > 0) {

    codec_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codec_name_);
  }
}

void AudioEncodeSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.AudioEncodeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioEncodeSetting::CopyFrom(const AudioEncodeSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.AudioEncodeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioEncodeSetting::IsInitialized() const {
  return true;
}

void AudioEncodeSetting::InternalSwap(AudioEncodeSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avdict_encode_option_.Swap(&other->avdict_encode_option_);
  encode_type_.Swap(&other->encode_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codec_name_.Swap(&other->codec_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioEncodeSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MuxSetting_AvdictMuxOptionEntry_DoNotUse::MuxSetting_AvdictMuxOptionEntry_DoNotUse() {}
MuxSetting_AvdictMuxOptionEntry_DoNotUse::MuxSetting_AvdictMuxOptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MuxSetting_AvdictMuxOptionEntry_DoNotUse::MergeFrom(const MuxSetting_AvdictMuxOptionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MuxSetting_AvdictMuxOptionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MuxSetting_AvdictMuxOptionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MuxSetting::InitAsDefaultInstance() {
}
class MuxSetting::_Internal {
 public:
};

MuxSetting::MuxSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.MuxSetting)
}
MuxSetting::MuxSetting(const MuxSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avdict_mux_option_.MergeFrom(from.avdict_mux_option_);
  mux_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mux_type().empty()) {
    mux_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mux_type_);
  }
  mux_fmt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mux_fmt().empty()) {
    mux_fmt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mux_fmt_);
  }
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.MuxSetting)
}

void MuxSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MuxSetting_davWaveSetting_2eproto.base);
  mux_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mux_fmt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MuxSetting::~MuxSetting() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.MuxSetting)
  SharedDtor();
}

void MuxSetting::SharedDtor() {
  mux_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mux_fmt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MuxSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MuxSetting& MuxSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MuxSetting_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void MuxSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.MuxSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avdict_mux_option_.Clear();
  mux_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mux_fmt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MuxSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mux_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_mux_type(), ptr, ctx, "DavWaveSetting.MuxSetting.mux_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mux_fmt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_mux_fmt(), ptr, ctx, "DavWaveSetting.MuxSetting.mux_fmt");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> avdict_mux_option = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&avdict_mux_option_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MuxSetting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.MuxSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mux_type = 1;
  if (this->mux_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mux_type().data(), static_cast<int>(this->_internal_mux_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.MuxSetting.mux_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mux_type(), target);
  }

  // string mux_fmt = 2;
  if (this->mux_fmt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mux_fmt().data(), static_cast<int>(this->_internal_mux_fmt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DavWaveSetting.MuxSetting.mux_fmt");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mux_fmt(), target);
  }

  // map<string, string> avdict_mux_option = 3;
  if (!this->_internal_avdict_mux_option().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.MuxSetting.AvdictMuxOptionEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DavWaveSetting.MuxSetting.AvdictMuxOptionEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_avdict_mux_option().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_avdict_mux_option().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_mux_option().begin();
          it != this->_internal_avdict_mux_option().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MuxSetting_AvdictMuxOptionEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_avdict_mux_option().begin();
          it != this->_internal_avdict_mux_option().end(); ++it) {
        target = MuxSetting_AvdictMuxOptionEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.MuxSetting)
  return target;
}

size_t MuxSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.MuxSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> avdict_mux_option = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avdict_mux_option_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_avdict_mux_option().begin();
      it != this->_internal_avdict_mux_option().end(); ++it) {
    total_size += MuxSetting_AvdictMuxOptionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string mux_type = 1;
  if (this->mux_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mux_type());
  }

  // string mux_fmt = 2;
  if (this->mux_fmt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mux_fmt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuxSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.MuxSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const MuxSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MuxSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.MuxSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.MuxSetting)
    MergeFrom(*source);
  }
}

void MuxSetting::MergeFrom(const MuxSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.MuxSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avdict_mux_option_.MergeFrom(from.avdict_mux_option_);
  if (from.mux_type().size() > 0) {

    mux_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mux_type_);
  }
  if (from.mux_fmt().size() > 0) {

    mux_fmt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mux_fmt_);
  }
}

void MuxSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.MuxSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MuxSetting::CopyFrom(const MuxSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.MuxSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuxSetting::IsInitialized() const {
  return true;
}

void MuxSetting::InternalSwap(MuxSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avdict_mux_option_.Swap(&other->avdict_mux_option_);
  mux_type_.Swap(&other->mux_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mux_fmt_.Swap(&other->mux_fmt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MuxSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoMixLayoutUpdate::InitAsDefaultInstance() {
}
class VideoMixLayoutUpdate::_Internal {
 public:
};

VideoMixLayoutUpdate::VideoMixLayoutUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.VideoMixLayoutUpdate)
}
VideoMixLayoutUpdate::VideoMixLayoutUpdate(const VideoMixLayoutUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layout_ = from.layout_;
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.VideoMixLayoutUpdate)
}

void VideoMixLayoutUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoMixLayoutUpdate_davWaveSetting_2eproto.base);
  layout_ = 0;
}

VideoMixLayoutUpdate::~VideoMixLayoutUpdate() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.VideoMixLayoutUpdate)
  SharedDtor();
}

void VideoMixLayoutUpdate::SharedDtor() {
}

void VideoMixLayoutUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoMixLayoutUpdate& VideoMixLayoutUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoMixLayoutUpdate_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void VideoMixLayoutUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.VideoMixLayoutUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  layout_ = 0;
  _internal_metadata_.Clear();
}

const char* VideoMixLayoutUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DavWaveSetting.EVideoMixLayout layout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_layout(static_cast<::DavWaveSetting::EVideoMixLayout>(val));
        } else goto handle_unusual;
        continue;
      // repeated .DavWaveSetting.VideoCellCoordinate cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoMixLayoutUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.VideoMixLayoutUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DavWaveSetting.EVideoMixLayout layout = 1;
  if (this->layout() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_layout(), target);
  }

  // repeated .DavWaveSetting.VideoCellCoordinate cells = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_cells(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.VideoMixLayoutUpdate)
  return target;
}

size_t VideoMixLayoutUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.VideoMixLayoutUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DavWaveSetting.VideoCellCoordinate cells = 2;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DavWaveSetting.EVideoMixLayout layout = 1;
  if (this->layout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoMixLayoutUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.VideoMixLayoutUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMixLayoutUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoMixLayoutUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.VideoMixLayoutUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.VideoMixLayoutUpdate)
    MergeFrom(*source);
  }
}

void VideoMixLayoutUpdate::MergeFrom(const VideoMixLayoutUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.VideoMixLayoutUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  if (from.layout() != 0) {
    _internal_set_layout(from._internal_layout());
  }
}

void VideoMixLayoutUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.VideoMixLayoutUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMixLayoutUpdate::CopyFrom(const VideoMixLayoutUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.VideoMixLayoutUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMixLayoutUpdate::IsInitialized() const {
  return true;
}

void VideoMixLayoutUpdate::InternalSwap(VideoMixLayoutUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cells_.InternalSwap(&other->cells_);
  swap(layout_, other->layout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoMixLayoutUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoCellCoordinate::InitAsDefaultInstance() {
}
class VideoCellCoordinate::_Internal {
 public:
};

VideoCellCoordinate::VideoCellCoordinate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DavWaveSetting.VideoCellCoordinate)
}
VideoCellCoordinate::VideoCellCoordinate(const VideoCellCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&x_)) + sizeof(layer_));
  // @@protoc_insertion_point(copy_constructor:DavWaveSetting.VideoCellCoordinate)
}

void VideoCellCoordinate::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_) -
      reinterpret_cast<char*>(&x_)) + sizeof(layer_));
}

VideoCellCoordinate::~VideoCellCoordinate() {
  // @@protoc_insertion_point(destructor:DavWaveSetting.VideoCellCoordinate)
  SharedDtor();
}

void VideoCellCoordinate::SharedDtor() {
}

void VideoCellCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoCellCoordinate& VideoCellCoordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoCellCoordinate_davWaveSetting_2eproto.base);
  return *internal_default_instance();
}


void VideoCellCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:DavWaveSetting.VideoCellCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_) -
      reinterpret_cast<char*>(&x_)) + sizeof(layer_));
  _internal_metadata_.Clear();
}

const char* VideoCellCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 layer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoCellCoordinate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DavWaveSetting.VideoCellCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 w = 3;
  if (this->w() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_w(), target);
  }

  // int32 h = 4;
  if (this->h() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_h(), target);
  }

  // int32 layer = 5;
  if (this->layer() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DavWaveSetting.VideoCellCoordinate)
  return target;
}

size_t VideoCellCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DavWaveSetting.VideoCellCoordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 w = 3;
  if (this->w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_w());
  }

  // int32 h = 4;
  if (this->h() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_h());
  }

  // int32 layer = 5;
  if (this->layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoCellCoordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DavWaveSetting.VideoCellCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoCellCoordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoCellCoordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DavWaveSetting.VideoCellCoordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DavWaveSetting.VideoCellCoordinate)
    MergeFrom(*source);
  }
}

void VideoCellCoordinate::MergeFrom(const VideoCellCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DavWaveSetting.VideoCellCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from.h() != 0) {
    _internal_set_h(from._internal_h());
  }
  if (from.layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
}

void VideoCellCoordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DavWaveSetting.VideoCellCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoCellCoordinate::CopyFrom(const VideoCellCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DavWaveSetting.VideoCellCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCellCoordinate::IsInitialized() const {
  return true;
}

void VideoCellCoordinate::InternalSwap(VideoCellCoordinate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
  swap(layer_, other->layer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoCellCoordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DavWaveSetting
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse* Arena::CreateMaybeMessage< ::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::DemuxSetting_AvdictDemuxOptionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::DemuxSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::DemuxSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::DemuxSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::VideoFilterSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::VideoFilterSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::VideoFilterSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::AudioFilterSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::AudioFilterSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::AudioFilterSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse* Arena::CreateMaybeMessage< ::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::VideoDecodeSetting_AvdictDecodeOptionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::VideoDecodeSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::VideoDecodeSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::VideoDecodeSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse* Arena::CreateMaybeMessage< ::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::AudioDecodeSetting_AvdictDecodeOptionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::AudioDecodeSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::AudioDecodeSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::AudioDecodeSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::VideoMixSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::VideoMixSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::VideoMixSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::AudioMixSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::AudioMixSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::AudioMixSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse* Arena::CreateMaybeMessage< ::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::VideoEncodeSetting_AvdictEncodeOptionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::VideoEncodeSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::VideoEncodeSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::VideoEncodeSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse* Arena::CreateMaybeMessage< ::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::AudioEncodeSetting_AvdictEncodeOptionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::AudioEncodeSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::AudioEncodeSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::AudioEncodeSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse* Arena::CreateMaybeMessage< ::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::MuxSetting_AvdictMuxOptionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::MuxSetting* Arena::CreateMaybeMessage< ::DavWaveSetting::MuxSetting >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::MuxSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::VideoMixLayoutUpdate* Arena::CreateMaybeMessage< ::DavWaveSetting::VideoMixLayoutUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::VideoMixLayoutUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::DavWaveSetting::VideoCellCoordinate* Arena::CreateMaybeMessage< ::DavWaveSetting::VideoCellCoordinate >(Arena* arena) {
  return Arena::CreateInternal< ::DavWaveSetting::VideoCellCoordinate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
